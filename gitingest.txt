Directory structure:
└── microsoft-partsunlimitedmrp/
    ├── README.md
    ├── CONTRIBUTING.md
    ├── CreateVMBasic.PNG
    ├── LICENSE
    ├── SECURITY.md
    ├── .travis.yml
    ├── deploy/
    │   ├── Build-MRP-App-Manually.md
    │   ├── deploy_mrp_app.sh
    │   ├── Install-Build-Dependencies.sh
    │   ├── install_mrp_dependencies.sh
    │   ├── MongoRecords.js
    │   ├── SSH-MRP-Artifacts.ps1
    │   ├── SSH-MRP-BDD-Security.ps1
    │   ├── azurestack/
    │   │   ├── readme.md
    │   │   ├── customscripts/
    │   │   │   ├── readme.md
    │   │   │   ├── install_updates.sh
    │   │   │   ├── chef/
    │   │   │   │   ├── readme.md
    │   │   │   │   └── install_chef.sh
    │   │   │   ├── jenkins/
    │   │   │   │   └── install_jenkins_1604.sh
    │   │   │   ├── linux_extension/
    │   │   │   │   └── manifest.json
    │   │   │   └── puppet/
    │   │   │       └── install_puppet_1604.sh
    │   │   └── instances/
    │   │       ├── chef_node/
    │   │       │   ├── readme.md
    │   │       │   └── AddChefNode.json
    │   │       ├── chef_standalone/
    │   │       │   ├── readme.md
    │   │       │   └── Chef.ChefServer/
    │   │       │       ├── Manifest.json
    │   │       │       ├── UIDefinition.json
    │   │       │       ├── DeploymentTemplates/
    │   │       │       │   └── ChefDeploy.json
    │   │       │       └── strings/
    │   │       │           └── resources.resjson
    │   │       ├── chef_workstation/
    │   │       │   ├── readme.md
    │   │       │   └── AddChefWorkstation.json
    │   │       ├── jenkins_mrp/
    │   │       │   ├── readme.md
    │   │       │   └── PartsUnlimitedMRP.MRPwithJenkins/
    │   │       │       ├── Manifest.json
    │   │       │       ├── UIDefinition.json
    │   │       │       ├── DeploymentTemplates/
    │   │       │       │   └── MRPwithJenkinsDeploy.json
    │   │       │       └── strings/
    │   │       │           └── resources.resjson
    │   │       ├── jenkins_standalone/
    │   │       │   ├── readme.md
    │   │       │   └── TheJenkinsProject.Jenkins/
    │   │       │       ├── Manifest.json
    │   │       │       ├── UIDefinition.json
    │   │       │       ├── DeploymentTemplates/
    │   │       │       │   └── JenkinsDeploy.json
    │   │       │       └── strings/
    │   │       │           └── resources.resjson
    │   │       ├── parts_unlimited_mrp_base/
    │   │       │   ├── readme.md
    │   │       │   ├── install_mrp_dependencies_1604.sh
    │   │       │   └── PartsUnlimited.Ubuntu1604/
    │   │       │       ├── Manifest.json
    │   │       │       ├── UIDefinition.json
    │   │       │       ├── DeploymentTemplates/
    │   │       │       │   └── PartsUnlimitedMRP.json
    │   │       │       └── strings/
    │   │       │           └── resources.resjson
    │   │       ├── parts_unlimited_SSH_mrp_base/
    │   │       │   ├── readme.md
    │   │       │   └── PartsUnlimitedSSH.Ubuntu1604/
    │   │       │       ├── Manifest.json
    │   │       │       ├── UIDefinition.json
    │   │       │       ├── DeploymentTemplates/
    │   │       │       │   └── PartsUnlimitedSSHMRP.json
    │   │       │       └── strings/
    │   │       │           └── resources.resjson
    │   │       ├── puppet_node/
    │   │       │   ├── readme.md
    │   │       │   └── AddPuppetNode.json
    │   │       ├── puppet_standalone/
    │   │       │   ├── readme.md
    │   │       │   └── Puppet.PuppetEnterprise/
    │   │       │       ├── Manifest.json
    │   │       │       ├── UIDefinition.json
    │   │       │       ├── DeploymentTemplates/
    │   │       │       │   └── PuppetDeploy.json
    │   │       │       └── strings/
    │   │       │           └── resources.resjson
    │   │       ├── ubuntu_server_1404_base/
    │   │       │   ├── readme.md
    │   │       │   └── Canonical.Ubuntu1404/
    │   │       │       ├── Manifest.json
    │   │       │       ├── UIDefinition.json
    │   │       │       ├── DeploymentTemplates/
    │   │       │       │   └── UbuntuServer1404.json
    │   │       │       └── strings/
    │   │       │           └── resources.resjson
    │   │       └── ubuntu_server_1604_base/
    │   │           ├── readme.md
    │   │           └── Canonical.UbuntuServer.1.0.0/
    │   │               ├── Manifest.json
    │   │               ├── UIDefinition.json
    │   │               ├── DeploymentTemplates/
    │   │               │   └── UbuntuServer1604.json
    │   │               └── strings/
    │   │                   └── resources.resjson
    │   └── docker/
    │       ├── BuildAndRun.sh
    │       ├── StopAndRemove.sh
    │       ├── Clients/
    │       │   ├── Dockerfile
    │       │   └── drop/
    │       │       └── PUT YOUR WAR FILE HERE
    │       ├── Database/
    │       │   ├── Dockerfile
    │       │   └── drop/
    │       │       └── MongoRecords.js
    │       └── Order/
    │           ├── Dockerfile
    │           └── drop/
    │               ├── PUT YOUR JAR FILE HERE
    │               └── run.sh
    ├── Labfiles/
    │   ├── ansible-azure-lab/
    │   │   ├── ARMtemplate-newVM.json
    │   │   ├── delete_vm.yml
    │   │   ├── httpd.yml
    │   │   ├── index.html
    │   │   ├── LICENSE
    │   │   ├── new_ARM_deployment.yml
    │   │   ├── new_vm_web.yml
    │   │   └── VERSION
    │   ├── AZ-400T05-ImplemntgAppInfra/
    │   │   └── Labfiles/
    │   │       ├── automate_nginx.sh
    │   │       ├── ansible/
    │   │       │   ├── ARMtemplate-newVM.json
    │   │       │   ├── create_vm.yml
    │   │       │   ├── cron.yml
    │   │       │   ├── delete_vm.yml
    │   │       │   ├── httpd.yml
    │   │       │   ├── index.html
    │   │       │   ├── new_ARM_deployment.yml
    │   │       │   ├── new_vm_web.yml
    │   │       │   └── nginx.yml
    │   │       └── M04/
    │   │           ├── DeployusingChef/
    │   │           │   └── final/
    │   │           │       └── default.rb
    │   │           └── Puppet/
    │   │               └── final/
    │   │                   └── init.pp
    │   ├── DevOps200.1x-PracticesandPrinciples/
    │   │   ├── Mod03/
    │   │   │   └── python-ci-example-master/
    │   │   │       ├── README.md
    │   │   │       ├── __init__.py
    │   │   │       ├── requirements.txt
    │   │   │       ├── .travis.yml
    │   │   │       └── app/
    │   │   │           ├── __init__.py
    │   │   │           ├── src/
    │   │   │           │   ├── __init__.py
    │   │   │           │   └── app.py
    │   │   │           └── tests/
    │   │   │               ├── __init__.py
    │   │   │               └── app-test.py
    │   │   └── Mod04/
    │   │       └── load_testing_locust-master/
    │   │           ├── README.md
    │   │           ├── __init__.py
    │   │           ├── locustfile.py
    │   │           └── app/
    │   │               ├── __init__.py
    │   │               └── app.py
    │   └── DevOps200.2x-InfrastructureasCode/
    │       ├── DeployusingChef/
    │       │   └── final/
    │       │       └── default.rb
    │       └── Puppet/
    │           └── final/
    │               └── init.pp
    └── src/
        ├── Backend/
        │   ├── IntegrationService/
        │   │   ├── gradlew
        │   │   ├── gradlew.bat
        │   │   ├── IntegrationService.iml
        │   │   ├── gradle/
        │   │   │   └── wrapper/
        │   │   │       └── gradle-wrapper.properties
        │   │   └── src/
        │   │       └── main/
        │   │           ├── java/
        │   │           │   └── integration/
        │   │           │       ├── Constants.java
        │   │           │       ├── Main.java
        │   │           │       ├── infrastructure/
        │   │           │       │   ├── ConfigurationHelpers.java
        │   │           │       │   └── ConfigurationManager.java
        │   │           │       ├── models/
        │   │           │       │   ├── QueueResponse.java
        │   │           │       │   ├── mrp/
        │   │           │       │   │   ├── CatalogItem.java
        │   │           │       │   │   ├── DeliveryAddress.java
        │   │           │       │   │   ├── Order.java
        │   │           │       │   │   ├── PhoneInfo.java
        │   │           │       │   │   ├── Quote.java
        │   │           │       │   │   ├── QuoteItemInfo.java
        │   │           │       │   │   ├── ShipmentEventInfo.java
        │   │           │       │   │   └── ShipmentRecord.java
        │   │           │       │   └── website/
        │   │           │       │       ├── OrderItem.java
        │   │           │       │       ├── OrderMessage.java
        │   │           │       │       ├── ProductItem.java
        │   │           │       │       └── ProductMessage.java
        │   │           │       ├── scheduled/
        │   │           │       │   ├── CreateOrderProcessTask.java
        │   │           │       │   └── UpdateProductProcessTask.java
        │   │           │       └── services/
        │   │           │           ├── MrpConnectService.java
        │   │           │           ├── QueueFactory.java
        │   │           │           └── QueueService.java
        │   │           └── resources/
        │   │               └── application.properties
        │   └── OrderService/
        │       ├── README
        │       ├── README.md
        │       ├── gradlew
        │       ├── gradlew.bat
        │       ├── removeBuild.bat
        │       ├── version.properties
        │       ├── buildSrc/
        │       │   └── src/
        │       │       └── main/
        │       │           └── groovy/
        │       │               └── com/
        │       │                   └── microsoft/
        │       │                       └── appinsights/
        │       │                           ├── BuildInformationTask.groovy
        │       │                           └── CleanBuildInformationTask.groovy
        │       ├── gradle/
        │       │   └── wrapper/
        │       │       └── gradle-wrapper.properties
        │       ├── scripts/
        │       │   ├── cat001.json
        │       │   ├── cat002.json
        │       │   ├── cat003.json
        │       │   ├── cat004.json
        │       │   ├── createorder.sh
        │       │   ├── dealer1.json
        │       │   ├── getenv.sh
        │       │   ├── quote1.json
        │       │   ├── quote2.json
        │       │   ├── schema.psql
        │       │   ├── setup.sh
        │       │   ├── setupdocker.sh
        │       │   └── update.sh
        │       └── src/
        │           ├── main/
        │           │   ├── java/
        │           │   │   └── smpl/
        │           │   │       └── ordering/
        │           │   │           ├── AppInsightsFilter.java
        │           │   │           ├── BadRequestException.java
        │           │   │           ├── ConflictingRequestException.java
        │           │   │           ├── MongoDBProperties.java
        │           │   │           ├── OrderingConfiguration.java
        │           │   │           ├── OrderingInitializer.java
        │           │   │           ├── OrderingServiceProperties.java
        │           │   │           ├── PostgresqlProperties.java
        │           │   │           ├── PropertyHelper.java
        │           │   │           ├── SimpleCORSFilter.java
        │           │   │           ├── TestPath.java
        │           │   │           ├── Utility.java
        │           │   │           ├── controllers/
        │           │   │           │   ├── CatalogController.java
        │           │   │           │   ├── DealerController.java
        │           │   │           │   ├── OrderController.java
        │           │   │           │   ├── PingController.java
        │           │   │           │   ├── QuoteController.java
        │           │   │           │   └── ShipmentController.java
        │           │   │           ├── models/
        │           │   │           │   ├── CatalogItem.java
        │           │   │           │   ├── DealerInfo.java
        │           │   │           │   ├── Delivery.java
        │           │   │           │   ├── DeliveryAddress.java
        │           │   │           │   ├── Order.java
        │           │   │           │   ├── OrderEventInfo.java
        │           │   │           │   ├── OrderStatus.java
        │           │   │           │   ├── OrderUpdateInfo.java
        │           │   │           │   ├── PhoneInfo.java
        │           │   │           │   ├── Quote.java
        │           │   │           │   ├── QuoteItemInfo.java
        │           │   │           │   ├── ShipmentEventInfo.java
        │           │   │           │   └── ShipmentRecord.java
        │           │   │           └── repositories/
        │           │   │               ├── CatalogItemsRepository.java
        │           │   │               ├── DealersRepository.java
        │           │   │               ├── OrderRepository.java
        │           │   │               ├── QuoteRepository.java
        │           │   │               ├── RepositoryFactory.java
        │           │   │               ├── ShipmentRepository.java
        │           │   │               ├── mock/
        │           │   │               │   ├── MockCatalogItemsRepository.java
        │           │   │               │   ├── MockDealersRepository.java
        │           │   │               │   ├── MockOrderRepository.java
        │           │   │               │   ├── MockQuoteRepository.java
        │           │   │               │   └── MockShipmentRepository.java
        │           │   │               └── mongodb/
        │           │   │                   ├── MongoCatalogItemsRepository.java
        │           │   │                   ├── MongoDealersRepository.java
        │           │   │                   ├── MongoOperationsWithRetry.java
        │           │   │                   ├── MongoOrderRepository.java
        │           │   │                   ├── MongoQuoteRepository.java
        │           │   │                   ├── MongoShipmentRepository.java
        │           │   │                   └── models/
        │           │   │                       ├── CatalogItem.java
        │           │   │                       ├── Dealer.java
        │           │   │                       ├── OrderDetails.java
        │           │   │                       ├── QuoteDetails.java
        │           │   │                       └── ShipmentDetails.java
        │           │   └── resources/
        │           │       ├── application.properties
        │           │       ├── ApplicationInsights.xml
        │           │       └── buildinfo.properties
        │           └── test/
        │               ├── java/
        │               │   └── smpl/
        │               │       └── ordering/
        │               │           ├── ConfigurationRule.java
        │               │           ├── TestOrderingConfiguration.java
        │               │           ├── UtilityTest.java
        │               │           ├── controllers/
        │               │           │   ├── CatalogControllerTest.java
        │               │           │   ├── DealerControllerTest.java
        │               │           │   ├── OrderControllerTest.java
        │               │           │   ├── QuoteControllerTest.java
        │               │           │   └── ShipmentControllerTest.java
        │               │           └── repositories/
        │               │               ├── CatalogItemsRepositoryTest.java
        │               │               ├── DealersRepositoryTest.java
        │               │               ├── OrderRepositoryTest.java
        │               │               ├── QuoteRepositoryTest.java
        │               │               ├── ShipmentRepositoryTest.java
        │               │               ├── mock/
        │               │               │   └── test/
        │               │               │       ├── MockCatalogItemsRepositoryTest.java
        │               │               │       ├── MockDealersRepositoryTest.java
        │               │               │       ├── MockOrderRepositoryTest.java
        │               │               │       ├── MockQuoteRepositoryTest.java
        │               │               │       └── MockShipmentRepositoryTest.java
        │               │               └── mongodb/
        │               │                   └── test/
        │               │                       ├── IntegrationTests.java
        │               │                       ├── MongoCatalogItemsRepositoryTest.java
        │               │                       ├── MongoDealersRepositoryTest.java
        │               │                       ├── MongoOrderRepositoryTest.java
        │               │                       ├── MongoQuoteRepositoryTest.java
        │               │                       └── MongoShipmentRepositoryTest.java
        │               └── resources/
        │                   └── application.properties
        └── Clients/
            ├── README.md
            ├── gradlew
            ├── gradlew.bat
            ├── removeBuild.bat
            ├── gradle/
            │   └── wrapper/
            │       └── gradle-wrapper.properties
            └── Web/
                ├── default.html
                ├── index.html
                ├── controls/
                │   └── edittools/
                │       ├── edittools.css
                │       ├── edittools.html
                │       └── edittools.js
                ├── css/
                │   └── default.css
                ├── js/
                │   ├── data.js
                │   ├── date.js
                │   ├── default.js
                │   ├── navigator.js
                │   └── serverconfig.js
                └── pages/
                    ├── catalog/
                    │   ├── catalog.css
                    │   ├── catalog.html
                    │   └── catalog.js
                    ├── dealers/
                    │   ├── dealers.css
                    │   ├── dealers.html
                    │   └── dealers.js
                    ├── deliveries/
                    │   ├── deliveries.css
                    │   ├── deliveries.html
                    │   └── deliveries.js
                    ├── extras/
                    │   ├── extras.css
                    │   ├── extras.html
                    │   └── extras.js
                    ├── main/
                    │   ├── main.css
                    │   ├── main.html
                    │   ├── main.js
                    │   └── main_files/
                    │       └── main.js
                    ├── orderevents/
                    │   ├── orderevents.css
                    │   ├── orderevents.html
                    │   └── orderevents.js
                    ├── orders/
                    │   ├── orders.css
                    │   ├── orders.html
                    │   └── orders.js
                    └── quotes/
                        ├── quotes.css
                        ├── quotes.html
                        └── quotes.js

================================================
FILE: README.md
================================================
﻿# Parts Unlimited MRP #

Parts Unlimited MRP is a fictional outsourced Manufacturing Resource Planning (MRP) application for training purposes based on the description in chapters 31-35 of The Phoenix Projectby Gene Kim, Kevin Behr and George Spafford. © 2013 IT Revolution Press LLC, Portland, OR. Resemblance to “Project Unicorn” in the novel is intentional; resemblance to any real company is purely coincidental.

The application uses entirely open source software including Linux, Java, Apache, and MongoDB which creates a web front end, an order service, and an integration service. 

The master branch of this repo contains the PartsUnlimtedMRP application, and deployment and configuration files of that sample app. This sample app and configuration files are then used in the labs appearing on the github pages site <a href="http://microsoft.github.io/PartsUnlimitedMRP" target="_blank"><span style="color: #0066cc;" color="#0066cc">http://microsoft.github.io/PartsUnlimitedMRP</span></a>. A shortend url is available in the form of <a href="http://aka.ms/pumrplabs" target="_blank"><span style="color: #0066cc;" color="#0066cc">http://aka.ms/pumrplabs</span></a>

Any updates or changes to the application or labfiles can be made be merging changes into this **master** branch, but lab steps and graphics are sourced from the **gh-pages** branch. Updates to lab page configuration, the lab steps or graphics can be done through the <a href="https://github.com/Microsoft/PartsUnlimitedMRP/tree/gh-pages" target="_blank"><span style="color: #0066cc;" color="#0066cc">https://github.com/Microsoft/PartsUnlimitedMRP/tree/gh-pages</span></a> branch of this repo.

To get started, please proceed to the page <a href="http://microsoft.github.io/PartsUnlimitedMRP" target="_blank"><span style="color: #0066cc;" color="#0066cc">http://microsoft.github.io/PartsUnlimitedMRP</span></a>



## PartsUnlimited MRP  - Key Features
- Front end service - runs Apache Tomcat and talks to order service
- Order and Integration service - runs Java and calls MongoDB
- Integration service - present to integrate with Parts Unlimited Website
- Includes a Dockerfile and sample publishing profile to publish to a Docker container
- Includes Azure RM JSON templates and PowerShell automation scripts to easily build and provision your environment

For the labs based around the PartsUnlimited .NET application see the page <a href="http://microsoft.github.io/PartsUnlimited" target="_blank"><span style="color: #0066cc;" color="#0066cc">http://microsoft.github.io/PartsUnlimited</span></a>. It will show you how to use Visual Studio Team Services with a .NET application and attempts to use exclusively Microsoft products, tools and services, or 3rd party and open source products integrating with Microsoft Products and services.

## Microsoft Professional Program (MPP) for DevOps

These labs are used as part of the **Microsoft Professional Program (MPP) with DevOps** series of online courses. The successful completion of the courses and capstone project, that together make up the   **MPP for DevOps**, results in the granting of the **Microsoft MPP for DevOps** credential. For more information on the **Microsoft Professional Program (MPP) for DevOps** program see the pages <a href="https://academy.microsoft.com/en-us/professional-program/tracks/devops/ " target="_blank"><span style="color: #0066cc;" color="#0066cc">https://academy.microsoft.com/en-us/professional-program/tracks/devops/ </span></a> and <a href="https://www.edx.org/microsoft-professional-program-devops " target="_blank"><span style="color: #0066cc;" color="#0066cc">https://www.edx.org/microsoft-professional-program-devops</span></a> 



This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.


================================================
FILE: CONTRIBUTING.md
================================================
﻿# How to contribute

One of the easiest ways to contribute is to participate in discussions and discuss issues. You can also contribute by submitting pull requests with code changes.

## General feedback, discussions, bugs, feature requests?
Please start a discussion or log a new issue on the [Home repo issue tracker](https://github.com/Microsoft/PartsUnlimited/issues).

## Filing issues
When filing issues, please consider using this sample [bug filing template](https://github.com/aspnet/Home/wiki/Functional-bug-template) from the ASP.Net team.
The best way to get your bug fixed is to be as detailed as you can be about the problem.
Providing steps to reproduce the problem is ideal.
Here are questions you can answer before you file a bug to make sure you're not missing any important information.

1. Did you read the [documentation](https://github.com/Microsoft/PartsUnlimited/tree/master/docs)?
2. Did you include the snippet of broken code in the issue?
3. What are the *EXACT* steps to reproduce this problem?
4. What package versions are you using (you can see these in the `project.json` file)?
5. What operating system are you using?
6. What version of Visual Studio are you using?

GitHub supports [markdown](http://github.github.com/github-flavored-markdown/), so when filing bugs make sure you check the formatting before clicking submit.

## Contributing code and content
If you don't know what a pull request is read this article: https://help.github.com/articles/using-pull-requests.
You might also read these two blogs posts on contributing code: [Open Source Contribution Etiquette](http://tirania.org/blog/archive/2010/Dec-31.html) by Miguel de Icaza and [Don't "Push" Your Pull Requests](http://www.igvita.com/2011/12/19/dont-push-your-pull-requests/) by Ilya Grigorik.

**Commit/Pull Request Format**

```
Summary of the changes (Less than 80 chars)
 - Detail 1
 - Detail 2

#bugnumber (in this specific format)
```


This project has adopted the [Microsoft Open Source Code of
Conduct](https://opensource.microsoft.com/codeofconduct/).
For more information see the [Code of Conduct
FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or
contact [opencode@microsoft.com](mailto:opencode@microsoft.com)
with any additional questions or comments.



================================================
FILE: CreateVMBasic.PNG
================================================
[Binary file]


================================================
FILE: LICENSE
================================================
Parts Unlimited MRP
Copyright (c) Microsoft Corporation
All rights reserved. 
MIT License
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



================================================
FILE: SECURITY.md
================================================
<!-- BEGIN MICROSOFT SECURITY.MD V0.0.8 BLOCK -->

## Security

Microsoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).

If you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.

## Reporting Security Issues

**Please do not report security vulnerabilities through public GitHub issues.**

Instead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).

If you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).

You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). 

Please include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:

  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)
  * Full paths of source file(s) related to the manifestation of the issue
  * The location of the affected source code (tag/branch/commit or direct URL)
  * Any special configuration required to reproduce the issue
  * Step-by-step instructions to reproduce the issue
  * Proof-of-concept or exploit code (if possible)
  * Impact of the issue, including how an attacker might exploit the issue

This information will help us triage your report more quickly.

If you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.

## Preferred Languages

We prefer all communications to be in English.

## Policy

Microsoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).

<!-- END MICROSOFT SECURITY.MD BLOCK -->



================================================
FILE: .travis.yml
================================================
language: java
jdk: oraclejdk8
before_script:
  - chmod +x  $TRAVIS_BUILD_DIR/src/Backend/IntegrationService/gradlew
  - chmod +x  $TRAVIS_BUILD_DIR/src/Backend/OrderService/gradlew
  - chmod +x  $TRAVIS_BUILD_DIR/src/Clients/gradlew
script: 
  - cd  $TRAVIS_BUILD_DIR/src/Backend/IntegrationService
  - ./gradlew build
  - cd  $TRAVIS_BUILD_DIR/src/Backend/OrderService
  - ./gradlew build test
  - cd  $TRAVIS_BUILD_DIR/src/Clients
  - ./gradlew build


================================================
FILE: deploy/Build-MRP-App-Manually.md
================================================
#Build MRP App for Linux#
As part of the Continous Integration Hands-on Labs, you will be building the MRP application using Visual Studio Team Services.

In case you want to build the MRP app manually, you may use the following steps:

To be able to run through this walkthrough there is a dependency on Java 8 SDK and JRE8. These can be found at the link below:
http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html

There are steps below for Ubuntu and Debian package manager to install the JDK & JRE.

##Build the MRP Solution 
In order to build the MRP solution we will need to install some more dependencies. 
1.  To build the project, navigate to the OrderService folder with cmd/PowerShell console and initiate the build by calling the gradlew file with the parameter of the build.gradle file.

`PS> .\gradlew build`

Once run you can find the compiled jar file under the “build/libs” folder.

##Create a Linux VM 
Create a Linux VM in Azure and signin onto it.

## Install git client ##

On Ubuntu and the Debian package manager

```
sudo apt-get update
sudo apt-get install git
```

##Clone the repository##

From your home path or wherever you wish to store the bits:
```
git clone https://github.com/Microsoft/PartsUnlimitedMRP.git
```

##Install Dependencies
1.  With your `ssh` console now open we need to add the following dependencies:
 - Java 8 SDK
 - Java 8 JRE
 - MongoDB
2. Enter the following command to install the dependencies above. This is for Ubuntu 14.10+
```
sudo apt-get install openjdk-8-jdk openjdk-8-jre mongodb
```
For Ubuntu 14.04:
```
sudo add-apt-repository ppa:openjdk-r/ppa
sudo apt-get update
sudo apt-get install openjdk-8-jdk openjdk-8-jre mongodb
```
3.  To setup Java type the following commands to set your environment variables.
```
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export PATH=$PATH:/usr/lib/jvm/java-8-openjdk-amd64/bin
```
4.  To check your Java 8 installation, type “java -version”
NOTE: if you are still referencing an older version of Java that was installed as part of your machine you can update this using the following command:

`sudo update-alternatives --config java`
You will be presented with a list of Java installations. Type the number you wish to set as your java default.

##Setup MONGODB
1.  Open the mongo command line tools by typing the following command:
`/usr/bin/mongo`

2.  Select the ordering database to create it.
`> use ordering`

3. Add an object to the catalog collection
```
> x = {"skuNumber" : "ACC-001", "description" : "Shelving", "unit" : "meters", "unitPrice" : 10.5 }
> db.catalog.insert(x)
```
4.  Check the object was created 
`> db.catalog.find()`

you should see something like:
```
{ "_id" : ObjectId("5568a7aefa7a8f99400cbd1e"), "skuNumber" : "ACC-001", "description" : "Shelving", "unit" : "meters", "unitPrice" : 10.5 }

```

5. Now there is data in the database you can check it with the following command 
`> show dbs`
Which should show something similar to:
```
local   0.078125GB
ordering        0.203125GB
```

6.  Copy the commands from Appendix A to insert sample data into the database 


##Build Backend - `OrderService`##

1. Move from your home directory into the `src` directory (this assumes you used defaults during `git clone`) 
```
cd ~/PartsUnlimitedMRP/src/Backend/OrderService
```
2. Now, run the `./gradlew` shell script 
```
chmod +x gradlew
./gradlew build
```

This will pull down [gradle](http://gradle.org/) components then build the solution...

At this point you should see a message from `gradle` indicating success:
```
BUILD SUCCESSFUL
Total time: 3 mins 22.654 secs
```
Build output is located in:
```
cd ~/PartsUnlimitedMRP/src/Backend/OrderService/build/libs/
```
A single `JAR` file `ordering-service-0.1.0.jar`

##Build Backend - `IntegrationService`##
1. Move from your home directory into the `src` directory (this assumes you used defaults during `git clone`) 
```
cd ~/PartsUnlimitedMRP/src/Backend/IntegrationService
```
2. Now, run the `./gradlew` shell script
```
chmod +x gradlew
./gradlew build
```

This will pull down [gradle](http://gradle.org/) components and then build the solution...

At this point you should see a message from `gradle` indicating success:
```
BUILD SUCCESSFUL

Total time: 45.762 secs
```
Build output is located in:
```
cd ~/PartsUnlimitedMRP/src/Backend/IntegrationService/build/libs/
```
A single `JAR` file `integration-service-0.1.0.jar`



## Build Frontend - `Clients`##
The Web Front end is a static site that is built into a single WAR file.
1. Move from your home directory into the `src` directory (this assumes you used defaults during `git clone`) 
```
cd ~/PartsUnlimitedMRP/src/Clients
```
2. Now, run the `./gradlew` shell script
```
chmod +x gradlew
./gradlew build
```
This will pull down [gradle](http://gradle.org/) components and then build the solution...

At this point you should see a message from `gradle` indicating success:
```
BUILD SUCCESSFUL

Total time: 2..456 secs
```
Build output is located in:
```
cd ~/PartsUnlimitedMRP/src/Clients/build/libs/
```
A single `WAR` file `mrp.war`



================================================
FILE: deploy/deploy_mrp_app.sh
================================================
# Create deployment directory
sudo mkdir -p /var/lib/partsunlimited

# Kill java to stop current website
sudo pkill -9 'java'

# Remove old artifacts
sudo rm -f /var/lib/partsunlimited/MongoRecords.js*
sudo rm -f /var/lib/partsunlimited/mrp.war*
sudo rm -f /var/lib/partsunlimited/ordering-service-0.1.0.jar*

# Copy files from deployment package
sudo find ../ -iname '*.?ar' -exec cp -t /var/lib/partsunlimited {} +;
sudo find . -iname 'MongoRecords.js' -exec cp -t /var/lib/partsunlimited {} +;

# Add the records to ordering database on MongoDB
sudo mongo ordering /var/lib/partsunlimited/MongoRecords.js

# Change Tomcat listening port from 8080 to 9080
sudo sed -i s/8080/9080/g /etc/tomcat7/server.xml

# Remove existing MRP directory and copy WAR file to Tomcat directory for auto-deployment
sudo rm -rf /var/lib/tomcat7/webapps/mrp
sudo cp /var/lib/partsunlimited/mrp.war /var/lib/tomcat7/webapps

# Restart Tomcat
sudo /etc/init.d/tomcat7 restart

# Run Ordering Service app
sudo java -jar /var/lib/partsunlimited/ordering-service-0.1.0.jar &>/dev/null &

echo "MRP application successfully deployed. Go to http://<YourDNSname>:9080/mrp"


================================================
FILE: deploy/Install-Build-Dependencies.sh
================================================
# Update current packages
sudo apt-get update

# Install Gradle, Java, and MongoDB
sudo apt-get install gradle
sudo apt-get install openjdk-8-jdk openjdk-8-jre mongodb

# Install Node and npm
curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
sudo apt-get install -y nodejs
sudo apt-get install npm -y

# Set environment variables for Java
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export PATH=$PATH:/usr/lib/jvm/java-8-openjdk-amd64/bin


================================================
FILE: deploy/install_mrp_dependencies.sh
================================================
# Create deployment directory
sudo mkdir /var/lib/partsunlimited

# Kill java to stop current website
sudo pkill -9 'java'

# Remove old artifacts
sudo rm -f /var/lib/partsunlimited/MongoRecords.js*
sudo rm -f /var/lib/partsunlimited/mrp.war*
sudo rm -f /var/lib/partsunlimited/ordering-service-0.1.0.jar*

# Copy files from deployment package
sudo find ../ -iname '*.?ar' -exec cp -t /var/lib/partsunlimited {} +;
sudo find . -iname 'MongoRecords.js' -exec cp -t /var/lib/partsunlimited {} +;

# Add the records to ordering database on MongoDB
sudo mongo ordering /var/lib/partsunlimited/MongoRecords.js

# Change Tomcat listening port from 8080 to 9080
sudo sed -i s/8080/9080/g /etc/tomcat7/server.xml

# Remove existing MRP directory and copy WAR file to Tomcat directory for auto-deployment
sudo rm -rf /var/lib/tomcat7/webapps/mrp
sudo cp /var/lib/partsunlimited/mrp.war /var/lib/tomcat7/webapps

# Restart Tomcat
sudo /etc/init.d/tomcat7 restart

# Run Ordering Service app
sudo java -jar /var/lib/partsunlimited/ordering-service-0.1.0.jar &>/dev/null &

echo "MRP application successfully deployed. Go to http://<YourDNSname>:9080/mrp"


================================================
FILE: deploy/MongoRecords.js
================================================
var conn;
while (conn === undefined)
{
    try
    {
        conn = new Mongo("localhost:27017");
    }
    catch (e)
    {
        print(e);
    }

    sleep(100);
}

db = conn.getDB("ordering");
db.catalog.insert(
[
  {"skuNumber" : "LIG-0001", "description" : "Helogen Headlights (2 Pack)", "price" : 38.99, "inventory" : 10, "leadTime" : 3},
  {"skuNumber" : "LIG-0002", "description" : "Bugeye Headlights (2 Pack)", "price" : 48.99, "inventory" : 7, "leadTime" : 3},
  {"skuNumber" : "LIG-0003", "description" : "Turn Signal Light Bulb", "price" : 6.49, "inventory" : 18, "leadTime" : 3},
  {"skuNumber" : "WHE-0001", "description" : "Matte Finish Rim", "price" : 75.99, "inventory" : 4, "leadTime" : 5},
  {"skuNumber" : "WHE-0002", "description" : "Blue Performance Alloy Rim", "price" : 88.99, "inventory" : 8, "leadTime" : 5},
  {"skuNumber" : "WHE-0003", "description" : "High Performance Rim", "price" : 99.99, "inventory" : 3, "leadTime" : 5},
  {"skuNumber" : "WHE-0004", "description" : "Wheel Tire Combo", "price" : 72.49, "inventory" : 0, "leadTime" : 4},
  {"skuNumber" : "WHE-0005", "description" : "Chrome Rim Tire Combo", "price" : 129.99, "inventory" : 1, "leadTime" : 4},
  {"skuNumber" : "WHE-0006", "description" : "Wheel Tire Combo (4 Pack)", "price" : 219.99, "inventory" : 3, "leadTime" : 6},
  {"skuNumber" : "BRA-0001", "description" : "Disk and Pad Combo", "price" : 25.99, "inventory" : 0, "leadTime" : 6},
  {"skuNumber" : "BRA-0002", "description" : "Brake Rotor", "price" : 18.99, "inventory" : 4, "leadTime" : 4},
  {"skuNumber" : "BRA-0003", "description" : "Brake Disk and Calipers", "price" : 43.99, "inventory" : 2, "leadTime" : 8},
  {"skuNumber" : "BAT-0001", "description" : "12-Volt Calcium Battery", "price" : 129.99, "inventory" : 9, "leadTime" : 8},
  {"skuNumber" : "BAT-0002", "description" : "Spiral Coil Battery", "price" : 154.99, "inventory" : 3, "leadTime" : 10},
  {"skuNumber" : "BAT-0003", "description" : "Jumper Leads", "price" : 16.99, "inventory" : 6, "leadTime" : 3},
  {"skuNumber" : "OIL-0001", "description" : "Filter Set", "price" : 28.99, "inventory" : 3, "leadTime" : 4},
  {"skuNumber" : "OIL-0002", "description" : "Oil and Filter Combo", "price" : 34.49, "inventory" : 5, "leadTime" : 4},
  {"skuNumber" : "OIL-0003", "description" : "Synthetic Engine Oil", "price" : 39.99, "inventory" : 11, "leadTime" : 4}
])

db.dealers.insert({ "name" : "Terry Adams", "address" : "17760 Northeast 67th Court, Redmond, WA 98052", "email" : "terry@adams.com", "phone" : "425-885-6217" })

db.quotes.insert([{
"quoteId" : "0",
"validUntil" : "2015-05-01T00:00:00+0000",
"customerName" : "Walter Harp",
"dealerName" : "Terry Adams",
"city" : "Seattle",
"totalCost" : "51.97",
"discount" : "0.0",
"state" : "WA",
"postalCode" : "98023",
"quoteItems" : [
    {"skuNumber":"LIG-0001", "amount":1 },
    {"skuNumber":"LIG-0003", "amount":2 }]
},
{
"quoteId" : "1",
"validUntil" : "2015-01-01T00:00:00+0000",
"customerName" : "Jerry Morrison",
"dealerName" : "Terry Adams",
"city" : "Seattle",
"totalCost" : "25.99",
"state" : "WA",
"postalCode" : "98089",
"quoteItems" : [
  { "skuNumber" : "BRA-0001", "amount" : 1}
]
},
{
"quoteId" : "2",
"validUntil" : "2015-02-01T00:00:00+0000",
"customerName" : "Harrison Hall",
"dealerName" : "Terry Adams",
"city" : "Seattle",
"totalCost" : "600.90",
"discount" : "0.0",
"state" : "WA",
"postalCode" : "98027",
"quoteItems" : [
  { "skuNumber" : "WHE-0002", "amount" : 4},
  { "skuNumber" : "BRA-0003", "amount" : 4},
  { "skuNumber" : "OIL-0001", "amount" : 1},
  { "skuNumber" : "OIL-0001", "amount" : 1}
]
}
])

db.orders.insert([{
"orderId" : "0",
"quoteId" : "0",
"orderDate" : "2015-03-02T20:43:37+0000",
"status" : "Created",
"events" : []
},
{"orderId" : "1",
"quoteId" : "2",
"orderDate" : "2015-03-02T20:43:37+0000",
"status" : "DeliveryConfirmed",
"events" : []
}])

db.shipments.insert([{
"orderId" : "0",
"contactName" : "Walter Harp",
"primaryContactPhone" : {
  "phoneNumber" : "435-783-2378",
  "kind" : "Mobile"
},
"deliveryAddress" : {
  "street" : "34 Sheridan Street",
  "city" : "Seattle",
  "state" : "WA",
  "postalCode" : "98023",
  "specialInstructions" : ""
},
"events" : []
},
{
"orderId" : "2",
"contactName" : "Harrison Hall",
"primaryContactPhone" : {
  "phoneNumber" : "435-712-7234",
  "kind" : "Mobile"
},
"deliveryAddress" : {
  "street" : "84 Queen Street",
  "city" : "Seattle",
  "state" : "WA",
  "postalCode" : "98027",
  "specialInstructions" : "Leave around by the back door."
},
"events" : []
}])



================================================
FILE: deploy/SSH-MRP-Artifacts.ps1
================================================
[CmdletBinding()]
Param(
    [Parameter(Mandatory=$True)] [string] $sshTarget,
	[Parameter(Mandatory=$True)] [string] $sshUser,
    [Parameter(Mandatory=$True)] [string] $sshPassword
)

$ErrorActionPreference = "Stop"


# Get plink and psftp
$psftpExeUrl="https://the.earth.li/~sgtatham/putty/latest/x86/psftp.exe"
$plinkExeUrl="https://the.earth.li/~sgtatham/putty/latest/x86/plink.exe"

if (-not (Test-Path psftp.exe)) {
    wget $psftpExeUrl -OutFile psftp.exe
}
if (-not (Test-Path plink.exe)) {
    wget $plinkExeUrl -OutFile plink.exe
}

# Set deploy directory on target server
$deployDirectory = "/tmp/mrpdeploy_" + [System.Guid]::NewGuid().toString()
$buildName =  "_" + $($env:BUILD_DEFINITIONNAME)
# Save sftp command text to file
$sftpFile = "sftp.txt"
$sftpContent = @'
mkdir ROOT_DEPLOY_DIRECTORY
cd ROOT_DEPLOY_DIRECTORY
mkdir deploy
cd deploy
put ./ARTIFACT_DIRECTORY/deploy/MongoRecords.js
put ./ARTIFACT_DIRECTORY/deploy/deploy_mrp_app.sh
chmod 755 deploy_mrp_app.sh
cd ..
mkdir drop
cd drop
put -r ./ARTIFACT_DIRECTORY/drop/Backend/IntegrationService/build/libs/
put -r ./ARTIFACT_DIRECTORY/drop/Backend/OrderService/build/libs/
put -r ./ARTIFACT_DIRECTORY/drop/Clients/build/libs/
chmod 755 ./*
'@
$sftpContent = $sftpContent.Replace('ROOT_DEPLOY_DIRECTORY',$deployDirectory)
$sftpContent = $sftpContent.Replace('ARTIFACT_DIRECTORY',$buildName)
Set-Content -Path $sftpFile -Value $sftpContent


# Save plink command text to file
$plinkFile = "plink.txt"
$plinkContent = @'
cd ROOT_DEPLOY_DIRECTORY/deploy
dos2unix deploy_mrp_app.sh
sudo bash ./deploy_mrp_app.sh
'@
$plinkContent = $plinkContent.Replace('ROOT_DEPLOY_DIRECTORY',$deployDirectory)
Set-Content -Path $plinkFile -Value $plinkContent

# Copy files and execute MRP deployment shell script
echo n | & .\psftp.exe $sshUser@$sshTarget -pw $sshPassword -b $sftpFile 
echo n | & .\plink.exe $sshUser@$sshTarget -pw $sshPassword -m $plinkFile



================================================
FILE: deploy/SSH-MRP-BDD-Security.ps1
================================================
[CmdletBinding()]
Param(
    [Parameter(Mandatory=$True)] [string] $sshTarget,
	[Parameter(Mandatory=$True)] [string] $sshUser,
    [Parameter(Mandatory=$True)] [string] $sshPassword,
    [Parameter(Mandatory=$True)] [string] $sshKey
)

$ErrorActionPreference = "Stop"

# Get plink and pscp
$pscpExeUrl="https://the.earth.li/~sgtatham/putty/latest/x86/pscp.exe"
$plinkExeUrl="https://the.earth.li/~sgtatham/putty/latest/x86/plink.exe"

if (-not (Test-Path pscp.exe)) {
    wget $pscpExeUrl -OutFile pscp.exe
}
if (-not (Test-Path plink.exe)) {
    wget $plinkExeUrl -OutFile plink.exe
}

# Run tests
$plinkFile = "plink.txt"
$plinkContent = @'
cd bdd-security/
rm -rf build/reports/
rm -rf build/test-results/
./gradlew -Dcucumber.options="--tags @app_scan --tags ~@skip"
'@
Set-Content -Path $plinkFile -Value $plinkContent
& ./plink.exe $sshUser@$sshTarget -batch -hostkey $sshKey -pw $sshPassword -m $plinkFile

# Copy test results back to agent.
$currentExecutionLocation = (Get-Location).Path
& ./pscp.exe -batch -hostkey $sshKey -pw $sshPassword $sshUser@${sshTarget}:bdd-security/build/reports/junit/all_tests.xml `"$currentExecutionLocation`"



================================================
FILE: deploy/azurestack/readme.md
================================================
# What is Azure Stack?

Microsoft Azure Stack is a new hybrid cloud platform product that enables you to deliver Azure services from your own datacenter.

Azure Stack gives you the power of cloud services, yet enables IT to maintain control of your datacenter for true hybrid cloud agility. You decide where to keep your data and applications—in your own datacenter or with a hosting service provider. Easily access public cloud resources to scale at busy times, for dev-test, or whenever you need them.

## Deliver Azure services to your datacenter

Azure Stack enabled you to transform on-premises datacenter resources into cloud services for maximum agility. Run Azure IaaS services—including Virtual Machines, Blob/Table storage, and Docker-integrated Linux containers—for applications like SQL Server or SharePoint. Empower developers to write cloud-first applications using on-premises deployments of Azure PaaS services such as App Service. Make your application counterparts productive by enabling the same self-service experience as Azure.

You can learn more about Azure Stack on the dedicated [Azure Stack website](https://azure.microsoft.com/en-us/overview/azure-stack/) and see some cool videos on the [Azure Stack Channel on Channel 9](https://channel9.msdn.com/Blogs/azurestack)

It's also a great platform to learn about DevOps, and what better way to learn about DevOps, than through utilizing the Parts Unlimited MRP solution.

# Parts Unlimited MRP

Parts Unlimited MRP is a fictional outsourced Manufacturing Resource Planning (MRP) application for training purposes based on the description in chapters 31-35 of The Phoenix Projectby Gene Kim, Kevin Behr and George Spafford. © 2013 IT Revolution Press LLC, Portland, OR. Resemblance to “Project Unicorn” in the novel is intentional; resemblance to any real company is purely coincidental.

The application uses entirely open source software including Linux, Java, Apache, and MongoDB which creates a web front end, an order service, and an integration service. Click here for the related [Parts Unlimited Website application](http://github.com/microsoft/partsunlimited).

To read and learn more about this project, please visit the [documentation website](https://aka.ms/pumrplabs).

## Key Features
- Front end service - runs Apache Tomcat and talks to order service
- Order and Integration service - runs Java and calls MongoDB
- Integration service - present to integrate with Parts Unlimited Website
- Includes a Dockerfile and sample publishing profile to publish to a Docker container
- Includes Azure RM JSON templates and PowerShell automation scripts to easily build and provision your environment

This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.

# Getting Started with DevOps on Azure Stack

Just like for the Parts Unlimited MRP on Azure documentation, this detailed series of documents will walk you through various deployments and configurations, along with usage of a number of core DevOps tools such as Chef, Puppet, Jenkins and more, all on Azure Stack.

Interested? Head on over to the [getting started page](/deploy/azurestack/docs/readme.md) to start kicking the tires.



================================================
FILE: deploy/azurestack/customscripts/readme.md
================================================




================================================
FILE: deploy/azurestack/customscripts/install_updates.sh
================================================
#!/bin/bash
apt-get update
apt-get upgrade -y



================================================
FILE: deploy/azurestack/customscripts/chef/readme.md
================================================




================================================
FILE: deploy/azurestack/customscripts/chef/install_chef.sh
================================================
#!/bin/bash

# Validate input parameters
if [[ !("$#" -eq 3) ]]; 
    then echo "Parameters missing for Chef Server 12 configuration." >&2
    exit 1
fi

# Get parameters
chef_fqdn=$1
chef_user=$2
chef_password=$3

sudo hostname ${chef_fqdn}

# Download & Install Chef Server 12
cd ~
wget https://packages.chef.io/files/stable/chef-server/12.15.7/ubuntu/16.04/chef-server-core_12.15.7-1_amd64.deb
sudo dpkg -i chef-server-core_*.deb

# Start Configuration
sudo chef-server-ctl reconfigure

# Configure user and organization
sleep 5

# Create user
sudo chef-server-ctl user-create ${chef_user} ${chef_user} LabUser ${chef_user}@partsunlimited.local ${chef_password} --filename /home/${chef_user}/${chef_user}.pem

# Create organization
sudo chef-server-ctl org-create partsunlimited 'Parts Unlimited, Inc.' --association_user ${chef_user} --filename /home/${chef_user}/partsunlimited-validator.pem

# Add the management GUI
sudo chef-server-ctl install chef-manage
sudo chef-server-ctl reconfigure
sudo chef-manage-ctl reconfigure --accept-license

#Add reporting
sudo chef-server-ctl install opscode-reporting
sudo chef-server-ctl reconfigure
sudo opscode-reporting-ctl reconfigure --accept-license



================================================
FILE: deploy/azurestack/customscripts/jenkins/install_jenkins_1604.sh
================================================
#!/bin/bash

# Install Jenkins Dependencies
add-apt-repository ppa:openjdk-r/ppa
apt-get update
apt-get upgrade -y
apt-get install openjdk-7-jdk -y
apt-get install openjdk-7-jre -y
apt-get install wget -y

# Set Java environment variables
export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
export PATH=$PATH:/usr/lib/jvm/java-7-openjdk-amd64/bin

# Install Jenkins
wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -
sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
apt-get update
apt-get install jenkins -y



================================================
FILE: deploy/azurestack/customscripts/linux_extension/manifest.json
================================================
{
    "publisher":  "Microsoft.OSTCExtensions",
    "Type":  "LinuxDiagnostic",
    "Version":  "2.3.9009",
    "GuestArtifact":  {
                          "ExtensionHandlerFilePath":  "Microsoft.OSTCExtensions.LinuxDiagnostic_2.3.9009.zip",
                          "OsType":  "Linux",
                          "ComputeRole":  "N/A",
                          "VMScaleSetEnabled":  false,
                          "SupportsMultipleExtensions":  false
                      }
}



================================================
FILE: deploy/azurestack/customscripts/puppet/install_puppet_1604.sh
================================================
#!/bin/bash

# Update OS
apt-get update
# apt-get upgrade -y

# Validate input parameters
if [[ !("$#" -eq 2) ]]; 
    then echo "Parameters missing for puppet enterprise configuration." >&2
    exit 1
fi

# Get parameters
pe_version=$1
console_pw=$2

# Configure for Puppet Enterprise version
case $pe_version in
    2017.2.1)
        pe_url=https://pm.puppetlabs.com/puppet-enterprise/2017.2.1/puppet-enterprise-2017.2.1-ubuntu-16.04-amd64.tar.gz
        ;;
    *)
        pe_url=https://pm.puppetlabs.com/puppet-enterprise/2017.2.1/puppet-enterprise-2017.2.1-ubuntu-16.04-amd64.tar.gz
        ;;
esac

# Set up variables
pe_tar=${pe_url##*/}
pe_folder=${pe_tar%%.tar.gz}

# Get installation package
cd /tmp; wget -q ${pe_url}

# Unpack installation package
tar -xf ${pe_tar}
cd ${pe_folder}

# Create configuration file
sed '/console_admin_password/c \
   "console_admin_password":"'$console_pw'"' conf.d/pe.conf > conf.d/azure-pe.conf

# Start the installation
./puppet-enterprise-installer -c conf.d/azure-pe.conf
sudo ./puppet-enterprise-installer -c conf.d/azure-pe.conf

exit 0



================================================
FILE: deploy/azurestack/instances/chef_node/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/chef_node/AddChefNode.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminUsername": {
            "defaultValue": "localadmin",
            "minLength": 1,
            "type": "string",
            "metadata": {
                "description": "User name for the additional node."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Administrator password for the additional node."
            }
        },
        "dnsNameForPublicIP": {
            "minLength": 1,
            "type": "string",
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the MRP Virtual Machine."
            }
        }
    },
    "variables": {
        "imagePublisher": "Canonical",
        "imageOffer": "UbuntuServer",
        "imageSku": "16.04.3-LTS",
        "osDiskName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'osdisk'))]",
        "nicName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'Nic'))]",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'sa'))]",
        "storageType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "vhdStorageContainerName": "vhds",
        "nsgName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'NSG'))]",
        "vmSize": "Standard_A2",
        "vmName": "[toLower(parameters('dnsNameForPublicIP'))]",
        "existingVirtualNetworkName": "chefVNET",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('existingVirtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "[variables('storageType')]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('nsgName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "SSH port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "MRP",
                        "properties": {
                            "description": "MRP port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "9080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "OrderingSvc",
                        "properties": {
                            "description": "OrderingService port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1200,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[tolower(concat(parameters('dnsNameForPublicIP'), 'publicIP'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('dnsNameForPublicIP')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('existingVirtualNetworkName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nicName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', tolower(concat(parameters('dnsNameForPublicIP'), 'publicIP')))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', tolower(concat(parameters('dnsNameForPublicIP'), 'publicIP')))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('existingVirtualNetworkName'))]",
                "[variables('nsgName')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vmName')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[variables('imageSKU')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[variables('osDiskName')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('osDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxCustomScriptExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.5",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "commandToExecute": "ifconfig"
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('adminUsername')]",
                    "password": "[parameters('adminPassword')]"
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'),'/extensions/LinuxCustomScriptExtension')]"
            ]
        }
    ],
    "outputs": {}
}


================================================
FILE: deploy/azurestack/instances/chef_standalone/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/chef_standalone/Chef.ChefServer/Manifest.json
================================================
{   "$schema": "https://gallery.azure.com/schemas/2014-09-01/manifest.json#",
    "name": "ChefServer",
    "publisher": "Chef",
    "version": "1.0.0",
    "displayName": "ms-resource:displayName",
    "publisherDisplayName": "ms-resource:publisherDisplayName",
    "publisherLegalName": "ms-resource:publisherDisplayName",
    "summary": "ms-resource:summary",
    "longSummary": "ms-resource:longSummary",
    "description": "ms-resource:description",
    "longDescription": "ms-resource:description",
    "links": [
        { "displayName": "ms-resource:documentationLink", "uri": "https://www.chef.io/" },
        { "displayName": "ms-resource:documentationLink2", "uri": "https://docs.chef.io/" }
    ],
    "artifacts": [
        {
            "name": "ChefDeploy",
            "type": "Template",
            "path": "DeploymentTemplates\\ChefDeploy.json",
            "isDefault": true
        }
    ],
    "icons": {
        "small": "Icons\\Small.png",
        "medium": "Icons\\Medium.png",
        "large": "Icons\\Large.png",
        "wide": "Icons\\Wide.png",
        "hero": "Icons\\Hero.png"
    },
    "categories": [
      "Compute"
    ],
    "uiDefinition": {
        "path": "UIDefinition.json"
    }
}


================================================
FILE: deploy/azurestack/instances/chef_standalone/Chef.ChefServer/UIDefinition.json
================================================
{
    "$schema": "https://gallery.azure.com/schemas/2015-02-12/UIDefinition.json#",
    "createDefinition": {
        "createBlade": {
            "name": "DeployFromTemplateBlade",
            "extension": "HubsExtension"
        }
    }
}



================================================
FILE: deploy/azurestack/instances/chef_standalone/Chef.ChefServer/DeploymentTemplates/ChefDeploy.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "chefAdminUsername": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "User name for the Chef Server."
            },
            "defaultValue": "chefadmin"
        },
        "chefAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the Chef Server."
            }
        },
        "chefDnsNameForPublicIP": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the Chef Server."
            }
        }
    },
    "variables": {
        "chefImagePublisher": "Canonical",
        "chefImageOffer": "UbuntuServer",
        "chefImageSku": "16.04.3-LTS",
        "chefOSDiskName": "chefOsdisk",
        "chefNicName": "chefNic",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageName": "[concat('vhdstorage', uniqueString(resourceGroup().id))]",
        "storageType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "vhdStorageContainerName": "vhds",
        "chefNsgName": "chefNSG",
        "chefVmSize": "Standard_A3",
        "chefVmName": "[toLower(parameters('chefDnsNameForPublicIP'))]",
        "virtualNetworkName": "chefVNET",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "StorageAccount"
            },
            "properties": {
                "accountType": "[variables('storageType')]"
            }
        },
         {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('chefNsgName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NSG-chef"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "SSH port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "HTTP",
                        "properties": {
                            "description": "HTTP port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "HTTPS",
                        "properties": {
                            "description": "HTTPS port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1200,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "https8443",
                        "properties": {
                            "description": "https8443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1300,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('chefDnsNameForPublicIP')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "PublicIPAddress-Chef"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('chefDnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VirtualNetwork"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
       
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('chefNicName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NIC-Chef"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('chefDnsNameForPublicIP'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('chefNSGName'))]"
            ],
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('chefNSGName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('chefDnsNameForPublicIP'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('chefVmName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VM-Chef"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('chefNicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('chefVmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('chefVmName')]",
                    "adminUsername": "[parameters('chefAdminUsername')]",
                    "adminPassword": "[parameters('chefAdminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('chefImagePublisher')]",
                        "offer": "[variables('chefImageOffer')]",
                        "sku": "[variables('chefImageSku')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('chefOSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('chefNicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('chefVmName'),'/CustomScriptForLinux')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('chefVmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": "true",

                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/azurestack/customscripts/chef/install_chef.sh"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('bash install_chef.sh ', concat(parameters('chefDnsNameForPublicIP'),'.',resourceGroup().location,'.cloudapp.azurestack.external'), ' ', parameters('chefAdminUsername'), ' ', parameters('chefAdminPassword'))]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('chefVmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('chefVmName'),'/extensions/CustomScriptForLinux')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('chefAdminUsername')]",
                    "password": "[parameters('chefAdminPassword')]"
                }
            }
        }
    ]
}



================================================
FILE: deploy/azurestack/instances/chef_standalone/Chef.ChefServer/strings/resources.resjson
================================================
{
  "displayName": "Chef Server",
  "publisherDisplayName": "Chef",
  "summary": "Chef Server 12 on Ubuntu 16.04-LTS VM, pre-configured and ready to run on Azure Stack",
  "longSummary": "Chef Server 12 on Ubuntu 16.04-LTS VM, pre-configured and ready to run on Azure Stack",
  "description": "<p>Whether you have five or five thousand servers, Chef lets you manage them all by turning infrastructure into code. Infrastructure described as code is flexible, versionable, human-readable, and testable.</p><p>Whether your infrastructure is in the cloud, on-premises or in a hybrid environment, you can easily and quickly adapt to your business’s changing needs with Chef</p><p>The Chef Server acts as a central repository for cookbooks as well as for information about every node it manages. Chef cookbooks contain code that describes the desired state of your infrastructure</p><p>For more information, review the links below.</p><p><b>Please Note</b> - This image is not officially provided by, or supported by Chef and is provided solely for use with the Parts Unlimited MRP Hands-on-Labs. All logos and images are property of Chef</p>",
  "documentationLink": "Chef",
  "documentationLink2": "Chef Documentation"
}


================================================
FILE: deploy/azurestack/instances/chef_workstation/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/chef_workstation/AddChefWorkstation.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminUsername": {
            "defaultValue": "localadmin",
            "type": "string",
            "minLength": 1,
            "metadata": {
            "description": "User name for the Chef Workstation Virtual Machine."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "minLength": 8,
            "metadata": {
            "description": "Password for the Chef Workstation Virtual Machine."
            }
        },
        "dnsNameForPublicIP": {
            "type": "string",
            "minLength": 1,
            "maxLength": 15,
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the Chef Workstation Virtual Machine."
            }
        }
    },
    "variables": {
        "imagePublisher": "MicrosoftWindowsServer",
        "imageOffer": "WindowsServer",
        "imageSku": "2012-R2-Datacenter",
        "osDiskName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'osdisk'))]",
        "nicName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'Nic'))]",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'sa'))]",
        "storageType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "vhdStorageContainerName": "vhds",
        "nsgName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'NSG'))]",
        "vmSize": "Standard_A2",
        "vmName": "[toLower(parameters('dnsNameForPublicIP'))]",
        "existingVirtualNetworkName": "chefVNET",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('existingVirtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "[variables('storageType')]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('nsgName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "RDP",
                        "properties": {
                            "description": "RDP port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "3389",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[tolower(concat(parameters('dnsNameForPublicIP'), 'publicIP'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('dnsNameForPublicIP')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('existingVirtualNetworkName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nicName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', tolower(concat(parameters('dnsNameForPublicIP'), 'publicIP')))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', tolower(concat(parameters('dnsNameForPublicIP'), 'publicIP')))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('existingVirtualNetworkName'))]",
                "[variables('nsgName')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vmName')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[variables('imageSKU')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[variables('osDiskName')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('osDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/chefworkstationconfig')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/docs/HOL_Deploying-Using-Chef/env/Configure-Chef-Workstation.ps1"
                    ],
                    "commandToExecute": "powershell -File Configure-Chef-Workstation.ps1"
                },
                "protectedSettings": {}
            }
        }
    ],
    "outputs": {}
}


================================================
FILE: deploy/azurestack/instances/jenkins_mrp/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/jenkins_mrp/PartsUnlimitedMRP.MRPwithJenkins/Manifest.json
================================================
{   "$schema": "https://gallery.azure.com/schemas/2014-09-01/manifest.json#",
    "name": "MRPwithJenkins",
    "publisher": "PartsUnlimitedMRP",
    "version": "1.0.0",
    "displayName": "ms-resource:displayName",
    "publisherDisplayName": "ms-resource:publisherDisplayName",
    "publisherLegalName": "ms-resource:publisherDisplayName",
    "summary": "ms-resource:summary",
    "longSummary": "ms-resource:longSummary",
    "description": "ms-resource:description",
    "longDescription": "ms-resource:description",
    "links": [
        { "displayName": "ms-resource:documentationLink", "uri": "https://jenkins.io/index.html" },
        { "displayName": "ms-resource:documentationLink2", "uri": "https://jenkins.io/doc/" },
        { "displayName": "ms-resource:documentationLink3", "uri": "https://microsoft.github.io/PartsUnlimitedMRP/" },
        { "displayName": "ms-resource:documentationLink4", "uri": "https://channel9.msdn.com/Series/Parts-Unlimited-MRP-Labs" }
    ],
    "artifacts": [
        {
            "name": "MRPwithJenkinsDeploy",
            "type": "Template",
            "path": "DeploymentTemplates\\MRPwithJenkinsDeploy.json",
            "isDefault": true
        }
    ],
    "icons": {
        "small": "Icons\\Small.png",
        "medium": "Icons\\Medium.png",
        "large": "Icons\\Large.png",
        "wide": "Icons\\Wide.png",
        "hero": "Icons\\Hero.png"
    },
    "categories": [
      "Compute"
    ],
    "uiDefinition": {
        "path": "UIDefinition.json"
    }
}


================================================
FILE: deploy/azurestack/instances/jenkins_mrp/PartsUnlimitedMRP.MRPwithJenkins/UIDefinition.json
================================================
{
    "$schema": "https://gallery.azure.com/schemas/2015-02-12/UIDefinition.json#",
    "createDefinition": {
        "createBlade": {
            "name": "DeployFromTemplateBlade",
            "extension": "HubsExtension"
        }
    }
}



================================================
FILE: deploy/azurestack/instances/jenkins_mrp/PartsUnlimitedMRP.MRPwithJenkins/DeploymentTemplates/MRPwithJenkinsDeploy.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "jenkinsAdminUsername": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "User name for the Jenkins Master Virtual Machine."
            },
            "defaultValue": "jenkinsadmin"
        },
        "jenkinsAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the Jenkins Master Virtual Machine."
            }
        },
        "jenkinsDnsNameForPublicIP": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the Jenkins Master Virtual Machine."
            }
        },
        "mrpAdminUsername": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "User name for the MRP Virtual Machine."
            },
            "defaultValue": "mrpadmin"
        },
        "mrpAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the MRP Virtual Machine."
            }
        },
        "mrpDnsNameForPublicIP": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the MRP Virtual Machine."
            }
        }
    },
    "variables": {
        "jenkinsImagePublisher": "Canonical",
        "jenkinsImageOffer": "UbuntuServer",
        "jenkinsImageSku": "1404-LTS",
        "mrpImagePublisher": "Canonical",
        "mrpImageOffer": "UbuntuServer",
        "mrpImageSku": "1404-LTS",
        "mrpOSDiskName": "mrpOsdisk",
        "jenkinsOSDiskName": "jenkinsMasterOsdisk",
        "jenkinsNicName": "jenkinsNic",
        "mrpNicName": "mrpNic",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "vhdStorageContainerName": "vhds",
        "jenkinsNsgName": "jenkinsNSG",
        "mrpNsgName": "mrpNSG",
        "jenkinsVmSize": "Standard_A3",
        "mrpVmSize": "Standard_A2",
        "jenkinsVmName": "[toLower(parameters('jenkinsDnsNameForPublicIP'))]",
        "mrpVmName": "[toLower(parameters('mrpDnsNameForPublicIP'))]",
        "virtualNetworkName": "jenkinsMRPvNET",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]",
        "storageName": "[concat('vhdstorage', uniqueString(resourceGroup().id))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "StorageAccount"
            },
            "properties": {
                "accountType": "[variables('storageType')]"
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('jenkinsDnsNameForPublicIP')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "PublicIPAddress-jenkins"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('jenkinsDnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('mrpDnsNameForPublicIP')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "PublicIPAddress-mrp"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('mrpDnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VirtualNetwork"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('jenkinsNsgName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NSG-jenkins"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "SSH port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "Jenkins",
                        "properties": {
                            "description": "Jenkins port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('mrpNsgName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NSG-mrp"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "SSH port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "MRP",
                        "properties": {
                            "description": "MRP port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "9080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "OrderingSvc",
                        "properties": {
                            "description": "OrderingService port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1200,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('jenkinsNicName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NIC-Jenkins"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('jenkinsDnsNameForPublicIP'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('jenkinsNSGName'))]"
            ],
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('jenkinsNSGName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('jenkinsDnsNameForPublicIP'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('mrpNicName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NIC-MRP"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('mrpDnsNameForPublicIP'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('mrpNSGName'))]"
            ],
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mrpNSGName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('mrpDnsNameForPublicIP'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('jenkinsVmName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VM-Jenkins"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('jenkinsNicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('jenkinsVmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('jenkinsVmName')]",
                    "adminUsername": "[parameters('jenkinsAdminUsername')]",
                    "adminPassword": "[parameters('jenkinsAdminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('jenkinsImagePublisher')]",
                        "offer": "[variables('jenkinsImageOffer')]",
                        "sku": "[variables('jenkinsImageSku')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('jenkinsOSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('jenkinsNicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('mrpVmName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VM-MRP"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('mrpNicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('mrpVmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('mrpVmName')]",
                    "adminUsername": "[parameters('mrpAdminUsername')]",
                    "adminPassword": "[parameters('mrpAdminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('mrpImagePublisher')]",
                        "offer": "[variables('mrpImageOffer')]",
                        "sku": "[variables('mrpImageSku')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('mrpOSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('mrpNicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('mrpVmName'),'/mrpsetup')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('mrpVmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/azurestack/customscripts/install_updates.sh"
                    ],
                    "commandToExecute": "bash install_updates.sh"
                },
                "protectedSettings": {}
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('mrpVmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('mrpVmName'),'/extensions/mrpsetup')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('mrpAdminUsername')]",
                    "password": "[parameters('mrpAdminPassword')]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('jenkinsVmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('jenkinsVmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('jenkinsAdminUsername')]",
                    "password": "[parameters('jenkinsAdminPassword')]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('jenkinsVmName'),'/jenkinsinstall')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('jenkinsVmName'),'/extensions/LinuxVMAccessExtension')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/azurestack/customscripts/jenkins/install_jenkins_1404.sh"
                    ],
                    "commandToExecute": "bash install_jenkins_1404.sh"
                },
                "protectedSettings": {}
            }
        }
    ],
    "outputs": {}
}


================================================
FILE: deploy/azurestack/instances/jenkins_mrp/PartsUnlimitedMRP.MRPwithJenkins/strings/resources.resjson
================================================
{
  "displayName": "Parts Unlimited MRP with Jenkins",
  "publisherDisplayName": "Parts Unlimited MRP",
  "summary": "Parts Unlimited MRP and Jenkins on Ubuntu 14.04-LTS VMs for use with DevOps Hands-on-Labs.",
  "longSummary": "Parts Unlimited MRP and Jenkins on Ubuntu 14.04-LTS VMs for use with DevOps Hands-on-Labs.",
  "description": "<p>Jenkins is a leading open source automation server. Jenkins provides hundreds of plugins to support building, deploying and automating any project.</p><p>This VM contains the latest version of Jenkins, along with the MRP VM, both running on Ubuntu 14.04-LTS, configured as a single deployment, and will allow you to get started learning and understanding how to use Jenkins to deploy the Parts Unlimited MRP app.</p><p>For more information, review the links below.</p>",
  "documentationLink": "Jenkins Homepage",
  "documentationLink2": "Jenkins Documentation",
  "documentationLink3": "Parts Unlimited MRP Documentation",
  "documentationLink4": "Parts Unlimited MRP Channel 9 Videos"
}



================================================
FILE: deploy/azurestack/instances/jenkins_standalone/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/jenkins_standalone/TheJenkinsProject.Jenkins/Manifest.json
================================================
{   "$schema": "https://gallery.azure.com/schemas/2014-09-01/manifest.json#",
    "name": "Jenkins",
    "publisher": "TheJenkinsProject",
    "version": "1.0.0",
    "displayName": "ms-resource:displayName",
    "publisherDisplayName": "ms-resource:publisherDisplayName",
    "publisherLegalName": "ms-resource:publisherDisplayName",
    "summary": "ms-resource:summary",
    "longSummary": "ms-resource:longSummary",
    "description": "ms-resource:description",
    "longDescription": "ms-resource:description",
    "links": [
        { "displayName": "ms-resource:documentationLink", "uri": "https://jenkins.io/index.html" },
        { "displayName": "ms-resource:documentationLink2", "uri": "https://jenkins.io/doc/" }
    ],
    "artifacts": [
        {
            "name": "JenkinsDeploy",
            "type": "Template",
            "path": "DeploymentTemplates\\JenkinsDeploy.json",
            "isDefault": true
        }
    ],
    "icons": {
        "small": "Icons\\Small.png",
        "medium": "Icons\\Medium.png",
        "large": "Icons\\Large.png",
        "wide": "Icons\\Wide.png",
        "hero": "Icons\\Hero.png"
    },
    "categories": [
      "Compute"
    ],
    "uiDefinition": {
        "path": "UIDefinition.json"
    }
}


================================================
FILE: deploy/azurestack/instances/jenkins_standalone/TheJenkinsProject.Jenkins/UIDefinition.json
================================================
{
    "$schema": "https://gallery.azure.com/schemas/2015-02-12/UIDefinition.json#",
    "createDefinition": {
        "createBlade": {
            "name": "DeployFromTemplateBlade",
            "extension": "HubsExtension"
        }
    }
}



================================================
FILE: deploy/azurestack/instances/jenkins_standalone/TheJenkinsProject.Jenkins/DeploymentTemplates/JenkinsDeploy.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "jenkinsAdminUsername": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "User name for the Jenkins Master Virtual Machine."
            },
            "defaultValue": "jenkinsadmin"
        },
        "jenkinsAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the Jenkins Master Virtual Machine."
            }
        },
        "jenkinsDnsNameForPublicIP": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the Jenkins Master Virtual Machine."
            }
        }
    },
    "variables": {
        "jenkinsImagePublisher": "Canonical",
        "jenkinsImageOffer": "UbuntuServer",
        "jenkinsImageSku": "16.04.3-LTS",
        "jenkinsOSDiskName": "jenkinsOsdisk",
        "jenkinsNicName": "jenkinsNic",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageName": "[concat('vhdstorage', uniqueString(resourceGroup().id))]",
        "storageType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "vhdStorageContainerName": "vhds",
        "jenkinsNsgName": "jenkinsNSG",
        "jenkinsVmSize": "Standard_A3",
        "jenkinsVmName": "[toLower(parameters('jenkinsDnsNameForPublicIP'))]",
        "virtualNetworkName": "jenkinsVNET",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "StorageAccount"
            },
            "properties": {
                "accountType": "[variables('storageType')]"
            }
        },
         {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('jenkinsNsgName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NSG-Jenkins"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "SSH port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "Jenkins",
                        "properties": {
                            "description": "Jenkins port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('jenkinsDnsNameForPublicIP')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "PublicIPAddress-Jenkins"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('jenkinsDnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VirtualNetwork"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
       
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('jenkinsNicName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NIC-Jenkins"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('jenkinsDnsNameForPublicIP'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('jenkinsNSGName'))]"
            ],
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('jenkinsNSGName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('jenkinsDnsNameForPublicIP'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('jenkinsVmName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VM-Jenkins"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('jenkinsNicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('jenkinsVmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('jenkinsVmName')]",
                    "adminUsername": "[parameters('jenkinsAdminUsername')]",
                    "adminPassword": "[parameters('jenkinsAdminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('jenkinsImagePublisher')]",
                        "offer": "[variables('jenkinsImageOffer')]",
                        "sku": "[variables('jenkinsImageSku')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('jenkinsOSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('jenkinsNicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('jenkinsVmName'),'/CustomScriptForLinux')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('jenkinsVmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/azurestack/customscripts/jenkins/install_jenkins_1604.sh"
                    ],
                    "commandToExecute": "bash install_jenkins_1604.sh"
                },
                "protectedSettings": {}
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('jenkinsVmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('jenkinsVmName'),'/extensions/CustomScriptForLinux')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('jenkinsAdminUsername')]",
                    "password": "[parameters('jenkinsAdminPassword')]"
                }
            }
        }
    ],
    "outputs": {}
}



================================================
FILE: deploy/azurestack/instances/jenkins_standalone/TheJenkinsProject.Jenkins/strings/resources.resjson
================================================
{
  "displayName": "Jenkins",
  "publisherDisplayName": "The Jenkins Project",
  "summary": "Jenkins on Ubuntu 16.04-LTS VM, pre-configured and ready to run on Azure Stack",
  "longSummary": "Jenkins on Ubuntu 16.04-LTS VM, pre-configured and ready to run on Azure Stack",
  "description": "<p>The leading open source automation server, Jenkins provides hundreds of plugins to support building, deploying and automating any project.</p><p>This VM contains the latest version of Jenkins, running on Ubuntu 16.04-LTS, configured as a single, standalone installation and will allow you to get started learning and understanding key Jenkins tasks.</p><p>For more information, review the links below.</p><p><b>Please Note</b> - This image is not officially provided by, or supported by Cloudbees or the Jenkins Community and is provided solely for use with the Parts Unlimited MRP Hands-on-Labs.</p>",
  "documentationLink": "The Jenkins Project",
  "documentationLink2": "Jenkins Documentation"
}



================================================
FILE: deploy/azurestack/instances/parts_unlimited_mrp_base/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/parts_unlimited_mrp_base/install_mrp_dependencies_1604.sh
================================================
#!/bin/bash

# Install PartsUnlimitedMRP dependencies
apt-get update
apt-get upgrade -y
add-apt-repository ppa:openjdk-r/ppa -y
apt-get update
apt-get install openjdk-8-jdk -y
apt-get install openjdk-8-jre -y
apt-get install mongodb -y
apt-get install tomcat7 -y
apt-get install wget -y

# Set Java environment variables
sed -i '$ a JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64' /etc/default/tomcat7
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export PATH=$PATH:/usr/lib/jvm/java-8-openjdk-amd64/bin

# Restart tomcat7
service tomcat7 restart



================================================
FILE: deploy/azurestack/instances/parts_unlimited_mrp_base/PartsUnlimited.Ubuntu1604/Manifest.json
================================================
{   "$schema": "https://gallery.azure.com/schemas/2014-09-01/manifest.json#",
    "name": "MRP",
    "publisher": "PartsUnlimited",
    "version": "1.0.0",
    "displayName": "ms-resource:displayName",
    "publisherDisplayName": "ms-resource:publisherDisplayName",
    "publisherLegalName": "ms-resource:publisherDisplayName",
    "summary": "ms-resource:summary",
    "longSummary": "ms-resource:longSummary",
    "description": "ms-resource:description",
    "longDescription": "ms-resource:description",
    "links": [
        { "displayName": "ms-resource:documentationLink", "uri": "https://microsoft.github.io/PartsUnlimitedMRP/" },
        { "displayName": "ms-resource:documentationLink2", "uri": "https://channel9.msdn.com/Series/Parts-Unlimited-MRP-Labs" }
    ],
    "artifacts": [
        {
            "name": "PartsUnlimitedMRP",
            "type": "Template",
            "path": "DeploymentTemplates\\PartsUnlimitedMRP.json",
            "isDefault": true
        }
    ],
    "icons": {
        "small": "Icons\\Small.png",
        "medium": "Icons\\Medium.png",
        "large": "Icons\\Large.png",
        "wide": "Icons\\Wide.png",
        "hero": "Icons\\Hero.png"
    },
    "categories": [
      "Compute"
    ],
    "uiDefinition": {
        "path": "UIDefinition.json"
    }
}


================================================
FILE: deploy/azurestack/instances/parts_unlimited_mrp_base/PartsUnlimited.Ubuntu1604/UIDefinition.json
================================================
{
    "$schema": "https://gallery.azure.com/schemas/2015-02-12/UIDefinition.json#",
    "createDefinition": {
        "createBlade": {
            "name": "DeployFromTemplateBlade",
            "extension": "HubsExtension"
        }
    }
}



================================================
FILE: deploy/azurestack/instances/parts_unlimited_mrp_base/PartsUnlimited.Ubuntu1604/DeploymentTemplates/PartsUnlimitedMRP.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "mrpAdminUsername": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "User name for the MRP Virtual Machine."
            },
            "defaultValue": "mrpadmin"
        },
        "mrpAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Administrator password for the MRP Virtual Machine."
            }
        },
        "mrpDnsNameForPublicIP": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the MRP Virtual Machine."
            }
        }
    },
    "variables": {
        "mrpImagePublisher": "Canonical",
        "mrpImageOffer": "UbuntuServer",
        "mrpImageSku": "16.04.3-LTS",
        "mrpOSDiskName": "mrpOsdisk",
        "mrpNicName": "mrpNic",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageName": "[concat('vhdstorage', uniqueString(resourceGroup().id))]",
        "storageType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "vhdStorageContainerName": "vhds",
        "mrpNsgName": "mrpNSG",
        "mrpVmSize": "Standard_A2",
        "mrpVmName": "[toLower(parameters('mrpDnsNameForPublicIP'))]",
        "virtualNetworkName": "mrpVNET",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "[variables('storageType')]"
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('mrpNsgName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "SSH port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "MRP",
                        "properties": {
                            "description": "MRP port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "9080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "OrderingSvc",
                        "properties": {
                            "description": "OrderingService port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1200,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('mrpDnsNameForPublicIP')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('mrpDnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('mrpNicName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('mrpDnsNameForPublicIP'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[variables('mrpNsgName')]"
            ],
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mrpNsgName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('mrpDnsNameForPublicIP'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('mrpVmName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('mrpNicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('mrpVmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('mrpVmName')]",
                    "adminUsername": "[parameters('mrpAdminUsername')]",
                    "adminPassword": "[parameters('mrpAdminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('mrpImagePublisher')]",
                        "offer": "[variables('mrpImageOffer')]",
                        "sku": "[variables('mrpImageSKU')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat(resourceGroup().name, 'osdisk')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('mrpOSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('mrpNicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('mrpVmName'),'/LinuxCustomScriptExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('mrpVmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/azurestack/customscripts/install_updates.sh"
                    ],
                    "commandToExecute": "bash install_updates.sh"
                },
                "protectedSettings": {}
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('mrpVmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('mrpVmName'),'/extensions/LinuxCustomScriptExtension')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('mrpAdminUsername')]",
                    "password": "[parameters('mrpAdminPassword')]"
                }
            }
        }
    ],
    "outputs": {}
}


================================================
FILE: deploy/azurestack/instances/parts_unlimited_mrp_base/PartsUnlimited.Ubuntu1604/strings/resources.resjson
================================================
﻿{
  "displayName": "Parts Unlimited MRP",
  "publisherDisplayName": "Parts Unlimited",
  "summary": "Parts Unlimited MRP Virtual Machine for use with DevOps Hands-on-Labs.",
  "longSummary": "Parts Unlimited MRP Virtual Machine for use with DevOps Hands-on-Labs.",
  "description": "<p>Parts Unlimited MRP is a fictional outsourced Manufacturing Resource Planning (MRP) application for training purposes based on the description in chapters 31-35 of The Phoenix Projectby Gene Kim, Kevin Behr and George Spafford. © 2013 IT Revolution Press LLC, Portland, OR. Resemblance to “Project Unicorn” in the novel is intentional; resemblance to any real company is purely coincidental. </p><p>The application uses entirely open source software including Linux, Java, Apache, and MongoDB which creates a web front end, an order service, and an integration service</p><p>For more information, review the links below.",
  "documentationLink": "Documentation",
  "documentationLink2": "Channel 9 Videos"
}


================================================
FILE: deploy/azurestack/instances/parts_unlimited_SSH_mrp_base/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/parts_unlimited_SSH_mrp_base/PartsUnlimitedSSH.Ubuntu1604/Manifest.json
================================================
{   "$schema": "https://gallery.azure.com/schemas/2014-09-01/manifest.json#",
    "name": "MRPSSH",
    "publisher": "PartsUnlimited",
    "version": "1.0.0",
    "displayName": "ms-resource:displayName",
    "publisherDisplayName": "ms-resource:publisherDisplayName",
    "publisherLegalName": "ms-resource:publisherDisplayName",
    "summary": "ms-resource:summary",
    "longSummary": "ms-resource:longSummary",
    "description": "ms-resource:description",
    "longDescription": "ms-resource:description",
    "links": [
        { "displayName": "ms-resource:documentationLink", "uri": "https://microsoft.github.io/PartsUnlimitedMRP/" },
        { "displayName": "ms-resource:documentationLink2", "uri": "https://channel9.msdn.com/Series/Parts-Unlimited-MRP-Labs" }
    ],
    "artifacts": [
        {
            "name": "PartsUnlimitedSSHMRP",
            "type": "Template",
            "path": "DeploymentTemplates\\PartsUnlimitedSSHMRP.json",
            "isDefault": true
        }
    ],
    "icons": {
        "small": "Icons\\Small.png",
        "medium": "Icons\\Medium.png",
        "large": "Icons\\Large.png",
        "wide": "Icons\\Wide.png",
        "hero": "Icons\\Hero.png"
    },
    "categories": [
      "Compute"
    ],
    "uiDefinition": {
        "path": "UIDefinition.json"
    }
}


================================================
FILE: deploy/azurestack/instances/parts_unlimited_SSH_mrp_base/PartsUnlimitedSSH.Ubuntu1604/UIDefinition.json
================================================
{
    "$schema": "https://gallery.azure.com/schemas/2015-02-12/UIDefinition.json#",
    "createDefinition": {
        "createBlade": {
            "name": "DeployFromTemplateBlade",
            "extension": "HubsExtension"
        }
    }
}



================================================
FILE: deploy/azurestack/instances/parts_unlimited_SSH_mrp_base/PartsUnlimitedSSH.Ubuntu1604/DeploymentTemplates/PartsUnlimitedSSHMRP.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "mrpAdminUsername": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "User name for the MRP Virtual Machine."
            },
            "defaultValue": "mrpadmin"
        },
        "adminPublicKey": {
            "type": "string",
            "metadata": {
                "description": "SSH rsa public key file as a string"
            }
        },
        "mrpDnsNameForPublicIP": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the MRP Virtual Machine."
            }
        }
    },
    "variables": {
        "mrpImagePublisher": "Canonical",
        "mrpImageOffer": "UbuntuServer",
        "mrpImageSku": "16.04.3-LTS",
        "mrpOSDiskName": "mrpOsdisk",
        "mrpNicName": "mrpNic",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageName": "[concat('vhdstorage', uniqueString(resourceGroup().id))]",
        "storageType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "vhdStorageContainerName": "vhds",
        "mrpNsgName": "mrpNSG",
        "mrpVmSize": "Standard_A2",
        "mrpVmName": "[toLower(parameters('mrpDnsNameForPublicIP'))]",
        "sshKeyPath": "[concat('/home/',parameters('mrpAdminUsername'),'/.ssh/authorized_keys')]",
        "virtualNetworkName": "mrpVNET",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "StorageAccount"
            },
            "properties": {
                "accountType": "[variables('storageType')]"
            }
        },
         {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('mrpNsgName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NSG-mrp"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "SSH port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "MRP",
                        "properties": {
                            "description": "MRP port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "9080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "OrderingSvc",
                        "properties": {
                            "description": "OrderingService port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1200,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('mrpDnsNameForPublicIP')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "PublicIPAddress-mrp"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('mrpDnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VirtualNetwork"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
       
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('mrpNicName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NIC-mrp"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('mrpDnsNameForPublicIP'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('mrpNSGName'))]"
            ],
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mrpNSGName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('mrpDnsNameForPublicIP'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('mrpVmName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VM-mrp"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('mrpNicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('mrpVmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('mrpVmName')]",
                    "adminUsername": "[parameters('mrpAdminUsername')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": "true",
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[variables('sshKeyPath')]",
                                    "keyData": "[parameters('adminPublicKey')]"
                                }
                            ]
                        }
                    }
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('mrpImagePublisher')]",
                        "offer": "[variables('mrpImageOffer')]",
                        "sku": "[variables('mrpImageSku')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('mrpOSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('mrpNicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('mrpVmName'),'/mrpsetup')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('mrpVmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/azurestack/instances/parts_unlimited_mrp_base/install_mrp_dependencies_1604.sh"
                    ],
                    "commandToExecute": "bash install_mrp_dependencies_1604.sh"
                },
                "protectedSettings": {}
            }
        }
    ],
    "outputs": {}
}



================================================
FILE: deploy/azurestack/instances/parts_unlimited_SSH_mrp_base/PartsUnlimitedSSH.Ubuntu1604/strings/resources.resjson
================================================
﻿{
  "displayName": "Parts Unlimited MRP with SSH",
  "publisherDisplayName": "Parts Unlimited",
  "summary": "Parts Unlimited MRP Virtual Machine with SSH for use with DevOps Hands-on-Labs.",
  "longSummary": "Parts Unlimited MRP Virtual Machine with SSH for use with DevOps Hands-on-Labs.",
  "description": "<p>Parts Unlimited MRP is a fictional outsourced Manufacturing Resource Planning (MRP) application for training purposes based on the description in chapters 31-35 of The Phoenix Projectby Gene Kim, Kevin Behr and George Spafford. © 2013 IT Revolution Press LLC, Portland, OR. Resemblance to “Project Unicorn” in the novel is intentional; resemblance to any real company is purely coincidental. </p><p>The application uses entirely open source software including Linux, Java, Apache, and MongoDB which creates a web front end, an order service, and an integration service</p><p>For more information, review the links below.",
  "documentationLink": "Documentation",
  "documentationLink2": "Channel 9 Videos"
}


================================================
FILE: deploy/azurestack/instances/puppet_node/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/puppet_node/AddPuppetNode.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminUsername": {
            "defaultValue": "localadmin",
            "minLength": 1,
            "type": "string",
            "metadata": {
                "description": "User name for the additional node."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Administrator password for the additional node."
            }
        },
        "dnsNameForPublicIP": {
            "minLength": 1,
            "type": "string",
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the MRP Virtual Machine."
            }
        }
    },
    "variables": {
        "imagePublisher": "Canonical",
        "imageOffer": "UbuntuServer",
        "imageSku": "16.04.3-LTS",
        "osDiskName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'osdisk'))]",
        "nicName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'Nic'))]",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'sa'))]",
        "storageType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "vhdStorageContainerName": "vhds",
        "nsgName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'NSG'))]",
        "vmSize": "Standard_A2",
        "vmName": "[toLower(parameters('dnsNameForPublicIP'))]",
        "existingVirtualNetworkName": "puppetVNET",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('existingVirtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "[variables('storageType')]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('nsgName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "SSH port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "MRP",
                        "properties": {
                            "description": "MRP port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "9080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "OrderingSvc",
                        "properties": {
                            "description": "OrderingService port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1200,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[tolower(concat(parameters('dnsNameForPublicIP'), 'publicIP'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('dnsNameForPublicIP')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('existingVirtualNetworkName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nicName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', tolower(concat(parameters('dnsNameForPublicIP'), 'publicIP')))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', tolower(concat(parameters('dnsNameForPublicIP'), 'publicIP')))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('existingVirtualNetworkName'))]",
                "[variables('nsgName')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vmName')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[variables('imageSKU')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[variables('osDiskName')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('osDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxCustomScriptExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.5",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "commandToExecute": "ifconfig"
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('adminUsername')]",
                    "password": "[parameters('adminPassword')]"
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'),'/extensions/LinuxCustomScriptExtension')]"
            ]
        }
    ],
    "outputs": {}
}


================================================
FILE: deploy/azurestack/instances/puppet_standalone/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/puppet_standalone/Puppet.PuppetEnterprise/Manifest.json
================================================
{   "$schema": "https://gallery.azure.com/schemas/2014-09-01/manifest.json#",
    "name": "PuppetEnterprise",
    "publisher": "Puppet",
    "version": "1.0.0",
    "displayName": "ms-resource:displayName",
    "publisherDisplayName": "ms-resource:publisherDisplayName",
    "publisherLegalName": "ms-resource:publisherDisplayName",
    "summary": "ms-resource:summary",
    "longSummary": "ms-resource:longSummary",
    "description": "ms-resource:description",
    "longDescription": "ms-resource:description",
    "links": [
        { "displayName": "ms-resource:documentationLink", "uri": "https://puppet.com/" },
        { "displayName": "ms-resource:documentationLink2", "uri": "https://docs.puppet.com/puppet/" }
    ],
    "artifacts": [
        {
            "name": "PuppetDeploy",
            "type": "Template",
            "path": "DeploymentTemplates\\PuppetDeploy.json",
            "isDefault": true
        }
    ],
    "icons": {
        "small": "Icons\\Small.png",
        "medium": "Icons\\Medium.png",
        "large": "Icons\\Large.png",
        "wide": "Icons\\Wide.png",
        "hero": "Icons\\Hero.png"
    },
    "categories": [
      "Compute"
    ],
    "uiDefinition": {
        "path": "UIDefinition.json"
    }
}


================================================
FILE: deploy/azurestack/instances/puppet_standalone/Puppet.PuppetEnterprise/UIDefinition.json
================================================
{
    "$schema": "https://gallery.azure.com/schemas/2015-02-12/UIDefinition.json#",
    "createDefinition": {
        "createBlade": {
            "name": "DeployFromTemplateBlade",
            "extension": "HubsExtension"
        }
    }
}



================================================
FILE: deploy/azurestack/instances/puppet_standalone/Puppet.PuppetEnterprise/DeploymentTemplates/PuppetDeploy.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "pmAdminUsername": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "User name for the Puppet Master Virtual Machine."
            },
            "defaultValue": "puppetadmin"
        },
        "pmAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the Puppet Master Virtual Machine."
            }
        },
        "pmDnsNameForPublicIP": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the Puppet Master Virtual Machine."
            }
        },
        "pmConsolePassword": {
            "type": "securestring",
            "metadata": {
            "description": "Password for the Puppet Master console admin account."
            }
        }
    },
    "variables": {
        "pmImagePublisher": "Canonical",
        "pmImageOffer": "UbuntuServer",
        "pmImageSku": "16.04.3-LTS",
        "pmVersion": "2017.2.1",
        "pmOSDiskName": "puppetOsdisk",
        "pmNicName": "puppetNic",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageName": "[concat('vhdstorage', uniqueString(resourceGroup().id))]",
        "storageType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "vhdStorageContainerName": "vhds",
        "pmNsgName": "pmNSG",
        "pmVmSize": "Standard_A3",
        "pmVmName": "[toLower(parameters('pmDnsNameForPublicIP'))]",
        "virtualNetworkName": "puppetVNET",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "StorageAccount"
            },
            "properties": {
                "accountType": "[variables('storageType')]"
            }
        },
         {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('pmNsgName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NSG-Puppet"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "SSH port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "HTTPS",
                        "properties": {
                            "description": "HTTPS port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "Puppet",
                        "properties": {
                            "description": "Puppet port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8140",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1200,
                            "direction": "Inbound"
                        }
                    },
                        {
                        "name": "MCollective",
                        "properties": {
                            "description": "MCollective port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "61613",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1300,
                            "direction": "Inbound"
                            }
                        }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('pmDnsNameForPublicIP')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "PublicIPAddress-Puppet"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('pmDnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VirtualNetwork"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
       
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('pmNicName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NIC-Puppet"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('pmDnsNameForPublicIP'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('pmNSGName'))]"
            ],
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('pmNSGName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('pmDnsNameForPublicIP'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('pmVmName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VM-Puppet"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('pmNicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('pmVmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('pmVmName')]",
                    "adminUsername": "[parameters('pmAdminUsername')]",
                    "adminPassword": "[parameters('pmAdminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('pmImagePublisher')]",
                        "offer": "[variables('pmImageOffer')]",
                        "sku": "[variables('pmImageSku')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('pmOSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('pmNicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('pmVmName'),'/CustomScriptForLinux')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('pmVmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": "true",

                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/azurestack/customscripts/puppet/install_puppet_1604.sh"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('bash install_puppet_1604.sh ', variables('pmVersion'), ' ', parameters('pmConsolePassword'))]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('pmVmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('pmVmName'),'/extensions/CustomScriptForLinux')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('pmAdminUsername')]",
                    "password": "[parameters('pmAdminPassword')]"
                }
            }
        }
    ]
}



================================================
FILE: deploy/azurestack/instances/puppet_standalone/Puppet.PuppetEnterprise/strings/resources.resjson
================================================
{
  "displayName": "Puppet Enterprise",
  "publisherDisplayName": "Puppet",
  "summary": "Puppet Enterprise on Ubuntu 16.04-LTS VM, pre-configured and ready to run on Azure Stack",
  "longSummary": "Puppet Enterprise on Ubuntu 16.04-LTS VM, pre-configured and ready to run on Azure Stack",
  "description": "<p>Puppet Enterprise lets you automate the entire lifecycle of your Azure infrastructure, simply, scalably, and securely, from initial provisioning through application deployment.</p><p>After you set up your Puppet Master, you can start automating common tasks, such as provisioning VMs, deploying an IIS site, and configuring a SQL server database.</p><p>For more information, review the links below.</p><p><b>Please Note</b> - This image is not officially provided by, or supported by Puppet and is provided solely for use with the Parts Unlimited MRP Hands-on-Labs. All logos and images are property of Puppet</p>",
  "documentationLink": "Puppet Enterprise",
  "documentationLink2": "Puppet Documentation"
}


================================================
FILE: deploy/azurestack/instances/ubuntu_server_1404_base/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/ubuntu_server_1404_base/Canonical.Ubuntu1404/Manifest.json
================================================
{   "$schema": "https://gallery.azure.com/schemas/2014-09-01/manifest.json#",
    "name": "UbuntuServer",
    "publisher": "Canonical",
    "version": "1.0.0",
    "displayName": "ms-resource:displayName",
    "publisherDisplayName": "ms-resource:publisherDisplayName",
    "publisherLegalName": "ms-resource:publisherDisplayName",
    "summary": "ms-resource:summary",
    "longSummary": "ms-resource:longSummary",
    "description": "ms-resource:description",
    "longDescription": "ms-resource:description",
    "links": [
        { "displayName": "ms-resource:documentationLink", "uri": "https://help.ubuntu.com/14.04/serverguide/index.html" }
    ],
    "artifacts": [
        {
            "name": "UbuntuServer1404",
            "type": "Template",
            "path": "DeploymentTemplates\\UbuntuServer1404.json",
            "isDefault": true
        }
    ],
    "icons": {
        "small": "Icons\\Small.png",
        "medium": "Icons\\Medium.png",
        "large": "Icons\\Large.png",
        "wide": "Icons\\Wide.png",
        "hero": "Icons\\Hero.png"
    },
    "categories": [
      "Compute"
    ],
    "uiDefinition": {
        "path": "UIDefinition.json"
    }
}


================================================
FILE: deploy/azurestack/instances/ubuntu_server_1404_base/Canonical.Ubuntu1404/UIDefinition.json
================================================
{
    "$schema": "https://gallery.azure.com/schemas/2015-02-12/UIDefinition.json#",
    "createDefinition": {
        "createBlade": {
            "name": "DeployFromTemplateBlade",
            "extension": "HubsExtension"
        }
    }
}



================================================
FILE: deploy/azurestack/instances/ubuntu_server_1404_base/Canonical.Ubuntu1404/DeploymentTemplates/UbuntuServer1404.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for the Virtual Machine."
            },
            "defaultValue": "localadmin"
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Administrator password used when provisioning virtual machines"
            }
        }
    },
    "variables": {
        "dnsNameForPublicIP": "[resourceGroup().name]",
        "location": "[resourceGroup().location]",
        "imagePublisher": "Canonical",
        "imageOffer": "UbuntuServer",
        "UbuntuSKU": "1404-LTS",
        "OSDiskName": "[tolower(concat(resourceGroup().name, 'osdisk'))]",
        "nicName": "[tolower(concat(resourceGroup().name, 'vNic'))]",
        "addressPrefix": "10.0.0.0/24",
        "subnetName": "[tolower(concat(resourceGroup().name, 'subnet'))]",
        "subnetPrefix": "10.0.0.0/24",
        "storageAccountName": "[concat(resourceGroup().name, 'sa')]",
        "storageAccountType": "Standard_LRS",
        "publicIPAddressName": "[tolower(concat(resourceGroup().name, 'publicIP'))]",
        "publicIPAddressType": "Dynamic",
        "vmStorageAccountContainerName": "vhds",
        "vmName": "[resourceGroup().name]",
        "vmSize": "Standard_A2",
        "virtualNetworkName": "[tolower(concat(resourceGroup().name, 'vNet'))]",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
        "networkSecurityGroupName": "[tolower(concat(resourceGroup().name, 'nsg'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageAccountName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[variables('location')]",
            "properties": {
                "accountType": "[variables('storageAccountType')]"
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('networkSecurityGroupName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "ssh",
                        "properties": {
                            "description": "Allow SSH",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 200,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressName')]",
            "location": "[variables('location')]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[variables('dnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[variables('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nicName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[variables('networkSecurityGroupName')]"
            ],
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vmName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[variables('UbuntuSKU')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat(resourceGroup().name, 'osdisk')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',variables('OSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxCustomScriptExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/azurestack/customscripts/install_updates.sh"
                    ],
                    "commandToExecute": "bash install_updates.sh"
                },
                "protectedSettings": {}
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxDockerExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'),'/extensions/LinuxCustomScriptExtension')]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "DockerExtension",
                "typeHandlerVersion": "1.2",
                "autoUpgradeMinorVersion": "true",
                "settings": {}
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'),'/extensions/LinuxDockerExtension')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('adminUsername')]",
                    "password": "[parameters('adminPassword')]"
                }
            }
        }
    ],
    "outputs": {}
}


================================================
FILE: deploy/azurestack/instances/ubuntu_server_1404_base/Canonical.Ubuntu1404/strings/resources.resjson
================================================
{
  "displayName": "Ubuntu Server 14.04-LTS",
  "publisherDisplayName": "Canonical",
  "summary": "Ubuntu Server delivers the best value scale-out performance available.",
  "longSummary": "Ubuntu Server delivers the best value scale-out performance available.",
  "description": "<p>Ubuntu Server is the world's most popular Linux for cloud environments.</p><p>Updates and patches for Ubuntu 14.04 LTS will be available until 2019-04-17.</p><p>Ubuntu Server is the perfect virtual machine (VM) platform for all workloads from web applications to NoSQL databases and Hadoop.</p><p><b>Please Note</b> - This image is not officially provided by, or supported by Canonical and is provided solely for use with the Parts Unlimited MRP Hands-on-Labs. All logos and images are property of Canonical.</p>",
  "documentationLink": "Documentation"
}


================================================
FILE: deploy/azurestack/instances/ubuntu_server_1604_base/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/ubuntu_server_1604_base/Canonical.UbuntuServer.1.0.0/Manifest.json
================================================
{   "$schema": "https://gallery.azure.com/schemas/2014-09-01/manifest.json#",
    "name": "UbuntuServer",
    "publisher": "Canonical",
    "version": "1.0.0",
    "displayName": "ms-resource:displayName",
    "publisherDisplayName": "ms-resource:publisherDisplayName",
    "publisherLegalName": "ms-resource:publisherDisplayName",
    "summary": "ms-resource:summary",
    "longSummary": "ms-resource:longSummary",
    "description": "ms-resource:description",
    "longDescription": "ms-resource:description",
    "links": [
        { "displayName": "ms-resource:documentationLink", "uri": "https://help.ubuntu.com/lts/serverguide/index.html" }
    ],
    "artifacts": [
        {
            "name": "UbuntuServer1604",
            "type": "Template",
            "path": "DeploymentTemplates\\UbuntuServer1604.json",
            "isDefault": true
        }
    ],
    "icons": {
        "small": "Icons\\Small.png",
        "medium": "Icons\\Medium.png",
        "large": "Icons\\Large.png",
        "wide": "Icons\\Wide.png",
        "hero": "Icons\\Hero.png"
    },
    "categories": [
      "Compute"
    ],
    "uiDefinition": {
        "path": "UIDefinition.json"
    }
}


================================================
FILE: deploy/azurestack/instances/ubuntu_server_1604_base/Canonical.UbuntuServer.1.0.0/UIDefinition.json
================================================
{
    "$schema": "https://gallery.azure.com/schemas/2015-02-12/UIDefinition.json#",
    "createDefinition": {
        "createBlade": {
            "name": "DeployFromTemplateBlade",
            "extension": "HubsExtension"
        }
    }
}



================================================
FILE: deploy/azurestack/instances/ubuntu_server_1604_base/Canonical.UbuntuServer.1.0.0/DeploymentTemplates/UbuntuServer1604.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for the Virtual Machine."
            },
            "defaultValue": "localadmin"
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Administrator password used when provisioning virtual machines"
            }
        }
    },
    "variables": {
        "dnsNameForPublicIP": "[resourceGroup().name]",
        "location": "[resourceGroup().location]",
        "imagePublisher": "Canonical",
        "imageOffer": "UbuntuServer",
        "UbuntuSKU": "16.04.3-LTS",
        "OSDiskName": "[tolower(concat(resourceGroup().name, 'osdisk'))]",
        "nicName": "[tolower(concat(resourceGroup().name, 'vNic'))]",
        "addressPrefix": "10.0.0.0/24",
        "subnetName": "[tolower(concat(resourceGroup().name, 'subnet'))]",
        "subnetPrefix": "10.0.0.0/24",
        "storageAccountName": "[concat(resourceGroup().name, 'sa')]",
        "storageAccountType": "Standard_LRS",
        "publicIPAddressName": "[tolower(concat(resourceGroup().name, 'publicIP'))]",
        "publicIPAddressType": "Dynamic",
        "vmStorageAccountContainerName": "vhds",
        "vmName": "[resourceGroup().name]",
        "vmSize": "Standard_A2",
        "virtualNetworkName": "[tolower(concat(resourceGroup().name, 'vNet'))]",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
        "networkSecurityGroupName": "[tolower(concat(resourceGroup().name, 'nsg'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageAccountName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[variables('location')]",
            "properties": {
                "accountType": "[variables('storageAccountType')]"
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('networkSecurityGroupName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "ssh",
                        "properties": {
                            "description": "Allow SSH",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 200,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressName')]",
            "location": "[variables('location')]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[variables('dnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[variables('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nicName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[variables('networkSecurityGroupName')]"
            ],
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vmName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[variables('UbuntuSKU')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat(resourceGroup().name, 'osdisk')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',variables('OSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxCustomScriptExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/azurestack/customscripts/install_updates.sh"
                    ],
                    "commandToExecute": "bash install_updates.sh"
                },
                "protectedSettings": {}
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxDockerExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'),'/extensions/LinuxCustomScriptExtension')]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "DockerExtension",
                "typeHandlerVersion": "1.2",
                "autoUpgradeMinorVersion": "true",
                "settings": {}
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'),'/extensions/LinuxDockerExtension')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('adminUsername')]",
                    "password": "[parameters('adminPassword')]"
                }
            }
        }
    ],
    "outputs": {}
}


================================================
FILE: deploy/azurestack/instances/ubuntu_server_1604_base/Canonical.UbuntuServer.1.0.0/strings/resources.resjson
================================================
{
  "displayName": "Ubuntu Server 16.04-LTS",
  "publisherDisplayName": "Canonical",
  "summary": "Ubuntu Server delivers the best value scale-out performance available.",
  "longSummary": "Ubuntu Server delivers the best value scale-out performance available.",
  "description": "<p>Ubuntu Server is the world's most popular Linux for cloud environments. Updates and patches for Ubuntu 16.04 will be available until April 2021.</p><p>Ubuntu Server is the perfect virtual machine (VM) platform for all workloads from web applications to NoSQL databases and Hadoop.</p><p><b>Please Note</b> - This image is not officially provided by, or supported by Canonical and is provided solely for use with the Parts Unlimited MRP Hands-on-Labs. All logos and images are property of Canonical</p>",
  "documentationLink": "Documentation"
}


================================================
FILE: deploy/docker/BuildAndRun.sh
================================================
#!/bin/bash

#Build your docker images manually on the server
docker build -t mypartsunlimitedmrp/db ./Database
docker build -t mypartsunlimitedmrp/order ./Order
docker build -t mypartsunlimitedmrp/web ./Clients

#Run your docker images manually on the server
docker run -it -d --name db -p 27017:27017 -p 28017:28017 mypartsunlimitedmrp/db 
docker run -it -d --name order -p 8080:8080 --link db:mongo mypartsunlimitedmrp/order
docker run -it -d --name web -p 80:8080 mypartsunlimitedmrp/web

#Feed the database
docker exec db mongo ordering /tmp/MongoRecords.js


================================================
FILE: deploy/docker/StopAndRemove.sh
================================================
#!/bin/bash

#Stop your docker container and remove it manually on the server
docker rm db --force
docker rm order --force
docker rm web --force

#Remove the images manually on the server
docker rmi mypartsunlimitedmrp/db
docker rmi mypartsunlimitedmrp/order
docker rmi mypartsunlimitedmrp/web


================================================
FILE: deploy/docker/Clients/Dockerfile
================================================
FROM tomcat:7-jre8

MAINTAINER juliens@microsoft.com

COPY drop/* /usr/local/tomcat/webapps/

EXPOSE 8080

ENTRYPOINT catalina.sh run



================================================
FILE: deploy/docker/Clients/drop/PUT YOUR WAR FILE HERE
================================================
[Empty file]


================================================
FILE: deploy/docker/Database/Dockerfile
================================================
FROM mongo

MAINTAINER juliens@microsoft.com

COPY drop/* /tmp/

CMD ["mongod", "--smallfiles", "--rest"]


================================================
FILE: deploy/docker/Database/drop/MongoRecords.js
================================================
var conn;
while (conn === undefined)
{
    try
    {
        conn = new Mongo("localhost:27017");
    }
    catch (e)
    {
        print(e);
    }

    sleep(100);
}

db = conn.getDB("ordering");
db.catalog.insert(
[
  {"skuNumber" : "LIG-0001", "description" : "Helogen Headlights (2 Pack)", "price" : 38.99, "inventory" : 10, "leadTime" : 3},
  {"skuNumber" : "LIG-0002", "description" : "Bugeye Headlights (2 Pack)", "price" : 48.99, "inventory" : 7, "leadTime" : 3},
  {"skuNumber" : "LIG-0003", "description" : "Turn Signal Light Bulb", "price" : 6.49, "inventory" : 18, "leadTime" : 3},
  {"skuNumber" : "WHE-0001", "description" : "Matte Finish Rim", "price" : 75.99, "inventory" : 4, "leadTime" : 5},
  {"skuNumber" : "WHE-0002", "description" : "Blue Performance Alloy Rim", "price" : 88.99, "inventory" : 8, "leadTime" : 5},
  {"skuNumber" : "WHE-0003", "description" : "High Performance Rim", "price" : 99.99, "inventory" : 3, "leadTime" : 5},
  {"skuNumber" : "WHE-0004", "description" : "Wheel Tire Combo", "price" : 72.49, "inventory" : 0, "leadTime" : 4},
  {"skuNumber" : "WHE-0005", "description" : "Chrome Rim Tire Combo", "price" : 129.99, "inventory" : 1, "leadTime" : 4},
  {"skuNumber" : "WHE-0006", "description" : "Wheel Tire Combo (4 Pack)", "price" : 219.99, "inventory" : 3, "leadTime" : 6},
  {"skuNumber" : "BRA-0001", "description" : "Disk and Pad Combo", "price" : 25.99, "inventory" : 0, "leadTime" : 6},
  {"skuNumber" : "BRA-0002", "description" : "Brake Rotor", "price" : 18.99, "inventory" : 4, "leadTime" : 4},
  {"skuNumber" : "BRA-0003", "description" : "Brake Disk and Calipers", "price" : 43.99, "inventory" : 2, "leadTime" : 8},
  {"skuNumber" : "BAT-0001", "description" : "12-Volt Calcium Battery", "price" : 129.99, "inventory" : 9, "leadTime" : 8},
  {"skuNumber" : "BAT-0002", "description" : "Spiral Coil Battery", "price" : 154.99, "inventory" : 3, "leadTime" : 10},
  {"skuNumber" : "BAT-0003", "description" : "Jumper Leads", "price" : 16.99, "inventory" : 6, "leadTime" : 3},
  {"skuNumber" : "OIL-0001", "description" : "Filter Set", "price" : 28.99, "inventory" : 3, "leadTime" : 4},
  {"skuNumber" : "OIL-0002", "description" : "Oil and Filter Combo", "price" : 34.49, "inventory" : 5, "leadTime" : 4},
  {"skuNumber" : "OIL-0003", "description" : "Synthetic Engine Oil", "price" : 39.99, "inventory" : 11, "leadTime" : 4}
])

db.dealers.insert({ "name" : "Terry Adams", "address" : "17760 Northeast 67th Court, Redmond, WA 98052", "email" : "terry@adams.com", "phone" : "425-885-6217" })

db.quotes.insert([{
"quoteId" : "0",
"validUntil" : "2015-05-01T00:00:00+0000",
"customerName" : "Walter Harp",
"dealerName" : "Terry Adams",
"city" : "Seattle",
"totalCost" : "51.97",
"discount" : "0.0",
"state" : "WA",
"postalCode" : "98023",
"quoteItems" : [
    {"skuNumber":"LIG-0001", "amount":1 },
    {"skuNumber":"LIG-0003", "amount":2 }]
},
{
"quoteId" : "1",
"validUntil" : "2015-01-01T00:00:00+0000",
"customerName" : "Jerry Morrison",
"dealerName" : "Terry Adams",
"city" : "Seattle",
"totalCost" : "25.99",
"state" : "WA",
"postalCode" : "98089",
"quoteItems" : [
  { "skuNumber" : "BRA-0001", "amount" : 1}
]
},
{
"quoteId" : "2",
"validUntil" : "2015-02-01T00:00:00+0000",
"customerName" : "Harrison Hall",
"dealerName" : "Terry Adams",
"city" : "Seattle",
"totalCost" : "600.90",
"discount" : "0.0",
"state" : "WA",
"postalCode" : "98027",
"quoteItems" : [
  { "skuNumber" : "WHE-0002", "amount" : 4},
  { "skuNumber" : "BRA-0003", "amount" : 4},
  { "skuNumber" : "OIL-0001", "amount" : 1},
  { "skuNumber" : "OIL-0001", "amount" : 1}
]
}
])

db.orders.insert([{
"orderId" : "0",
"quoteId" : "0",
"orderDate" : "2015-03-02T20:43:37+0000",
"status" : "Created",
"events" : []
},
{"orderId" : "1",
"quoteId" : "2",
"orderDate" : "2015-03-02T20:43:37+0000",
"status" : "DeliveryConfirmed",
"events" : []
}])

db.shipments.insert([{
"orderId" : "0",
"contactName" : "Walter Harp",
"primaryContactPhone" : {
  "phoneNumber" : "435-783-2378",
  "kind" : "Mobile"
},
"deliveryAddress" : {
  "street" : "34 Sheridan Street",
  "city" : "Seattle",
  "state" : "WA",
  "postalCode" : "98023",
  "specialInstructions" : ""
},
"events" : []
},
{
"orderId" : "2",
"contactName" : "Harrison Hall",
"primaryContactPhone" : {
  "phoneNumber" : "435-712-7234",
  "kind" : "Mobile"
},
"deliveryAddress" : {
  "street" : "84 Queen Street",
  "city" : "Seattle",
  "state" : "WA",
  "postalCode" : "98027",
  "specialInstructions" : "Leave around by the back door."
},
"events" : []
}])



================================================
FILE: deploy/docker/Order/Dockerfile
================================================
FROM openjdk:8-jre

MAINTAINER juliens@microsoft.com

RUN mkdir -p /usr/local/app

WORKDIR /usr/local/app

COPY drop/* /usr/local/app/

EXPOSE 8080

ENTRYPOINT sh run.sh



================================================
FILE: deploy/docker/Order/drop/PUT YOUR JAR FILE HERE
================================================
[Empty file]


================================================
FILE: deploy/docker/Order/drop/run.sh
================================================
#!/bin/bash

while ! curl http://mongo:27017/
do
  echo "$(date) - still trying"
  sleep 1
done
echo "$(date) - connected successfully"

java -jar ordering-*.jar



================================================
FILE: Labfiles/ansible-azure-lab/ARMtemplate-newVM.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {},
    "variables": {},
    "resources": [
		{
			"comments": "Availability set",
			"type": "Microsoft.Compute/availabilitySets",
			"name": "myAvSet",
			"apiVersion": "2017-03-30",
			"location": "[resourceGroup().location]",
            "sku": {
                "name": "Aligned"
            },
            "properties": {
                "platformUpdateDomainCount": 5,
                "platformFaultDomainCount": 2
            }
		},
        {
            "comments": "Create a NSG",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "myNsg",
            "apiVersion": "2017-06-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-SSH",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    }
                ]
            },
            "resources": [],
            "dependsOn": []
        },
        {
            "comments": "Create Network Interface Card, associated to the NSG and to the SLB",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "myNic",
            "apiVersion": "2017-06-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "myNic",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', 'myVnet'), '/subnets/', 'subnet1')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'mySlb'), '/backendAddressPools/', 'myBackendConfig')]"
                                }
                            ]
                        }
                    }
                ],
                "dnsSettings": {
                    "dnsServers": []
                },
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'myNsg')]"
                }
            },
            "resources": [],
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', 'myVnet')]",
                "[resourceId('Microsoft.Network/loadBalancers', 'mySlb')]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'myNsg')]"
            ]
        },
        {
            "comments": "Create vnet with 2 subnets",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "myVnet",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.123.0.0/16"
                    ]
                },
                "subnets": [
                    {
                        "name": "subnet1",
                        "properties": {
                            "addressPrefix": "10.123.1.0/24"
                        }
                    },
                    {
                        "name": "subnet2",
                        "properties": {
                            "addressPrefix": "10.123.2.0/24"
                        }
                    }
                ]
            },
            "resources": [],
            "dependsOn": []
        },
        {
            "comments": "Deploy VM",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "mySecondVM",
            "apiVersion": "2017-03-30",
            "location": "[resourceGroup().location]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', 'myAvSet')]"
                },
                "hardwareProfile": {
                    "vmSize": "Standard_A0"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "OpenLogic",
                        "offer": "CentOS",
                        "sku": "7.3",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "caching": "ReadWrite",
                        "name": "myOsDisk",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "Standard_LRS"
                        }
                    },
                    "dataDisks": []
                },
                "osProfile": {
                    "computerName": "mySecondVm",
                    "adminUsername": "lab-user",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": false
                    },
                    "secrets": [],
    				"adminPassword": "Microsoft123!"				
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', 'myNic')]"
                        }
                    ]
                }
            },
            "resources": [],
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', 'myNic')]",
                "[resourceId('Microsoft.Compute/availabilitySets', 'myAvSet')]"
            ]
        },
        {
            "comments": "Internal Load Balancer",
            "type": "Microsoft.Network/loadBalancers",
            "name": "mySlb",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "myFrontendConfig",
                        "properties": {
                            "privateIPAddress": "10.123.1.100",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', 'myVnet'), '/subnets/', 'subnet1')]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "myBackendConfig"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "SSHrule",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat( resourceId('Microsoft.Network/loadBalancers', 'mySlb'), '/frontendIPConfigurations/', 'myFrontendConfig')]"
                            },
                            "frontendPort": 22,
                            "backendPort": 22,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'mySlb'), '/backendAddressPools/', 'myBackendConfig')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'mySlb'), '/probes/', 'myProbe')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "myProbe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 22,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    }
                ],
                "inboundNatRules": [],
                "outboundNatRules": [],
                "inboundNatPools": []
            },
            "resources": [],
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', 'myVnet')]"
            ]
        }
   ]
}


================================================
FILE: Labfiles/ansible-azure-lab/delete_vm.yml
================================================
# The following variables must be specified:
# - vmname
# - resgrp
- name: Remove Virtual Machine and associated objects
  hosts: localhost
  connection: local
  gather_facts: no 
  tasks:
  - name: Remove VM and all resources
    azure_rm_virtualmachine:
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      state: absent
      # ignore_errors: yes
      remove_on_absent:
        - network_interfaces
        - virtual_storage
        - public_ips
  - name: Remove storage account
    azure_rm_storageaccount: 
      resource_group: '{{ resgrp }}'
      name:  '{{ vmname }}'
      state: absent
      # ignore_errors: yes



================================================
FILE: Labfiles/ansible-azure-lab/httpd.yml
================================================
- name: Install Apache Web Server 
  hosts: '{{ vmname }}'
  gather_facts: no
  tasks:
  - name: Ensure apache is at the latest version
    yum: name=httpd state=latest
    become: true
  - name: Change permissions of /var/www/html
    file: path=/var/www/html mode=0777
    become: true
  - name: Download index.html
    get_url:
      url: https://raw.githubusercontent.com/erjosito/ansible-azure-lab/master/index.html
      dest: /var/www/html/index.html
      mode: 0644
  - name: Ensure apache is running (and enable it at boot)
    service: name=httpd state=started enabled=yes
    become: true





================================================
FILE: Labfiles/ansible-azure-lab/index.html
================================================
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>Hello World</title>
    </head>
    <body>
        <h1>Hello World</h1>
        <p>
            <br>This is a test page
            <br>This is a test page
            <br>This is a test page
        </p>
    </body>
</html>


================================================
FILE: Labfiles/ansible-azure-lab/LICENSE
================================================
MIT License

Copyright (c) 2016 OSS Labs

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: Labfiles/ansible-azure-lab/new_ARM_deployment.yml
================================================
- name: CREATE ARM Deployment PLAYBOOK
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    # Variables 'resgrp' and 'location' need to be provided at command line with arg --extra-vars
    templateLink: 'https://raw.githubusercontent.com/erjosito/ansible-azure-lab/master/ARMtemplate-newVM.json'
    # No parameters required for this template
    #paramsLink: ''
   
  tasks:
  - name: Deploy ARM template
    azure_rm_deployment:
        state: present
        resource_group_name: '{{ resgrp }}'
        # location seems to be not optional
        location: '{{ location }}'
        template_link: '{{ templateLink }}'
        #parameters_link: '{{ paramsLink }}'



================================================
FILE: Labfiles/ansible-azure-lab/new_vm_web.yml
================================================
- name: CREATE VM PLAYBOOK
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    # Variables 'vnet', 'subnet', 'vmname' and 'resgrp' need to be provided at command line with arg --extra-vars
    dnsname: '{{ vmname }}.westeurope.cloudapp.azure.com'
    # The DNS name might not be right depending on your region!!
    ip: "{{ lookup ('dig', '{{ dnsname }}') }}"
   
  tasks:
  - debug: msg="Public DNS name {{ dnsname }} resolved to IP {{ ip }}. "
# The following check is disabled so that the playbook does not stop upon existence of DNS name. Otherwise
# it cannot be re-run after VM creation
#  - name: Check if DNS is taken
#    fail: msg="That DNS name seems to be already taken"
#    when: ip != 'NXDOMAIN'
  - name: Create storage account
    azure_rm_storageaccount:
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      account_type: Standard_LRS
  - name: Create security group that allows SSH and HTTP
    azure_rm_securitygroup: 
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      rules: 
        - name: SSH 
          protocol: Tcp 
          destination_port_range: 22  
          access: Allow  
          priority: 101 
          direction: Inbound
        - name: WEB
          protocol: Tcp 
          destination_port_range: 80  
          access: Allow  
          priority: 102 
          direction: Inbound
  - name: Create public IP address
    azure_rm_publicipaddress: 
      resource_group: '{{ resgrp }}'
      allocation_method: Static 
      name: '{{ vmname }}'
      domain_name_label: '{{ vmname }}'
  - name: Create NIC
    azure_rm_networkinterface:
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      virtual_network: '{{ vnet }}'
      subnet: '{{ subnet }}'
      public_ip_name: '{{ vmname }}'
      security_group: '{{ vmname }}'
  - name: Create VM
    azure_rm_virtualmachine:
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      storage_account: '{{ vmname }}'
      storage_container: '{{ vmname }}'
      storage_blob: '{{ vmname }}.vhd'
      network_interfaces: '{{ vmname }}'
      vm_size: Standard_A0
      admin_username: lab-user
      ssh_password_enabled: False
      ssh_public_keys: 
        - path: /home/lab-user/.ssh/authorized_keys
          key_data: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDn4i0NkH4uFL7B87MJBW0TyQcsk99vQNlHyZLJyRielhU2kxy73K4ecOEcYQPu0B58KbQfHM2EooaHbZIDAaZK8K62yaYz5eV7YBMr5TdN9Tw5u1GGT5LrWsOYoHcQtcSnTRbBSWZDFIx5eJWebBxdDh61LbEftyOLg16xsLRIqp6SeAtJANTWNSMCEH96qn4+12eoW8bYQ7flVyR7uyE+7NDKmMaHk0zWUQe0wluHyUnfj15g1tfRvwXyUEMLMagyFrhRh0n/wNBnV8XrX74OjqCseJfh3YnuLxhy4hAmw0di699Q3jTB3xJ8b7yg2NvoAF+lzSkQtiArTjEBVKuv lab-user@ansibleMaster'
      image:
        offer: CentOS
        publisher: OpenLogic
        sku: '7.2'
        version: latest



================================================
FILE: Labfiles/ansible-azure-lab/VERSION
================================================
v0.2



================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/automate_nginx.sh
================================================
#!/bin/bash

# The MIT License (MIT)
#
# Copyright (c) 2015 Microsoft Azure
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

apt-get update -y && apt-get upgrade -y
apt-get install -y nginx
echo "Hello World from my VM Scale set" $HOSTNAME "!" | sudo tee -a /var/www/html/index.html


================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/ARMtemplate-newVM.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {},
    "variables": {},
    "resources": [
		{
			"comments": "Availability set",
			"type": "Microsoft.Compute/availabilitySets",
			"name": "myAvSet",
			"apiVersion": "2017-03-30",
			"location": "[resourceGroup().location]",
            "sku": {
                "name": "Aligned"
            },
            "properties": {
                "platformUpdateDomainCount": 5,
                "platformFaultDomainCount": 2
            }
		},
        {
            "comments": "Create a NSG",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "myNsg",
            "apiVersion": "2017-06-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-SSH",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    }
                ]
            },
            "resources": [],
            "dependsOn": []
        },
        {
            "comments": "Create Network Interface Card, associated to the NSG and to the SLB",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "myNic",
            "apiVersion": "2017-06-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "myNic",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', 'myVnet'), '/subnets/', 'subnet1')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'mySlb'), '/backendAddressPools/', 'myBackendConfig')]"
                                }
                            ]
                        }
                    }
                ],
                "dnsSettings": {
                    "dnsServers": []
                },
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'myNsg')]"
                }
            },
            "resources": [],
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', 'myVnet')]",
                "[resourceId('Microsoft.Network/loadBalancers', 'mySlb')]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'myNsg')]"
            ]
        },
        {
            "comments": "Create vnet with 2 subnets",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "myVnet",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.123.0.0/16"
                    ]
                },
                "subnets": [
                    {
                        "name": "subnet1",
                        "properties": {
                            "addressPrefix": "10.123.1.0/24"
                        }
                    },
                    {
                        "name": "subnet2",
                        "properties": {
                            "addressPrefix": "10.123.2.0/24"
                        }
                    }
                ]
            },
            "resources": [],
            "dependsOn": []
        },
        {
            "comments": "Deploy VM",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "mySecondVM",
            "apiVersion": "2017-03-30",
            "location": "[resourceGroup().location]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', 'myAvSet')]"
                },
                "hardwareProfile": {
                    "vmSize": "Standard_A0"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "OpenLogic",
                        "offer": "CentOS",
                        "sku": "7.3",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "caching": "ReadWrite",
                        "name": "myOsDisk",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "Standard_LRS"
                        }
                    },
                    "dataDisks": []
                },
                "osProfile": {
                    "computerName": "mySecondVm",
                    "adminUsername": "lab-user",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": false
                    },
                    "secrets": [],
    				"adminPassword": "Microsoft123!"				
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', 'myNic')]"
                        }
                    ]
                }
            },
            "resources": [],
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', 'myNic')]",
                "[resourceId('Microsoft.Compute/availabilitySets', 'myAvSet')]"
            ]
        },
        {
            "comments": "Internal Load Balancer",
            "type": "Microsoft.Network/loadBalancers",
            "name": "mySlb",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "myFrontendConfig",
                        "properties": {
                            "privateIPAddress": "10.123.1.100",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', 'myVnet'), '/subnets/', 'subnet1')]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "myBackendConfig"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "SSHrule",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat( resourceId('Microsoft.Network/loadBalancers', 'mySlb'), '/frontendIPConfigurations/', 'myFrontendConfig')]"
                            },
                            "frontendPort": 22,
                            "backendPort": 22,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'mySlb'), '/backendAddressPools/', 'myBackendConfig')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'mySlb'), '/probes/', 'myProbe')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "myProbe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 22,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    }
                ],
                "inboundNatRules": [],
                "outboundNatRules": [],
                "inboundNatPools": []
            },
            "resources": [],
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', 'myVnet')]"
            ]
        }
   ]
}


================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/create_vm.yml
================================================
- name: Create Azure Ubuntu Web VM
  hosts: localhost
  connection: local
  tasks:
  - name: Create resource group
    azure_rm_resourcegroup:
      name: ubuntuwebvmrg
      location: eastus
  - name: Create virtual network
    azure_rm_virtualnetwork:
      resource_group: ubuntuwebvmrg
      name: ubuntuvnet
      address_prefixes: "10.0.0.0/16"
  - name: Add subnet
    azure_rm_subnet:
      resource_group: ubuntuwebvmrg
      name: ubuntusubnet
      address_prefix: "10.0.1.0/24"
      virtual_network: ubuntuvnet
  - name: Create public IP address
    azure_rm_publicipaddress:
      resource_group: ubuntuwebvmrg
      allocation_method: Static
      name: ubuntuPublicIP
    register: output_ip_address
  - name: Dump public IP for VM which will be created
    debug:
      msg: "The public IP is {{ output_ip_address.state.ip_address }}."
  - name: Create Network Security Group that allows SSH and HTTP
    azure_rm_securitygroup:
      resource_group: ubuntuwebvmrg
      name: ubuntuNetworkSecurityGroup
      rules:
        - name: SSH
          protocol: Tcp
          destination_port_range: 22
          access: Allow
          priority: 101
          direction: Inbound
        - name: HTTP
          protocol: Tcp 
          destination_port_range: 80  
          access: Allow  
          priority: 102 
          direction: Inbound
        - name: HTTPS
          protocol: Tcp 
          destination_port_range: 443 
          access: Allow  
          priority: 103 
          direction: Inbound
        - name: RDP
          protocol: Tcp 
          destination_port_range: 443 
          access: Allow  
          priority: 104
          direction: Inbound
  - name: Create virtual network interface card
    azure_rm_networkinterface:
      resource_group: ubuntuwebvmrg
      name: ubuntuNIC
      virtual_network: ubuntuvnet
      subnet: ubuntusubnet
      public_ip_name: ubuntuPublicIP
      security_group: ubuntuNetworkSecurityGroup
  - name: Create VM
    azure_rm_virtualmachine:
      resource_group: ubuntuwebvmrg
      name: ubuntuwebvm1
      vm_size: Standard_DS1_v2
      admin_username: azureuser
      admin_password: Password0134!
      ssh_password_enabled: false
      ssh_public_keys: 
        - path: /home/azureuser/.ssh/authorized_keys
          key_data: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDn4i0NkH4uFL7B87MJBW0TyQcsk99vQNlHyZLJyRielhU2kxy73K4ecOEcYQPu0B58KbQfHM2EooaHbZIDAaZK8K62yaYz5eV7YBMr5TdN9Tw5u1GGT5LrWsOYoHcQtcSnTRbBSWZDFIx5eJWebBxdDh61LbEftyOLg16xsLRIqp6SeAtJANTWNSMCEH96qn4+12eoW8bYQ7flVyR7uyE+7NDKmMaHk0zWUQe0wluHyUnfj15g1tfRvwXyUEMLMagyFrhRh0n/wNBnV8XrX74OjqCseJfh3YnuLxhy4hAmw0di699Q3jTB3xJ8b7yg2NvoAF+lzSkQtiArTjEBVKuv'
      network_interfaces: ubuntuNIC
      image:
        offer: UbuntuServer
        publisher: Canonical
        sku: 18.04-LTS
        version: latest


================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/cron.yml
================================================

- name: Create Cron Job for Web Server configuration
  hosts: localhost
  connection: local
  tasks:
  - name: Cron Job web server configuration
    cron:
     name: "httpd yml configuration"
     minute: "*"
     hour: "*"
     job: '/usr/bin/ansible-playbook -i /home/azureuser/ansible/contrib/inventory/azure_rm.py /home/azureuser/PartsUnlimitedMRP/Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/httpd.yml --extra-vars "vmname=< your-vm-name >"'

  #- name: 'Ensure an old job is no longer present. Removes any job that is prefixed by "#Ansible: an old job" from the crontab'
   # cron:
    # name: "an old job"
    # state: absent

  #- name: Creates an entry like "PATH=/opt/bin" on top of crontab
    #cron:
     #name: PATH
     #env: yes
     #value: /opt/bin

  #- name: Creates an entry like "APP_HOME=/srv/app" and insert it after PATH declaration
    #cron:
     #name: APP_HOME
     #env: yes
     #value: /srv/app
     #insertafter: PATH



================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/delete_vm.yml
================================================
# The following variables must be specified:
# - vmname
# - resgrp
- name: Remove Virtual Machine and associated objects
  hosts: localhost
  connection: local
  gather_facts: no 
  tasks:
  - name: Remove VM and all resources
    azure_rm_virtualmachine:
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      state: absent
      # ignore_errors: yes
      remove_on_absent:
        - network_interfaces
        - virtual_storage
        - public_ips
  - name: Remove storage account
    azure_rm_storageaccount: 
      resource_group: '{{ resgrp }}'
      name:  '{{ vmname }}'
      state: absent
      # ignore_errors: yes



================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/httpd.yml
================================================
- name: Install Apache Web Server 
  hosts: '{{ vmname }}'
  gather_facts: no
  tasks:
  - name: Ensure apache is at the latest version
    yum: name=httpd state=latest
    become: true
  - name: Change permissions of /var/www/html
    file: path=/var/www/html mode=0777
    become: true
  - name: Download index.html
    get_url:
      url: https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/index.html
      dest: /var/www/html/index.html
      mode: 0644
  - name: Ensure apache is running (and enable it at boot)
    service: name=httpd state=started enabled=yes
    become: true





================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/index.html
================================================
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>Hello World</title>
    </head>
    <body>
        <h1>Hello World</h1>
        <p>
            <br>This is a test page
            <br>This is a test page
            <br>This is a test page
        </p>
    </body>
</html>


================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/new_ARM_deployment.yml
================================================
- name: CREATE ARM Deployment PLAYBOOK
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    # Variables 'resgrp' and 'location' need to be provided at command line with arg --extra-vars
    templateLink: 'https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/ARMtemplate-newVM.json'
    # No parameters required for this template
    #paramsLink: ''
   
  tasks:
  - name: Deploy ARM template
    azure_rm_deployment:
        state: present
        resource_group_name: '{{ resgrp }}'
        # location seems to be not optional
        location: '{{ location }}'
        template_link: '{{ templateLink }}'
        #parameters_link: '{{ paramsLink }}'



================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/new_vm_web.yml
================================================
- name: CREATE VM PLAYBOOK
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    # Variables 'vnet', 'subnet', 'vmname' and 'resgrp' need to be provided at command line with arg --extra-vars
    dnsname: '{{ vmname }}.westeurope.cloudapp.azure.com'
    # The DNS name might not be right depending on your region!!
    ip: "{{ lookup ('dig', '{{ dnsname }}') }}"
   
  tasks:
  - debug: msg="Public DNS name {{ dnsname }} resolved to IP {{ ip }}. "
# The following check is disabled so that the playbook does not stop upon existence of DNS name. Otherwise
# it cannot be re-run after VM creation
#  - name: Check if DNS is taken
#    fail: msg="That DNS name seems to be already taken"
#    when: ip != 'NXDOMAIN'
  - name: Create storage account
    azure_rm_storageaccount:
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      account_type: Standard_LRS
  - name: Create security group that allows SSH and HTTP
    azure_rm_securitygroup: 
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      rules: 
        - name: SSH 
          protocol: Tcp 
          destination_port_range: 22  
          access: Allow  
          priority: 101 
          direction: Inbound
        - name: WEB
          protocol: Tcp 
          destination_port_range: 80  
          access: Allow  
          priority: 102 
          direction: Inbound
  - name: Create public IP address
    azure_rm_publicipaddress: 
      resource_group: '{{ resgrp }}'
      allocation_method: Static 
      name: '{{ vmname }}'
      domain_name_label: '{{ vmname }}'
  - name: Create NIC
    azure_rm_networkinterface:
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      virtual_network: '{{ vnet }}'
      subnet: '{{ subnet }}'
      public_ip_name: '{{ vmname }}'
      security_group: '{{ vmname }}'
  - name: Create VM
    azure_rm_virtualmachine:
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      storage_account: '{{ vmname }}'
      storage_container: '{{ vmname }}'
      storage_blob: '{{ vmname }}.vhd'
      network_interfaces: '{{ vmname }}'
      vm_size: Standard_A0
      admin_username: azureuser
      ssh_password_enabled: false
      ssh_public_keys: 
        - path: /home/azureuser/.ssh/authorized_keys
          key_data: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDn4i0NkH4uFL7B87MJBW0TyQcsk99vQNlHyZLJyRielhU2kxy73K4ecOEcYQPu0B58KbQfHM2EooaHbZIDAaZK8K62yaYz5eV7YBMr5TdN9Tw5u1GGT5LrWsOYoHcQtcSnTRbBSWZDFIx5eJWebBxdDh61LbEftyOLg16xsLRIqp6SeAtJANTWNSMCEH96qn4+12eoW8bYQ7flVyR7uyE+7NDKmMaHk0zWUQe0wluHyUnfj15g1tfRvwXyUEMLMagyFrhRh0n/wNBnV8XrX74OjqCseJfh3YnuLxhy4hAmw0di699Q3jTB3xJ8b7yg2NvoAF+lzSkQtiArTjEBVKuv lab-user@ansibleMaster'
      image:
        offer: CentOS
        publisher: OpenLogic
        sku: '7.2'
        version: latest



================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/nginx.yml
================================================
- name: Install nginx Web Server 
  hosts: '{{ vmname }}'
  gather_facts: no
  tasks:
  - name: Ensure nginx is at the latest version
    apt: name=nginx state=latest
    become: true
  - name: Change permissions of /var/www/html
    file: path=/var/www/html mode=0777
    become: true
  - name: Download index.html
    get_url:
      url: https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/index.html
      dest: /var/www/html/index.html
      mode: 0644
  - name: Ensure nginx is running (and enable it at boot)
    service: name=nginx state=started enabled=yes
    become: true



================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/M04/DeployusingChef/final/default.rb
================================================
#
# Cookbook Name:: mrpapp-2
# Recipe:: default
#
# Copyright (c) 2015 The Authors, All Rights Reserved.

# Runs apt-get update
include_recipe "apt"

# Add the Open JDK apt repo
apt_repository 'openJDK' do
    uri 'ppa:openjdk-r/ppa'
    distribution 'trusty'
end

# Install JDK and JRE
apt_package 'openjdk-8-jdk-headless' do
    action :install
end

apt_package 'openjdk-8-jre-headless' do
    action :install
end

# Set Java environment variables
ENV['JAVA_HOME'] = "/usr/lib/jvm/java-8-openjdk-amd64"
ENV['PATH'] = "#{ENV['PATH']}:/usr/lib/jvm/java-8-openjdk-amd64/bin"

# Install MongoDB
apt_package 'mongodb' do
    action :install
end

# Install Tomcat 7
apt_package 'tomcat7' do
    action :install
end

# Load MongoDB data 
remote_file 'mongodb_data' do
    source 'https://github.com/Microsoft/PartsUnlimitedMRP/raw/master/deploy/MongoRecords.js'
    path './MongoRecords.js'
    action :create
    notifies :run, "script[mongodb_import]", :immediately
end

script 'mongodb_import' do
    interpreter "bash"
    action :nothing
    code "mongo ordering MongoRecords.js"
end

# Set tomcat port 
script 'tomcat_port' do 
    interpreter "bash"
    code "sed -i 's/Connector port=\".*\" protocol=\"HTTP\\/1.1\"$/Connector port=\"#{node['tomcat']['mrp_port']}\" protocol=\"HTTP\\/1.1\"/g' /etc/tomcat7/server.xml"
    not_if "grep 'Connector port=\"#{node['tomcat']['mrp_port']}\" protocol=\"HTTP/1.1\"$' /etc/tomcat7/server.xml"
    notifies :restart, "service[tomcat7]", :immediately
end

# Install the MRP app, restart the Tomcat service if necessary
remote_file 'mrp_app' do
    source 'https://github.com/Microsoft/PartsUnlimitedMRP/raw/master/builds/mrp.war'
    path '/var/lib/tomcat7/webapps/mrp.war'
    action :create
    notifies :restart, "service[tomcat7]", :immediately
end

# Ensure Tomcat is running
service 'tomcat7' do
    action :start
end

remote_file 'ordering_service' do
    source 'https://github.com/Microsoft/PartsUnlimitedMRP/raw/master/builds/ordering-service-0.1.0.jar'
    path './ordering-service-0.1.0.jar'
    action :create
    notifies :run, "script[stop_ordering_service]", :immediately
end

# Kill the ordering service
script 'stop_ordering_service' do
    interpreter "bash"
    # Only run when notifed
    action :nothing
    code "pkill -f ordering-service"
    only_if "pgrep -f ordering-service"
end

# Start the ordering service. 
script 'start_ordering_service' do
    interpreter "bash"
    code "/usr/lib/jvm/java-8-openjdk-amd64/bin/java -jar ordering-service-0.1.0.jar &"
    not_if "pgrep -f ordering-service"
end



================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/M04/Puppet/final/init.pp
================================================
class mrpapp {
  class { 'configuremongodb': }
  class { 'configurejava': }
  class { 'createuserandgroup': }
  class { 'configuretomcat': }
  class { 'deploywar': }
  class { 'orderingservice': }
}

class configuremongodb {
  include wget
  class { 'mongodb': }->

  wget::fetch { 'mongorecords':
    source => 'https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/MongoRecords.js',
    destination => '/tmp/MongoRecords.js',
    timeout => 0,
  }->
  exec { 'insertrecords':
    command => 'mongo ordering /tmp/MongoRecords.js',
    path => '/usr/bin:/usr/sbin',
    unless => 'test -f /tmp/initcomplete'
  }->
  file { '/tmp/initcomplete':
    ensure => 'present',
  }
}

class configurejava {
  include apt
  $packages = ['openjdk-8-jdk', 'openjdk-8-jre']

  apt::ppa { 'ppa:openjdk-r/ppa': }->
  package { $packages:
     ensure => 'installed',
  }
}


class createuserandgroup {

group { 'tomcat':
  ensure => 'present',
  gid    => '10003',
 }

user { 'tomcat':
  ensure           => 'present',
  gid              => '10003',
  home             => '/tomcat',
  password         => '!',
  password_max_age => '99999',
  password_min_age => '0',
  uid              => '1003',
 }

}

class configuretomcat {
  class { 'tomcat': }
  require createuserandgroup


 tomcat::instance { 'default':
  catalina_home => '/var/lib/tomcat7',
  install_from_source => false,
  package_name => ['tomcat7','tomcat7-admin'],
 }->

 tomcat::config::server::tomcat_users {
 'tomcat':
   catalina_base => '/var/lib/tomcat7',
   element  => 'user',
   password => 'password',
   roles => ['manager-gui','manager-jmx','manager-script','manager-status'];
 'tomcat7':
   catalina_base => '/var/lib/tomcat7',
   element  => 'user',
   password => 'password',
   roles => ['manager-gui','manager-jmx','manager-script','manager-status'];
 }->

 tomcat::config::server::connector { 'tomcat7-http':
  catalina_base => '/var/lib/tomcat7',
  port => '9080',
  protocol => 'HTTP/1.1',
  connector_ensure => 'present',
  server_config => '/etc/tomcat7/server.xml',
 }->

 tomcat::service { 'default':
  use_jsvc => false,
  use_init => true,
  service_name => 'tomcat7',
 }

}

class deploywar {
  require configuretomcat

  tomcat::war { 'mrp.war':
    catalina_base => '/var/lib/tomcat7',
    war_source => 'https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/builds/mrp.war',
  }

 file { '/var/lib/tomcat7/webapps/':
   path => '/var/lib/tomcat7/webapps/',
   ensure => 'directory',
   recurse => 'true',
   mode => '777',
 }

}

class orderingservice {
  package { 'openjdk-7-jre':
    ensure => 'installed',
  }

  file { '/opt/mrp':
    ensure => 'directory'
  }->
  wget::fetch { 'orderingsvc':
    source => 'https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/builds/ordering-service-0.1.0.jar',
    destination => '/opt/mrp/ordering-service.jar',
    cache_dir => '/var/cache/wget',
    timeout => 0,
  }->
  
  exec { 'stoporderingservice':
    command => "pkill -f ordering-service",
    path => '/bin:/usr/bin:/usr/sbin',
    onlyif => "pgrep -f ordering-service"
  }->

  exec { 'stoptomcat':
    command => 'service tomcat7 stop',
    path => '/bin:/usr/bin:/usr/sbin',
    onlyif => "test -f /etc/init.d/tomcat7",
  }->
  exec { 'orderservice':
    command => 'java -jar /opt/mrp/ordering-service.jar &',
    path => '/usr/bin:/usr/sbin:/usr/lib/jvm/java-8-openjdk-amd64/bin',
  }->
  exec { 'wait':
    command => 'sleep 20',
    path => '/bin',
    notify => Tomcat::Service['default']
  }
}



================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod03/python-ci-example-master/README.md
================================================
---
layout: page
title:  DevOps200.1x Primciples and Practices - M01 Azure Automation Labs
category: IaC
order: 1
---


<h3><span style="color: #0000CD;"> Introduction</span></h3> 



Continuous integration (CI) is one of the Agile and DevOps software development practices. It helps development teams avoid  merge conflicts by setting up a continuous merging of new code updates into a shared central repository.

Automating the build and testing of code each time one of your team members commit a change to your version control is one of the best practices in DevOps. This practice adds the "fail-fast" paradigm for your application development and an iterative development approach.

Continuous integration is about delivering small chunk of code continuously which improves a development team productivity and helps them fix bugs quickly before the release and deployment phases.


There are several CI tools like Jenkins, Buildbot, TravisCI, GoCD and Team Foundation Server.

<h3><span style="color: #0000CD;">  Preparing Our Application</span></h3> 

In this practice lab, we are going to work on a Python project. The purpose of this lab is creating a system that trigger a list of tasks once a developer push a code to a share code repository. 

We are going to use:

- Python 3.5
- Python Virtualenv to create an isolated environment for our application
- Unittest: A unit testing framework for Python
- Github: A web-based Git version control repository hosting service
- CircleCI: A hosted continuous integration testing tool integrated with code management services such as GitHub

This is the structure of our code:

```

app/
├── __init__.py
├── src
│   ├── app.py
│   ├── __init__.py
└── tests
    ├── app-test.py
    └── __init__.py
.gitignore
.travisci
__init__.py
README.md    
```

Where app.py is the source of our application, app-test.py is the test case and all of the \__init\__.py files are empty.

You can also download the .gitignore file from [this repository](https://github.com/github/gitignore/blob/master/Python.gitignore).

You can use Python Virtualenv and create an isolated environment. You can download virtualenv source from [here](https://pypi.python.org/pypi/virtualenv) and execute the setup.py script to install it. To activate your virtual environment execute:


```
python3 -m venv /path/to/new/virtual/environment
```

If you are using Linux.

```
c:\>c:\Python35\python -m venv c:\path\to\myenv
```

If you are using Windows.

If everything is fine, let's activate it:

```
. /path/to/new/virtual/environment/bin/activate
```

Our app.py is a simple application that returns the sum of two numbers:

```
def my_function(param1, param2):
    return param1 + param2   
```

<h3><span style="color: #0000CD;">  Unit Testing</span></h3> 

In order to test our application, we are going to write our a test scenario using Python unittest (tests/app-test.py):

```
import unittest
from app.src.app import my_function


class MyTest(unittest.TestCase):
    def test_my_function(self):
        self.assertEqual(my_function(1, 1), 2)
        self.assertEqual(my_function(1, -1), 0)
        self.assertEqual(my_function(0, 0), 0)
        self.assertEqual(my_function(-1, -1), -2)
        self.assertEqual(my_function(1.0, 1), 2)        
        self.assertEqual(my_function(1.1, 1.1), 2.2)        
        
        
        
if __name__ == '__main__':
    unittest.main()        
```

In the previous test code, we tested different scenarios like summing up two negative integers or two floats. It is a good practice to think about the best possible scenarios and implement the suitable test cases in order to reduce the number of bugs.

You can execute this test case using the following command:

```
python app/tests/app-test.py 
```

If tests run without any problem you should see:

```
.
----------------------------------------------------------------------
Ran 1 test in 0.000s

OK
```

If you have one or more problems with your test assertions, the test will not pass.

For example:

```
import unittest
from app.src.app import my_function


class MyTest(unittest.TestCase):
    def test_my_function(self):
        # 1 + 1 = 4
        self.assertEqual(my_function(1, 1), 4)
        
        
        
if __name__ == '__main__':
    unittest.main()        
```

The output of the test execution will be similar to the following:

```
F
======================================================================
FAIL: test_my_function (__main__.MyTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "app/tests/app-test.py", line 7, in test_my_function
    self.assertEqual(my_function(1, 1), 4)
AssertionError: 2 != 4

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
```

<h3><span style="color: #0000CD;">Dependencies</span></h3> 

When you use a programming language to develop your application, you usually need to install libraries. This is the case for Python and that's why we need to declare our dependencies. This is done in the requirements.txt file using this command:

```
pip freeze > requirements.txt
```

In this project, we are not using any additional library, that's why our requirements.txt will be empty but always remember this step.

In order to integrate the Travis CI workflow, we should create the configuration file (.travis.yml). 
This file will tell Travis CI 



You can customize your build environment and add the set of steps in this file. 

Travis CI uses .travis.yml file in the root of your repository to learn about your project environment, how you want your builds to be executed, what kind of tests to perform and other information like emails, Campfire and IRC rooms to notify about build failures.

This is the file we are going to use:

```
language: python
python:
  - "3.5"
# command to install dependencies
install:
  - pip install -r requirements.txt
# command to run tests
script:
  - export PYTHONPATH=$PYTHONPATH:$(pwd)
  - python app/tests/app-test.py
```

<h3><span style="color: #0000CD;">Setup Our Git</span></h3> 

Now that we finished writing our code, the .gitignore file, the test and the Travis CI configuration, we need to create a Github repository and link our Travis CI to our Github account in order to import the new project.


```
git init
git add .
git commit -m "First commit"
git remote add origin <remote repository URL>
git push origin master
```

Don't forget to change  the <remote repository URL> by its real value, you can get it from your Github repository:

![repository URL](images/url.png "repository URL")

# Setup Travis CI

Go to your Travis CI dashboard, connect your Github account then sync your repositories and add the new project. This will generate your first build and you can see whether your build passes or no.

![Build History ](images/buids.png "Build History")

After every code commit, a build will start automatically and you will be notified by email on its status.


<h3><span style="color: #0000CD;">   Managing Pull Requests</span></h3> 

Now, if your are working on a different branch than the master, which is the case for all development teams, you need to make a pull request then merge your code. Let's try to test this:

Create the branch "dev" on your local machine:

```
git checkout -b dev
```

Add your modifications then push them to the dev branch:

```
git push origin dev
```

Once your modifications are added to the remote dev branch, Circle CI will trigger a new build for the dev branch and you will notice that you can make a pull request on the master branch:

![Git Pull Request](images/pull.png "Git Pull Request")

If the pull request is accepted an merged with the master branch, our CI tool will trigger a new build under the "Pull Requests" tab:

![Circle CI Pull Request Build](images/pr.png "Circle CI Pull Request Build")



<h3><span style="color: #0000CD;">  Conclusion </span></h3> 

During this practice lab, we created an application using Python using Virtualenv for the environment isolation then we created a Github repository for this application and linked it to our Travis CI account.

The continuous build and test were described in our .travis.yml file. 

It is possible to add more advanced features like ChatOps using Slack, IRC or any alternative, add more steps to your integration pipeline like creating a Docker image or deploying to a Azure Web App.. etc


























================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod03/python-ci-example-master/__init__.py
================================================
[Empty file]


================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod03/python-ci-example-master/requirements.txt
================================================
[Empty file]


================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod03/python-ci-example-master/.travis.yml
================================================
language: python
python:
  - "3.5"
# command to install dependencies
install:
  - pip install -r requirements.txt
# command to run tests
script:
  - export PYTHONPATH=$PYTHONPATH:$(pwd)
  - python app/tests/app-test.py



================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod03/python-ci-example-master/app/__init__.py
================================================
[Empty file]


================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod03/python-ci-example-master/app/src/__init__.py
================================================
[Empty file]


================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod03/python-ci-example-master/app/src/app.py
================================================
def my_function(param1, param2):
    return param1 + param2
    
    



================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod03/python-ci-example-master/app/tests/__init__.py
================================================
[Empty file]


================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod03/python-ci-example-master/app/tests/app-test.py
================================================
import unittest
from app.src.app import my_function


class MyTest(unittest.TestCase):
    def test_my_function(self):
        self.assertEqual(my_function(1, 1), 2)
        self.assertEqual(my_function(1, -1), 0)
        self.assertEqual(my_function(0, 0), 0)
        self.assertEqual(my_function(-1, -1), -2)
        self.assertEqual(my_function(1.0, 1), 2)        
        self.assertEqual(my_function(1.1, 1.1), 2.2)        
        
        
        
if __name__ == '__main__':
    unittest.main()        



================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod04/load_testing_locust-master/README.md
================================================
# Introduction


There are several types of test types in software engineering and load testing is one of the most common tests.

The purpose of this test is checking if a software can handle what it was designed to handle and identifying the blottleneck and any performance degradation. 

This is performed by putting demand on a application under normal and peak load conditions. Load testing could help you determine some metrics like the Mean Time Between Failure (MTBF) and Mean Time To Failure (MTTF).

According to [Microsoft guide Performance Testing Guidance for Web Applications](https://msdn.microsoft.com/en-us/library/bb924357.aspx), a load test enables you to measure response times, throughput rates, and resource-utilization levels, and to identify your application’s breaking point, assuming that the breaking point occurs below the peak load condition. 

As a conclusion, load testing helps you to:

- Determine the throughput required to support the anticipated peak production load.
- Determine the adequacy of a hardware environment.
- Evaluate the adequacy of a load balancer.
- Detect concurrency issues.
- Detect functionality errors under load.
- Collect data for scalability and capacity-planning purposes.
- Help to determine how many users the application can handle before performance is compromised.
- Help to determine how much load the hardware can handle before resource utilization limits are exceeded. 

Gatling, JMeter, Locust are some of the load testing tools.

In this practice lab, we are going to create a simple REST API and write some load test scenarios.

# Preparing Our Application


In this practice lab, we are going to create a minimal RESTful API using the Flask framework. Our application will let the user get a list of software testing types or add a new type.

The purpose of this lab is to load test our RESTful API using Locust.

We are going to use:

- Python 3.5
- Python Virtualenv to create an isolated environment for our application
- Locust: A load testing framework

This is the structure of our project folder:

```
app/
├── app.py
└── __init__.py
__init__.py
.gitignore
```

You can also download the .gitignore file from [this repository](https://github.com/github/gitignore/blob/master/Python.gitignore).

Let's start by creating the virtual environment for our Flask application. 

```
python3 -m venv /path/to/new/virtual/environment
```

If you are using Linux.

```
c:\>c:\Python35\python -m venv c:\path\to\myenv
```

If you are using Windows.

If everything is fine, let's activate it:

```
. /path/to/new/virtual/environment/bin/activate
```

In order to use Flask, you need to install it from the Python Package Index using PIP:

```
pip install flask
```

Let's create our application files:

```
mkdir project
wget -O .gitignore "https://github.com/github/gitignore/blob/master/Python.gitignore" 2> templog
touch __init__.py
mkdir app
touch app/app.py
touch app/__init__.py
```

Paste this code inside the app.py file:

```
from flask import Flask, jsonify, request

app = Flask(__name__)

testing_types = [
  { 'name': 'unit testing', 'description': 'testing individual units of source code' }
]


@app.route('/tests')
def get_tests():
  return jsonify(testing_types)


@app.route('/tests', methods=['POST'])
def add_test():
  testing_types.append(request.get_json())
  return '', 204
  
  
  
if __name__ == '__main__':
    app.run(debug=True)  
    
```

The above code has two functions:
- get_tests : Used to get the list of tests from the testing\_types dictionary 
- add_tests : Used to add a test to the testing\_types dictionary
    
Our initial dictionary contains one test type:

```
testing_types = [
  { 'name': 'unit testing', 'description': 'testing individual units of source code' }
]
```

In order to run our API, type:

```
python app/app.py
```

You should see something similar to the following output:

```
python app/app.py 
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 179-596-761
```

Our web server runs on: http://127.0.0.1:5000/ and in order to test it we can use a curl request. You can use your terminal or a graphical tool like Postman, Swagger or any other alternative.

This is our curl request to get the testing types list:

```
curl -X GET  http://127.0.0.1:5000/tests
```

At this stage, it should return:

```
[
  {
    "description": "testing individual units of source code", 
    "name": "unit testing"
  }
]
```

Let's try adding another type of test:

```
curl -X POST -H "Content-Type: application/json" -d '{
  "name": "load testing",
  "description": "checking if a software can handle the expected load"
}' http://localhost:5000/tests
```

After executing the last POST request, we can verify using another GET:

```
curl -X GET  http://127.0.0.1:5000/tests
```

We should see the two types of tests:

```
[
  {
    "description": "testing individual units of source code", 
    "name": "unit testing"
  }, 
  {
    "description": "checking if a software can handle the expected load", 
    "name": "load testing"
  }
]
```

# Load Testing Our RESTful API Using Locust

Locust is described as an easy-to-use, distributed, user load testing tool. It is intended for load-testing web sites (or other systems) and figuring out how many concurrent users a system can handle.

A swarm of locusts will attack your website. The behavior of each locust (or test user if you will) is defined by you and the swarming process is monitored from a web UI in real-time. This will help you battle test and identify bottlenecks in your code before letting real users in.

Since Locust is event-based, it is possible to support concurrent users on a single machine. 

Start by installing Locust:

```
pip install locustio
```

Now in the project root directory, create the locustfile.py file that will describe our testing scenarios:

```
from locust import HttpLocust, TaskSet, task

class UserBehavior(TaskSet):

    @task
    def get_tests(self):
        self.client.get("/tests")
        
    @task
    def put_tests(self):
        self.client.post("/tests", {
						  "name": "load testing",
						  "description": "checking if a software can handle the expected load"
						})
        

class WebsiteUser(HttpLocust):
    task_set = UserBehavior
    
```

In this file we told Locust to create two test tasks:

- The first one will execute a GET request to list the test types we stored in our dictionary
- The second one will execute a POST request to add a new testing type

Now start our Flask API using ``` python app/app.py ``` and Locust using ``` locust --host=http://localhost:5000 ```.

Make sure to change ``` http://localhost:5000 ``` by the real address of your application.

The web interface of Locust is available by default at ``` http://localhost:8089 ```

![Locust Home Page](images/locust_home.png "Locust Home Page")

Say our API should support a number of 10000 user. We can start a test by giving this value to Locust, using the web interface, as well as the the hatch rate which is the number of users spawned by second.

After clicking on "Start spawning", you can see different live statistics about your tasks like the number of requests, fails, and other statistics about the response time.

![Locust Statistics](images/locust_stats.png "Locust Statistics")

Using the Charts view, we can determine some fact-based conclusions. For instance, if we don't accept a response time greater than 450ms, we know that our application cannot handle more than 117 request per second and that the max number of simultaneous users should be less than 350.


# Conclusion

In this practice lab, we created a RESTful API and tested its performance using Locust. Using the results from our tests, we determined how our API can behave with a certain number of users and requests.

Load testing is an important practice since it prevents organizations from downtimes and failures due to errors like the timeout or memory overflows. Load testing gives meaningful results when tests are done against a similar environment to production (configurations, code, physical resources like disks and memory ..etc).



================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod04/load_testing_locust-master/__init__.py
================================================
[Empty file]


================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod04/load_testing_locust-master/locustfile.py
================================================
from locust import HttpLocust, TaskSet, task

class UserBehavior(TaskSet):

    @task
    def get_tests(self):
        self.client.get("/tests")
        
    @task
    def put_tests(self):
        self.client.post("/tests", {
						  "name": "load testing",
						  "description": "checking if a software can handle the expected load"
						})
        

class WebsiteUser(HttpLocust):
    task_set = UserBehavior



================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod04/load_testing_locust-master/app/__init__.py
================================================
[Empty file]


================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod04/load_testing_locust-master/app/app.py
================================================
from flask import Flask, jsonify, request

app = Flask(__name__)

testing_types = [
  { 'name': 'unit testing', 'description': 'testing individual units of source code' }
]

@app.route('/')
def hello():
  return jsonify({"message": "hello"})
  

@app.route('/tests')
def get_tests():
  return jsonify(testing_types)


@app.route('/tests', methods=['POST'])
def add_test():
  testing_types.append(request.get_json())
  return '', 204
  
  
  
if __name__ == '__main__':
    app.run(debug=True)  
    
    
    
    
    




================================================
FILE: Labfiles/DevOps200.2x-InfrastructureasCode/DeployusingChef/final/default.rb
================================================
#
# Cookbook Name:: mrpapp-2
# Recipe:: default
#
# Copyright (c) 2015 The Authors, All Rights Reserved.

# Runs apt-get update
include_recipe "apt"

# Add the Open JDK apt repo
apt_repository 'openJDK' do
    uri 'ppa:openjdk-r/ppa'
    distribution 'trusty'
end

# Install JDK and JRE
apt_package 'openjdk-8-jdk-headless' do
    action :install
end

apt_package 'openjdk-8-jre-headless' do
    action :install
end

# Set Java environment variables
ENV['JAVA_HOME'] = "/usr/lib/jvm/java-8-openjdk-amd64"
ENV['PATH'] = "#{ENV['PATH']}:/usr/lib/jvm/java-8-openjdk-amd64/bin"

# Install MongoDB
apt_package 'mongodb' do
    action :install
end

# Install Tomcat 7
apt_package 'tomcat7' do
    action :install
end

# Load MongoDB data 
remote_file 'mongodb_data' do
    source 'https://github.com/Microsoft/PartsUnlimitedMRP/raw/master/deploy/MongoRecords.js'
    path './MongoRecords.js'
    action :create
    notifies :run, "script[mongodb_import]", :immediately
end

script 'mongodb_import' do
    interpreter "bash"
    action :nothing
    code "mongo ordering MongoRecords.js"
end

# Set tomcat port 
script 'tomcat_port' do 
    interpreter "bash"
    code "sed -i 's/Connector port=\".*\" protocol=\"HTTP\\/1.1\"$/Connector port=\"#{node['tomcat']['mrp_port']}\" protocol=\"HTTP\\/1.1\"/g' /etc/tomcat7/server.xml"
    not_if "grep 'Connector port=\"#{node['tomcat']['mrp_port']}\" protocol=\"HTTP/1.1\"$' /etc/tomcat7/server.xml"
    notifies :restart, "service[tomcat7]", :immediately
end

# Install the MRP app, restart the Tomcat service if necessary
remote_file 'mrp_app' do
    source 'https://github.com/Microsoft/PartsUnlimitedMRP/raw/master/builds/mrp.war'
    path '/var/lib/tomcat7/webapps/mrp.war'
    action :create
    notifies :restart, "service[tomcat7]", :immediately
end

# Ensure Tomcat is running
service 'tomcat7' do
    action :start
end

remote_file 'ordering_service' do
    source 'https://github.com/Microsoft/PartsUnlimitedMRP/raw/master/builds/ordering-service-0.1.0.jar'
    path './ordering-service-0.1.0.jar'
    action :create
    notifies :run, "script[stop_ordering_service]", :immediately
end

# Kill the ordering service
script 'stop_ordering_service' do
    interpreter "bash"
    # Only run when notifed
    action :nothing
    code "pkill -f ordering-service"
    only_if "pgrep -f ordering-service"
end

# Start the ordering service. 
script 'start_ordering_service' do
    interpreter "bash"
    code "/usr/lib/jvm/java-8-openjdk-amd64/bin/java -jar ordering-service-0.1.0.jar &"
    not_if "pgrep -f ordering-service"
end



================================================
FILE: Labfiles/DevOps200.2x-InfrastructureasCode/Puppet/final/init.pp
================================================
class mrpapp {
  class { 'configuremongodb': }
  class { 'configurejava': }
  class { 'createuserandgroup': }
  class { 'configuretomcat': }
  class { 'deploywar': }
  class { 'orderingservice': }
}

class configuremongodb {
  include wget
  class { 'mongodb': }->

  wget::fetch { 'mongorecords':
    source => 'https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/MongoRecords.js',
    destination => '/tmp/MongoRecords.js',
    timeout => 0,
  }->
  exec { 'insertrecords':
    command => 'mongo ordering /tmp/MongoRecords.js',
    path => '/usr/bin:/usr/sbin',
    unless => 'test -f /tmp/initcomplete'
  }->
  file { '/tmp/initcomplete':
    ensure => 'present',
  }
}

class configurejava {
  include apt
  $packages = ['openjdk-8-jdk', 'openjdk-8-jre']

  apt::ppa { 'ppa:openjdk-r/ppa': }->
  package { $packages:
     ensure => 'installed',
  }
}


class createuserandgroup {

group { 'tomcat':
  ensure => 'present',
  gid    => '10003',
 }

user { 'tomcat':
  ensure           => 'present',
  gid              => '10003',
  home             => '/tomcat',
  password         => '!',
  password_max_age => '99999',
  password_min_age => '0',
  uid              => '1003',
 }

}

class configuretomcat {
  class { 'tomcat': }
  require createuserandgroup


 tomcat::instance { 'default':
  catalina_home => '/var/lib/tomcat7',
  install_from_source => false,
  package_name => ['tomcat7','tomcat7-admin'],
 }->

 tomcat::config::server::tomcat_users {
 'tomcat':
   catalina_base => '/var/lib/tomcat7',
   element  => 'user',
   password => 'password',
   roles => ['manager-gui','manager-jmx','manager-script','manager-status'];
 'tomcat7':
   catalina_base => '/var/lib/tomcat7',
   element  => 'user',
   password => 'password',
   roles => ['manager-gui','manager-jmx','manager-script','manager-status'];
 }->

 tomcat::config::server::connector { 'tomcat7-http':
  catalina_base => '/var/lib/tomcat7',
  port => '9080',
  protocol => 'HTTP/1.1',
  connector_ensure => 'present',
  server_config => '/etc/tomcat7/server.xml',
 }->

 tomcat::service { 'default':
  use_jsvc => false,
  use_init => true,
  service_name => 'tomcat7',
 }

}

class deploywar {
  require configuretomcat

  tomcat::war { 'mrp.war':
    catalina_base => '/var/lib/tomcat7',
    war_source => 'https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/builds/mrp.war',
  }

 file { '/var/lib/tomcat7/webapps/':
   path => '/var/lib/tomcat7/webapps/',
   ensure => 'directory',
   recurse => 'true',
   mode => '777',
 }

}

class orderingservice {
  package { 'openjdk-7-jre':
    ensure => 'installed',
  }

  file { '/opt/mrp':
    ensure => 'directory'
  }->
  wget::fetch { 'orderingsvc':
    source => 'https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/builds/ordering-service-0.1.0.jar',
    destination => '/opt/mrp/ordering-service.jar',
    cache_dir => '/var/cache/wget',
    timeout => 0,
  }->
  
  exec { 'stoporderingservice':
    command => "pkill -f ordering-service",
    path => '/bin:/usr/bin:/usr/sbin',
    onlyif => "pgrep -f ordering-service"
  }->

  exec { 'stoptomcat':
    command => 'service tomcat7 stop',
    path => '/bin:/usr/bin:/usr/sbin',
    onlyif => "test -f /etc/init.d/tomcat7",
  }->
  exec { 'orderservice':
    command => 'java -jar /opt/mrp/ordering-service.jar &',
    path => '/usr/bin:/usr/sbin:/usr/lib/jvm/java-8-openjdk-amd64/bin',
  }->
  exec { 'wait':
    command => 'sleep 20',
    path => '/bin',
    notify => Tomcat::Service['default']
  }
}



================================================
FILE: src/Backend/IntegrationService/gradlew
================================================
#!/usr/bin/env bash

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn ( ) {
    echo "$*"
}

die ( ) {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
esac

# For Cygwin, ensure paths are in UNIX format before anything is touched.
if $cygwin ; then
    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
fi

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >&-
APP_HOME="`pwd -P`"
cd "$SAVED" >&-

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=$((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$args0" ;;
        (2) set -- "$args0" "$args1" ;;
        (3) set -- "$args0" "$args1" "$args2" ;;
        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
function splitJvmOpts() {
    JVM_OPTS=("$@")
}
eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"

exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"



================================================
FILE: src/Backend/IntegrationService/gradlew.bat
================================================
@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS=

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto init

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto init

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:init
@rem Get command-line arguments, handling Windowz variants

if not "%OS%" == "Windows_NT" goto win9xME_args
if "%@eval[2+2]" == "4" goto 4NT_args

:win9xME_args
@rem Slurp the command line arguments.
set CMD_LINE_ARGS=
set _SKIP=2

:win9xME_args_slurp
if "x%~1" == "x" goto execute

set CMD_LINE_ARGS=%*
goto execute

:4NT_args
@rem Get arguments from the 4NT Shell from JP Software
set CMD_LINE_ARGS=%$

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar

@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega



================================================
FILE: src/Backend/IntegrationService/IntegrationService.iml
================================================
<?xml version="1.0" encoding="UTF-8"?>
<module external.linked.project.id="IntegrationService" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="false">
    <output url="file://$MODULE_DIR$/build/classes/main" />
    <output-test url="file://$MODULE_DIR$/build/classes/test" />
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" type="java-test-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.gradle" />
      <excludeFolder url="file://$MODULE_DIR$/build" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework.boot:spring-boot-starter:1.2.2.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework:spring-web:4.1.5.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework:spring-context:4.1.5.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: com.fasterxml.jackson.core:jackson-databind:2.4.5" level="project" />
    <orderEntry type="library" exported="" name="Gradle: com.microsoft.azure:azure-storage:2.0.0" level="project" />
    <orderEntry type="library" exported="" name="Gradle: commons-logging:commons-logging:1.2" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework:spring-core:4.1.5.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework:spring-beans:4.1.5.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: aopalliance:aopalliance:1.0" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework:spring-aop:4.1.5.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework:spring-expression:4.1.5.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework.boot:spring-boot:1.2.2.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.yaml:snakeyaml:1.14" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework.boot:spring-boot-autoconfigure:1.2.2.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.slf4j:slf4j-api:1.7.10" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.slf4j:jcl-over-slf4j:1.7.10" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.slf4j:jul-to-slf4j:1.7.10" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.slf4j:log4j-over-slf4j:1.7.10" level="project" />
    <orderEntry type="library" exported="" name="Gradle: ch.qos.logback:logback-core:1.1.2" level="project" />
    <orderEntry type="library" exported="" name="Gradle: ch.qos.logback:logback-classic:1.1.2" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework.boot:spring-boot-starter-logging:1.2.2.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: com.fasterxml.jackson.core:jackson-annotations:2.4.0" level="project" />
    <orderEntry type="library" exported="" name="Gradle: com.fasterxml.jackson.core:jackson-core:2.4.5" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.apache.commons:commons-lang3:3.3.2" level="project" />
  </component>
</module>


================================================
FILE: src/Backend/IntegrationService/gradle/wrapper/gradle-wrapper.properties
================================================
#Fri Mar 06 11:46:13 NZDT 2015
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-1.11-bin.zip



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/Constants.java
================================================
package integration;


public class Constants {
    //Ensure that the constants file cannot be initialized.
    private Constants(){}

    public static final int SCHEDULED_INTERVAL = 30000;
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/Main.java
================================================
package integration;

import integration.scheduled.UpdateProductProcessTask;
import integration.scheduled.CreateOrderProcessTask;
import org.springframework.boot.SpringApplication;

public class Main {
	public static void main(String[] args) {
		//Adding the scheduled task classes to the spring application to run in background threads.
		SpringApplication.run(new Object[] { CreateOrderProcessTask.class, UpdateProductProcessTask.class }, new String[0]);
	}
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/infrastructure/ConfigurationHelpers.java
================================================
package integration.infrastructure;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Properties;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

/**
 * The ConfigurationHelpers class is responsible for abstracting the logic of getting property types based on property names.
 */
public class ConfigurationHelpers {
//    private final static Logger log = MakeLogger();
//     private static Logger MakeLogger(){
//         try{
//             return LoggerFactory.getLogger(ConfigurationHelpers.class);
//         }
//         catch(Exception ex)
//         {
//             return null;
//         }
//     }


    public static String getString(String name) {
        try {
            return s_props.getProperty(name);
        } catch (Exception ex)
        {
            //log.error("An error occurred resolving string " + name + ". Exception : " + ex.toString());
        }
        return "";
    }

    /**
     * return the configuration value in the type of a integer
     * @param name - the name/key of the configuration value.
     * @return the configuration value associated with the name/key provided.
     */
    public static int getInt(String name) {
        try {
            String prop = s_props.getProperty(name);
            return Integer.parseInt(prop);
        } catch (Exception ex) {
            //log.error("An error occurred resolving int " + name + ". Exception : " + ex.toString());
        }
        return 0;
    }

    /**
     * Load the configuration properties for the propFileName
     * @param propFileName - name of the properties file
     * @return a Properties object containing all key value pairs from the properties file.
     * @throws java.io.IOException
     */
    private static Properties getPropValues(String propFileName) throws IOException {

        Properties props = new Properties();

        ClassLoader classLoader = ConfigurationHelpers.class.getClassLoader();
        InputStream inputStream = classLoader.getResourceAsStream(propFileName);

        props.load(inputStream);
        if (inputStream == null) {
            throw new FileNotFoundException("property file '" + propFileName + "' not found in the classpath");
        }

        return props;
    }

    private static Properties getProperties() {
        return s_props;
    }

    static {
        try {
            s_props = getPropValues("application.properties");
        } catch (Exception e) {
            s_props = new Properties();
        }
    }

    private static Properties s_props;
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/infrastructure/ConfigurationManager.java
================================================
package integration.infrastructure;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

/**
 * The ConfigurationManager class is responsible for wrapping calls to the application properties.
 */
public class ConfigurationManager {

    public ConfigurationManager()
    {
    }

    public static String getAzureStorageConnectionString() {
        return ConfigurationHelpers.getString("azure.storage.connectionstring");
    }

    public static String getMrpEndpoint() {
        return ConfigurationHelpers.getString("mrp.endpoint");
    }

    public static String getAzureOrderQueue() {
        return ConfigurationHelpers.getString("azure.storage.queue.orders");
    }

    public static String getAzureInventoryQueue(){
        return ConfigurationHelpers.getString("azure.storage.queue.inventory");
    }

    public static int getAzureQueueTimeout() {
        return ConfigurationHelpers.getInt("azure.storage.queue.message");
    }

}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/QueueResponse.java
================================================
package integration.models;

import com.microsoft.azure.storage.StorageException;
import com.microsoft.azure.storage.queue.CloudQueueMessage;
import java.io.IOException;

/**
 * This class is responsible for wrapping responses from the queue service.
 * @param <T>
 */
public class QueueResponse <T> {

    private final CloudQueueMessage queueMessage;
    private final T responseBody;

    public QueueResponse(CloudQueueMessage queueMessage, T responseBody){
        this.queueMessage = queueMessage;
        this.responseBody = responseBody;
    }

    public CloudQueueMessage getQueueMessage() {
        return queueMessage;
    }

    public T getResponseBody() throws StorageException, IOException {
        return responseBody;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/mrp/CatalogItem.java
================================================
package integration.models.mrp;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown = true)
public class CatalogItem {
    private String skuNumber;
    private String description;
    private String unit;
    private String price;
    private int inventory;
    private int leadTime;

    public String getSkuNumber() {
        return skuNumber;
    }

    public String getDescription() {
        return description;
    }

    public String getUnit() {
        return unit;
    }

    public String getPrice() {
        return price;
    }

    public int getInventory() {
        return inventory;
    }

    public int getLeadTime() {
        return leadTime;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/mrp/DeliveryAddress.java
================================================
package integration.models.mrp;

public class DeliveryAddress {

    private String street;
    private String city;
    private String state;
    private String postalCode;
    private String specialInstructions;

    public DeliveryAddress() {
    }

    public DeliveryAddress(String street, String city, String state, String postalCode) {
        setStreet(street);
        setCity(city);
        setState(state);
        setPostalCode(postalCode);
    }

    public String getStreet() {
        return street;
    }

    public void setStreet(String street) {
        this.street = street;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getPostalCode() {
        return postalCode;
    }

    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }

    public String getSpecialInstructions() {
        return specialInstructions;
    }

    public void setSpecialInstructions(String specialInstructions) {
        this.specialInstructions = specialInstructions;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/mrp/Order.java
================================================
package integration.models.mrp;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown = true)
public class Order {
    private String orderId;
    private String quoteId;
    private String orderDate;
    private String status;

    public Order() {

    }

    public String getOrderId() {
        return orderId;
    }

    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }

    public String getQuoteId() {
        return quoteId;
    }

    public void setQuoteId(String quoteId) {
        this.quoteId = quoteId;
    }

    public String getOrderDate() {
        return orderDate;
    }

    public void setOrderDate(String orderDate) {
        this.orderDate = orderDate;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }
}


================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/mrp/PhoneInfo.java
================================================
package integration.models.mrp;

public class PhoneInfo {
    private String phoneNumber;
    private String kind;

    public PhoneInfo() {

    }

    public PhoneInfo(String phoneNumber) {
        setPhoneNumber(phoneNumber);
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getKind() {
        return kind;
    }

    public void setKind(String kind) {
        this.kind = kind;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/mrp/Quote.java
================================================
package integration.models.mrp;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import integration.models.website.OrderItem;
import integration.models.website.OrderMessage;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.ArrayList;
import java.util.List;

@JsonIgnoreProperties(ignoreUnknown = true)
public class Quote {
    private String quoteId;
    private String customerName;
    private String dealerName;
    private String validUntil;
    private String city;
    private String postalCode;
    private String state;
    private double totalCost;
    private double discount;
    private List<QuoteItemInfo> quoteItems;

    public Quote() {
    }

    public Quote(OrderMessage message) {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-ddTHH:mm:ss");
        Calendar c = Calendar.getInstance();
        c.add(Calendar.DATE, 1);
    
        this.customerName = message.getCustomerName();
        this.dealerName = "Website";
        this.setCity(message.getCity());
        this.postalCode = message.getPostalCode();
        this.state = message.getState();
        this.totalCost = message.getTotalCost();
        this.discount = message.getDiscount();
        this.validUntil = dateFormat.format(c);
        this.quoteItems = new ArrayList<QuoteItemInfo>();
        
        for (OrderItem orderItem : message.getItems()){
            QuoteItemInfo quoteItem = new QuoteItemInfo(orderItem);
            this.quoteItems.add(quoteItem);
        }
    }

    public String getQuoteId() {
        return quoteId;
    }

    public void setQuoteId(String quoteId) {
        this.quoteId = quoteId;
    }

    public String getCustomerName() {
        return customerName;
    }

    public void setCustomerName(String customerName) {
        this.customerName = customerName;
    }

    public String getDealerName() {
        return dealerName;
    }

    public void setDealerName(String dealerName) {
        this.dealerName = dealerName;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getPostalCode() {
        return postalCode;
    }

    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public List<QuoteItemInfo> getQuoteItems() {
        return quoteItems;
    }

    public void setQuoteItems(List<QuoteItemInfo> quoteItems) {
        this.quoteItems = quoteItems;
    }

    public double getTotalCost() {
        return totalCost;
    }

    public void setTotalCost(double totalCost) {
        this.totalCost = totalCost;
    }

    public double getDiscount() {
        return discount;
    }

    public void setDiscount(double discount) {
        this.discount = discount;
    }

    public String getValidUntil() {
        return validUntil;
    }

    public void setValidUntil(String validUntil) {
        this.validUntil = validUntil;
    }
}




================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/mrp/QuoteItemInfo.java
================================================
package integration.models.mrp;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import integration.models.website.OrderItem;

@JsonIgnoreProperties(ignoreUnknown = true)
public class QuoteItemInfo {
    private String skuNumber;
    private double amount;

    public QuoteItemInfo(){
    }

    public QuoteItemInfo(OrderItem orderItem){
        setSkuNumber(orderItem.getSkuNumber());
        setAmount(orderItem.getPrice());
    }

    public String getSkuNumber() {
        return skuNumber;
    }

    public void setSkuNumber(String skuNumber) {
        this.skuNumber = skuNumber;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/mrp/ShipmentEventInfo.java
================================================
package integration.models.mrp;

public class ShipmentEventInfo {
    private String date;
    private String comments;

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public String getComments() {
        return comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/mrp/ShipmentRecord.java
================================================
package integration.models.mrp;

import integration.models.website.OrderMessage;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.ArrayList;
import java.util.List;

public class ShipmentRecord {
    private String orderId;
    private String deliveryDate;
    private List<ShipmentEventInfo> events;
    private DeliveryAddress deliveryAddress;
    private String contactName;
    private PhoneInfo primaryContactPhone;
    private PhoneInfo alternateContactPhone;

    public ShipmentRecord() {
        this.setEvents(new ArrayList());
    }

    public ShipmentRecord(OrderMessage message, String orderId) {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-ddTHH:mm:ss");
        Calendar c = Calendar.getInstance();
        c.add(Calendar.DATE, 14);
        
        setEvents(new ArrayList());
        setOrderId(orderId);
        setDeliveryDate(dateFormat.format(c));
        setDeliveryAddress(new DeliveryAddress(message.getAddress(), message.getCity(), message.getState(), message.getPostalCode()));
        setContactName(message.getCustomerName());
        setPrimaryContactPhone(new PhoneInfo(message.getPhone()));
    }

    public String getOrderId() {
        return orderId;
    }

    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }

    public String getDeliveryDate() {
        return deliveryDate;
    }

    public void setDeliveryDate(String deliveryDate) {
        this.deliveryDate = deliveryDate;
    }

    public List<ShipmentEventInfo> getEvents() {
        return events;
    }

    public void setEvents(List<ShipmentEventInfo> events) {
        this.events = events;
    }

    public DeliveryAddress getDeliveryAddress() {
        return deliveryAddress;
    }

    public void setDeliveryAddress(DeliveryAddress deliveryAddress) {
        this.deliveryAddress = deliveryAddress;
    }

    public String getContactName() {
        return contactName;
    }

    public void setContactName(String contactName) {
        this.contactName = contactName;
    }

    public PhoneInfo getPrimaryContactPhone() {
        return primaryContactPhone;
    }

    public void setPrimaryContactPhone(PhoneInfo primaryContactPhone) {
        this.primaryContactPhone = primaryContactPhone;
    }

    public PhoneInfo getAlternateContactPhone() {
        return alternateContactPhone;
    }

    public void setAlternateContactPhone(PhoneInfo alternateContactPhone) {
        this.alternateContactPhone = alternateContactPhone;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/website/OrderItem.java
================================================
package integration.models.website;

/**
 * This class is used to describe a product of the order from the website.
 */
public class OrderItem {
    private String skuNumber;
    private double price;

    public String getSkuNumber() {
        return skuNumber;
    }

    public void setSkuNumber(String skuNumber) {
        this.skuNumber = skuNumber;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/website/OrderMessage.java
================================================
package integration.models.website;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import java.util.List;

/**
 * This class is responsible for describing the order message that we receive from the website.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class OrderMessage {
    private String customerName;
    private String dealerName;
    private String orderDate;
    private String address;
    private String country;
    private String phone;
    private String city;
    private String postalCode;
    private String state;
    private double totalCost;
    private double discount;
    private List<OrderItem> items;

    public String getCustomerName() {
        return customerName;
    }

    public void setCustomerName(String customerName) {
        this.customerName = customerName;
    }

    public String getDealerName() {
        return dealerName;
    }

    public void setDealerName(String dealerName) {
        this.dealerName = dealerName;
    }

    public String getOrderDate() {
        return orderDate;
    }

    public void setOrderDate(String orderDate) {
        this.orderDate = orderDate;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getPostalCode() {
        return postalCode;
    }

    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public double getTotalCost() {
        return totalCost;
    }

    public void setTotalCost(double totalCost) {
        this.totalCost = totalCost;
    }

    public List<OrderItem> getItems() {
        return items;
    }

    public void setItems(List<OrderItem> items) {
        this.items = items;
    }

    public double getDiscount() {
        return discount;
    }

    public void setDiscount(double discount) {
        this.discount = discount;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/website/ProductItem.java
================================================
package integration.models.website;

import integration.models.mrp.CatalogItem;

/**
 * This class is used to describe the updates to the website product.
 */
public class ProductItem {

    private String skuNumber;
    private int inventory;
    private int leadTime;

    public ProductItem(){

    }

    public ProductItem(CatalogItem catalogItem){
        setInventory(catalogItem.getInventory());
        setSkuNumber(catalogItem.getSkuNumber());
        setLeadTime(catalogItem.getLeadTime());
    }

    public int getInventory() {
        return inventory;
    }

    public void setInventory(int inventory) {
        this.inventory = inventory;
    }

    public String getSkuNumber() {
        return skuNumber;
    }

    public void setSkuNumber(String skuNumber) {
        this.skuNumber = skuNumber;
    }

    public int getLeadTime() {
        return leadTime;
    }

    public void setLeadTime(int leadTime) {
        this.leadTime = leadTime;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/website/ProductMessage.java
================================================
package integration.models.website;

import integration.models.mrp.CatalogItem;
import java.util.ArrayList;
import java.util.List;

/**
 * This class is used to describe the list of products for the website to update.
 */
public class ProductMessage {

    private List<ProductItem> productList;

    public ProductMessage(){
        setProductList(new ArrayList<ProductItem>());
    }

    public ProductMessage(List<CatalogItem> catalogItems) {
        this();
        for(CatalogItem catalogItem: catalogItems){
            ProductItem inventoryItem = new ProductItem(catalogItem);
            this.productList.add(inventoryItem);
        }
    }

    public List<ProductItem> getProductList() {
        return productList;
    }

    public void setProductList(List<ProductItem> productList) {
        this.productList = productList;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/scheduled/CreateOrderProcessTask.java
================================================
package integration.scheduled;

import integration.Constants;
import integration.infrastructure.ConfigurationManager;
import integration.models.QueueResponse;
import integration.models.website.OrderMessage;
import integration.services.MrpConnectService;
import integration.services.QueueService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;

/**
 * Scheduled task for retrieving any new orders from the queue and integrating them into the MRP system.
 */
@EnableScheduling
public class CreateOrderProcessTask {

    private final static Logger log = LoggerFactory.getLogger(CreateOrderProcessTask.class);

    @Scheduled(fixedDelay = Constants.SCHEDULED_INTERVAL)
    public void scheduledTask() {
        try {
            String endpoint = ConfigurationManager.getMrpEndpoint();
            MrpConnectService mrpService = new MrpConnectService(endpoint);
            QueueService queueService = new QueueService(ConfigurationManager.getAzureOrderQueue(), OrderMessage.class);
            QueueResponse<OrderMessage> response;

            while ((response = queueService.getQueueMessage()) != null) {
                log.info("Found queue message. MessageId :" + response.getQueueMessage().getMessageId());
                mrpService.createNewOrder(response.getResponseBody());
                log.info("Created new order in MRP system. MessageId :" + response.getQueueMessage().getMessageId());
                queueService.deleteQueueMessage(response.getQueueMessage());
                log.info("Message removed from queue. MessageId :" + response.getQueueMessage().getMessageId());
            }
        } catch (Exception ex) {
            log.error("Exception thrown while retrieving queue message :" + ex.toString());
        }
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/scheduled/UpdateProductProcessTask.java
================================================
package integration.scheduled;

import integration.Constants;
import integration.infrastructure.ConfigurationManager;
import integration.models.mrp.CatalogItem;
import integration.models.website.ProductMessage;
import integration.services.MrpConnectService;
import integration.services.QueueService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;

import java.util.List;

/**
 * Scheduled tasks for querying the MRP system for catalog items and sending an update to the website.
 */
@EnableScheduling
public class UpdateProductProcessTask {
    private final static Logger log = LoggerFactory.getLogger(UpdateProductProcessTask.class);

    @Scheduled(fixedDelay = Constants.SCHEDULED_INTERVAL)
    public void scheduledTask() {
        try{
            MrpConnectService mrpService = new MrpConnectService(ConfigurationManager.getMrpEndpoint());
            List<CatalogItem> catalogItems = mrpService.getCatalogItems();

            if (catalogItems != null && !catalogItems.isEmpty()){
                ProductMessage message = new ProductMessage(catalogItems);
                QueueService queueService = new QueueService(ConfigurationManager.getAzureInventoryQueue(), ProductMessage.class);
                queueService.addQueueMessage(message);
            }
        }
        catch (Exception ex)
        {
            log.error("Exception thrown while processing catalog item inventory :" + ex.toString());
        }
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/services/MrpConnectService.java
================================================
package integration.services;

import integration.models.website.OrderMessage;
import integration.models.mrp.CatalogItem;
import integration.models.mrp.Order;
import integration.models.mrp.Quote;
import integration.models.mrp.ShipmentRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.List;

/**
 * This service is responsible for communication to the MRP system.
 */
public class MrpConnectService {

    private final static Logger log = LoggerFactory.getLogger(MrpConnectService.class);
    private String hostName;
    private RestTemplate restTemplate;

    public MrpConnectService(String hostName) {
        this.hostName = hostName;
        this.restTemplate = new RestTemplate();
    }

    /**
     * Crates a new Quote, Order and Shipment in the MRP system
     * @param message the new order message from website
     * @throws MalformedURLException
     */
    public void createNewOrder(OrderMessage message) throws MalformedURLException {
        Quote quote = createQuote(message);
        log.info("Quote Created. Quote Id : " + quote.getQuoteId());
        Order order = createOrder(quote.getQuoteId());
        log.info("Order Created. Quote Id : " + quote.getQuoteId() + "  Order Id : " + order.getOrderId());
        createShipment(message, order.getOrderId());
        log.info("Shipment Created. Quote Id : " + quote.getQuoteId() + "  Order Id : " + order.getOrderId());
    }

    /**
     * Uses the customer address to build a shipment for the orderId.
     * @param message - Website Order
     * @param orderId - Id of order created in the MRP system
     * @throws MalformedURLException
     */
    private void createShipment(OrderMessage message, String orderId) throws MalformedURLException {
        String uri = UriComponentsBuilder.fromUriString(hostName).path("shipments").build().toUriString();
        ShipmentRecord newShipmentRecord = new ShipmentRecord(message, orderId);
        restTemplate.postForObject(uri, newShipmentRecord, ShipmentRecord.class);
    }

    /**
     * Posts the quote id to the MRP system to confirm the order.
     * @param quoteId - Id of the quote that you wish to fulfill.
     * @return Order - the newly created order including the id created in the MRP system.
     */
    private Order createOrder(String quoteId) {
        String uri = UriComponentsBuilder.fromUriString(hostName).path("orders").queryParam("fromQuote", quoteId).build().toUriString();
        Order createdOrder = restTemplate.postForObject(uri, null, Order.class);
        return createdOrder;
    }

    /**
     * Takes all of the information about the order to create the inital quote.
     * @param message - Website Order
     * @return Quote - the newly created quote including the id created in the MRP system.
     */
    private Quote createQuote(OrderMessage message) {
        String uri = UriComponentsBuilder.fromUriString(hostName).path("quotes").build().toUriString();
        Quote newQuote = new Quote(message);
        Quote createdQuote = restTemplate.postForObject(uri, newQuote, Quote.class);
        return createdQuote;
    }

    /**
     * Queries the MRP system for the catalog.
     * @return List<CatalogItem> - list of all catalog items in the MRP system.
     */
    public List<CatalogItem> getCatalogItems() {
        String uri = UriComponentsBuilder.fromUriString(hostName).pathSegment("catalog").build().toUriString();

        ArrayList<CatalogItem> CatalogList = new ArrayList<CatalogItem>();
        for (CatalogItem catalog : restTemplate.getForObject(uri, CatalogItem[].class)){
            CatalogList.add(catalog);
        }
        return CatalogList;
    }
}


================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/services/QueueFactory.java
================================================
package integration.services;

import com.microsoft.azure.storage.CloudStorageAccount;
import com.microsoft.azure.storage.StorageException;
import com.microsoft.azure.storage.queue.CloudQueue;
import com.microsoft.azure.storage.queue.CloudQueueClient;
import integration.infrastructure.ConfigurationManager;

import java.net.URISyntaxException;
import java.security.InvalidKeyException;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * The queue factory is responsible for initializing and locating the queues a thread safe manner.
 */
public class QueueFactory {

    private static Map<String, CloudQueue> s_queueDictionary;

    /**
     * get queue will return the named queue, initializing a new queue in the case it does not already exist.
     * @param queueKey - The name of the cloud queue to search for.
     * @return com.microsoft.azure.storage.queue.CloudQueue
     * @throws StorageException
     * @throws URISyntaxException
     * @throws InvalidKeyException
     */
    public static CloudQueue getQueue(String queueKey) throws StorageException, URISyntaxException, InvalidKeyException {
        if (s_queueDictionary == null) {
            // http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentHashMap.html
            // Ensuring if we are thread safe for setting and getting cloud queues.
            s_queueDictionary = new ConcurrentHashMap();
        }

        if (s_queueDictionary.containsKey(queueKey)) {
            return s_queueDictionary.get(queueKey);
        } else {
            // Retrieve storage account from connection-string.
            CloudStorageAccount storageAccount = CloudStorageAccount.parse(ConfigurationManager.getAzureStorageConnectionString());
            // Create the queue client.
            CloudQueueClient queueClient = storageAccount.createCloudQueueClient();
            // Retrieve a reference to a queue.
            CloudQueue queue = queueClient.getQueueReference(queueKey);
            // Create the queue if it doesn't already exist.
            queue.createIfNotExists();

            s_queueDictionary.put(queueKey, queue);
            return queue;
        }
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/services/QueueService.java
================================================
package integration.services;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.microsoft.azure.storage.StorageException;
import com.microsoft.azure.storage.queue.CloudQueue;
import com.microsoft.azure.storage.queue.CloudQueueMessage;
import integration.infrastructure.ConfigurationManager;
import integration.models.QueueResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.net.URISyntaxException;
import java.security.InvalidKeyException;

/**
 * The queue service responsible for resolving all calls to azure queues.
 * @param <T> T is the message type is used for the serialization and de-serialization.
 */
public class QueueService <T> {

    private final static Logger log = LoggerFactory.getLogger(MrpConnectService.class);
    private final String queueName;
    private Class<T> valueType;

    public QueueService(String queueName, Class<T> valueType) {

        this.queueName = queueName;
        this.valueType = valueType;
    }

    /**
     * Retrieve a message off the configured queue.
     * @return A queue response object that host a reference to the queue message and the de-serialized content.
     * If not queue message is found or the message is malformed, null will be returned.
     * @throws StorageException
     * @throws URISyntaxException
     * @throws InvalidKeyException
     */
    public QueueResponse getQueueMessage() throws StorageException, URISyntaxException, InvalidKeyException {
        CloudQueue queue = QueueFactory.getQueue(queueName);
        CloudQueueMessage message = queue.retrieveMessage(ConfigurationManager.getAzureQueueTimeout(), null /*options*/, null /*opContext*/);

        if (message == null) {
            return null;
        }

        // If a queue message is successfully retrieved de-serialize it and return.
        String messageString = message.getMessageContentAsString();
        try {
            ObjectMapper mapper = new ObjectMapper();
            T messageContent = mapper.readValue(messageString, this.valueType);
            QueueResponse response = new QueueResponse(message, messageContent);
            return response;
        } catch (IOException ex) {
            log.error("An error occurred de-serializing queue message to OrderMessage. Serialized Object : " + messageString);
            deleteQueueMessage(message);
            return null;
        }
    }

    /**
     * Delete a processed message off the configured queue
     * @param message - The cloud queue message that is returned during retrieval.
     * @throws StorageException
     * @throws URISyntaxException
     * @throws InvalidKeyException
     */
    public void deleteQueueMessage(CloudQueueMessage message) throws StorageException, URISyntaxException, InvalidKeyException {
        CloudQueue queue = QueueFactory.getQueue(queueName);
        queue.deleteMessage(message);
    }

    /**
     * Serialize and add a object to the configured queue.
     * @param queueContent - the object to add to the queue.
     * @throws StorageException
     * @throws URISyntaxException
     * @throws InvalidKeyException
     * @throws JsonProcessingException
     */
    public void addQueueMessage(T queueContent) throws StorageException, URISyntaxException, InvalidKeyException, JsonProcessingException {
        CloudQueue queue = QueueFactory.getQueue(queueName);
        ObjectMapper mapper = new ObjectMapper();
        byte[] queueByteContent = mapper.writeValueAsBytes(queueContent);
        CloudQueueMessage message = new CloudQueueMessage(queueByteContent);
        queue.addMessage(message);
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/resources/application.properties
================================================
azure.storage.connectionstring: DefaultEndpointsProtocol=https;AccountName=datastoreleef;AccountKey=AbUxxr9hvFqz62sqnoxi82WO1B6YsnBEwvJhweJ3g2efrKfZ+MfSJ6WvCpT/rQ+wfh/dCoLb4MrByP3AsQLIQQ==
azure.storage.queue.orders: orders
azure.storage.queue.inventory: product
azure.storage.queue.message: 300

mrp.endpoint: http://127.0.0.1:8080/

logging.file: integration-service.log
logging.level.org.springframework.web: INFO


================================================
FILE: src/Backend/OrderService/README
================================================
﻿Fabrikam Development Status

At this point, a skeleton of the service REST API is in place. Quotes can be created and queried, catalog item can be
added to the catalog, dealers added and listed, and orders can be created from quotes.

Here are some sample Fiddler requests (the user agent can be anything, of course):

List items in the catalog:

GET /catalog HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080

Add an item to the catalog with SKU # 'MRP-004':

POST /catalog HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080
Content-Type: application/json

{"skuNumber" : "MRP-0004", "description" : "Break Calipers Guide Pin Boot Kit", "price" : 8.99, "inventory" : 10, "leadTime" : 5}


Get a list of all the known dealers in the system:

GET /dealers HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080


Add a new dealer called 'BigJoe':

POST /dealers HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080
Content-Type: application/json

{"name":"BigJoe","contact":"John Doe","address":"123 Main Street, Redmond, WA 98052","email":"jdoe@tempuri.org", "phone":"425-555-1212"}


Get information on a given quote:

GET /quotes/quote-1 HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080


Get all quotes for customers containing the string 'Little Inn'

GET /quotes?name=Little%20Inn HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080


Delete a given quote from the system:

DELETE /quotes/quote-1 HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080


Create a new quote (the quote id is returned in the Location header of the response):

POST /quotes HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080
Content-Type: application/json

{"customerName":"The Little Inn by the Bay",
  "dealerName":"BigJoe",
  "comments":"Here is your quote for our top-of-the-line fridge unit.",
  "terms":"60 days",
  "validUntil":"12/1/14",
  "unitDescription":"CoolnessExtreme",
  "additionalItems":[
    {"skuNumber":"MRP-0001","amount":100.0},
    {"skuNumber":"MRP-0002","amount":2.0}
  ],
  "unitCost":12000.0,
  "totalCost":18050.0,
  "discount":1500.0,
  "height":2.5,
  "width":5.0,
  "depth":8.0,
  "unit":"meters",
  "purpose":"Refrigerator",
  "ambientPeak":25.0,
  "ambientAverage":21.0,
  "buildOnSite":true,
  "city":"Wellfleet",
  "postalCode":"02667",
  "state":"MA"}


Update an existing quote:

PUT /quotes/quote-1 HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080
Content-Type: application/json

{"customerName":"The Little Inn by the Bay",
  "dealerName":"LittleJoe",
  "comments":"Here is your quote for our top-of-the-line fridge unit.",
  "terms":"60 days",
  "validUntil":"12/1/14",
  "unitDescription":"CoolnessExtreme",
  "additionalItems":[
    {"skuNumber":"ACC-0001", "amount":150.0},
    {"skuNumber":"ACC-0003", "amount":1.0},
    {"skuNumber":"ACC-0004", "amount":50.0}
  ],
  "unitCost":12000.0,
  "totalCost":18050.0,
  "discount":1500.0,
  "height":2.5,
  "width":5.0,
  "depth":8.0,
  "unit":"meters",
  "purpose":"Refrigerator",
  "ambientPeak":25.0,
  "ambientAverage":21.0,
  "buildOnSite":true,
  "city":"Wellfleet",
  "postalCode":"02667",
  "state":"MA"}


Get the given order:

GET /orders/order-quote-1  HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080

Get all orders for a given dealer, identified by name:

GET /orders?dealer=BigJoe  HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080

Get all orders for a given dealer, identified by name. Filter by status.

GET /orders?dealer=BigJoe&status=Confirmed  HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080


Create a new order from a quote. The order id is returned in the 'Location' header of the response.

POST /orders?fromQuote=quote-1  HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080


List all shipments, regardless of status

GET /shipments  HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080

List all shipments of a given status

GET /shipments?status=Created  HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080

Get the details of a specific shipment record

GET /shipments/order-quote-1  HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080

Create a new shipment record (only one per order)

POST /shipments  HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080
Content-Type: application/json

{ "orderId":"order-quote-1",
   "contactName":"Jane Smith",
   "deliveryAddress":{"street":"123 Main St.","city":"Redmond","state":"WA","postalCode":"98052","specialInstructions":"Look for a yellow house" },
   "primaryContactPhone": {"kind":"Mobile", "phoneNumber":"425-555-1212"},
   "alternateContactPhone": {"kind":"Work", "phoneNumber":"425-555-1213"},
   "events": [] }

Modify an existing shipment record. Missing fields will be overwritten with null

PUT /shipments/order-quote-1  HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080
Content-Type: application/json

{ "orderId":"order-quote-1",
   "contactName":"John Smith",
   "deliveryAddress":{"street":"123 Main St.","city":"Redmond","state":"WA","postalCode":"98052","specialInstructions":"Look for a yellow house" },
   "primaryContactPhone": {"kind":"Mobile", "phoneNumber":"425-555-1212"},
   "alternateContactPhone": {"kind":"Work", "phoneNumber":"425-555-1213"},
   "events": [] }

Add a comment to the shipment.

POST /shipments/order-quote-1/events HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080
Content-Type: application/json

{"comments":"Coming from Fiddler"}




On OS X, curl is the best tool to use, but it's more complex. The 'scripts' directory contains a number of files to test things with.

To go through dealer and catalog update, quote creation and update, then order creation, issue the following from
the scripts directory:

./setup.sh
./update.sh
./createorder.sh



================================================
FILE: src/Backend/OrderService/README.md
================================================
# Building the OrderService #
The following command is used to build the OderService WAR file.

## Clone the GitHub repository ###

Prior to building, you should have cloned the git repository with the following command (assuming you have git installed already).

### Installing git ###
The following provides examples for obtaining git for Windows and Ubuntu Linux.

#### Windows ####
By far the easiest way to get git for Windows is use the GitHub installer that provides the command line interface along with a Windows client that makes managing and working with git easier and visual.

Navigate to [http://windows.github.com](http://windows.github.com).  Click on the 'Download GitHub for Windows'

When done, there will be 2 GitHub shortcuts created.  Open the "Git Shell".  This will be a PowerShell session with git and [POSH-GIT](https://github.com/dahlbyk/posh-git) ready to go.

```
cd <Some Local Path Where Child Directories will be Git Repositories>

# clone the repository and replace the <http://.....> path with the URL of the git repository
git clone https://github.com/Microsoft/PartsUnlimitedMRP.git 

#switch to the path.
cd PartsUnlimitedMRP
```
After this you will be in the Root of the cloned repository ready to build.

#### Linux ####
Assuming you are using Ubuntu 14+, utilize the Debian package manager.

```
cd ~/
# update package info from Ubuntu
sudo apt-get update

# run the install for git
sudo apt-get install git

# clone the repository and replace the <http://.....> path with the URL of the git repository
git clone https://github.com/Microsoft/PartsUnlimitedMRP.git

# switch to the path
cd PartsUnlimitedMRP
```
After this you will be in the Root of the cloned repository ready to build.

## Building ##

The following commands are used to build the ```ordering-service-0.1.0.jar``` file from the sources located in the clone of the git repository.

change to the ```./src/Backend/OrderService``` directory.


### Windows ###
From a PowerShell or CMD shell, run the following command.

```
.\gradlew.bat build

```

### Linux ###

```
#make sure you have the JDK installed. assumes Ubuntu 14.04 LTS.
sudo apt-get install default-jdk
```

At this point exit and restart your bash session to pick up the new settings. Or run ```. .profile  ``` from your home ```~/```

```
# ensure the 'gradlew' is executable
chmod +x gradlew

# now build...
./gradlew build
```

The build will run for a bit and will also run some tests. When done, the output it placed in the ```./builds/libs``` directory.

This creates the ```ordering-service-0.1.0.jar``` in the ```./build/libs``` directory.

## Cleaning all builds ##

### Windows ###
Run ```removeBuild.bat``` to remove the ```./build``` and the ```./buildSrc/build``` directories.

### Linux ###

Run the following native command:
```
rm -rf ./build ./buildSrc/build
```




================================================
FILE: src/Backend/OrderService/gradlew
================================================
#!/usr/bin/env bash

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn ( ) {
    echo "$*"
}

die ( ) {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
esac

# For Cygwin, ensure paths are in UNIX format before anything is touched.
if $cygwin ; then
    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
fi

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >&-
APP_HOME="`pwd -P`"
cd "$SAVED" >&-

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=$((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$args0" ;;
        (2) set -- "$args0" "$args1" ;;
        (3) set -- "$args0" "$args1" "$args2" ;;
        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
function splitJvmOpts() {
    JVM_OPTS=("$@")
}
eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"

exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"



================================================
FILE: src/Backend/OrderService/gradlew.bat
================================================
@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS=

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto init

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto init

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:init
@rem Get command-line arguments, handling Windowz variants

if not "%OS%" == "Windows_NT" goto win9xME_args
if "%@eval[2+2]" == "4" goto 4NT_args

:win9xME_args
@rem Slurp the command line arguments.
set CMD_LINE_ARGS=
set _SKIP=2

:win9xME_args_slurp
if "x%~1" == "x" goto execute

set CMD_LINE_ARGS=%*
goto execute

:4NT_args
@rem Get arguments from the 4NT Shell from JP Software
set CMD_LINE_ARGS=%$

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar

@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega



================================================
FILE: src/Backend/OrderService/removeBuild.bat
================================================
rd /S /Q build > NUL 2>&1
rd /S /Q buildSrc\build > NUL 2>&1


================================================
FILE: src/Backend/OrderService/version.properties
================================================
major = 0
minor = 1



================================================
FILE: src/Backend/OrderService/buildSrc/src/main/groovy/com/microsoft/appinsights/BuildInformationTask.groovy
================================================

package com.microsoft.appinsights

import java.text.SimpleDateFormat
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.*


class BuildInformationTask extends DefaultTask
{
    File versionFile
    @OutputFile File buildInfoFile = project.file('src/main/resources/buildinfo.properties')

    @TaskAction
    void readBuildInformation()
    {
        // Jenkins version
        def buildNumber = getPropertyOrDefault("BUILD_NUMBER", null)
        def buildId = getPropertyOrDefault("BUILD_ID", null)
        def buildUrl = getPropertyOrDefault("BUILD_URL", null)
        def buildTag = getPropertyOrDefault("BUILD_TAG", null)
        def gitCommit = getPropertyOrDefault("GIT_COMMIT", null)
        def gitUrl = getPropertyOrDefault("GIT_URL", null)
        def gitBranch = getPropertyOrDefault("GIT_BRANCH", null)

        /* VSO version
        def buildNumber = getPropertyOrDefault("BUILD_BUILDNUMBER", null)
        def buildId = getPropertyOrDefault("BUILD_BUILDID", null)
        def buildUrl = getPropertyOrDefault("BUILD_BUILDURI", null)
        def buildTag = getPropertyOrDefault("BUILD_TAG", null)
        def gitCommit = getPropertyOrDefault("BUILD_SOURCEVERSION", null)
        def gitUrl = getPropertyOrDefault("BUILD_REPOSITORY_URI", null)
        def gitBranch = getPropertyOrDefault("BUILD_SOURCEBRANCH", null)
       */

        def date = new Date()
        def formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX")

        def buildTime = formatter.format(date)

        def buildVersion = "#.#"

        if (versionFile.exists())
        {
            def versionProps = new Properties()
            versionFile.withInputStream { stream -> versionProps.load(stream) }

            def names = versionProps.stringPropertyNames();

            buildVersion =
                    ((!names.contains('major') || isNullOrEmpty(versionProps.major)) ? "#" : versionProps.major) + "."
            buildVersion += ((!names.contains('minor') || isNullOrEmpty(versionProps.minor)) ? "#" : versionProps.minor)
        }

        def resourcesDirectory = buildInfoFile.parentFile

        resourcesDirectory.mkdirs()

        if (!buildInfoFile.exists())
            buildInfoFile.createNewFile()

        buildInfoFile.withOutputStream {
            stream ->
                def writer = new OutputStreamWriter(stream).newPrintWriter()
                if (isNullOrEmpty(buildNumber))
                    writer.println("build.number: " + buildVersion + ".#")
                else
                    writer.println("build.number: " + buildVersion + "." + buildNumber)
                printIfNotEmpty(writer, "build.timestamp", buildTime)
                printIfNotEmpty(writer, "build.id", buildId)
                printIfNotEmpty(writer, "build.url", buildUrl)
                printIfNotEmpty(writer, "build.tag", buildTag)
                printIfNotEmpty(writer, "git.url", gitUrl)
                printIfNotEmpty(writer, "git.branch", gitBranch)
                printIfNotEmpty(writer, "git.commit", gitCommit)

                writer.close()
                stream.close()

                logger.quiet "Wrote build information to " + buildInfoFile.path
        }
    }

    void printIfNotEmpty(writer, prefix, str)
    {
        if (!isNullOrEmpty(str))
            writer.println(prefix + ": " + str)
    }

    Boolean isNullOrEmpty(str)
    {
        str == null || str.isEmpty()
    }

    String getPropertyOrDefault(name, defaultValue)
    {
        def result = defaultValue;
        def env = System.getenv(name)
        if (!isNullOrEmpty(env))
            result = env;
        result
    }
}



================================================
FILE: src/Backend/OrderService/buildSrc/src/main/groovy/com/microsoft/appinsights/CleanBuildInformationTask.groovy
================================================

package com.microsoft.appinsights

import java.text.SimpleDateFormat
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.*


class CleanBuildInformationTask extends DefaultTask
{
    @TaskAction
    void remove()
    {
        def buildInfoFile = project.file('src/main/resources/buildinfo.properties')

        if (buildInfoFile.exists())
            buildInfoFile.delete()
    }
}



================================================
FILE: src/Backend/OrderService/gradle/wrapper/gradle-wrapper.properties
================================================
#Wed Jan 28 14:56:44 PST 2015
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=http\://services.gradle.org/distributions/gradle-2.1-bin.zip



================================================
FILE: src/Backend/OrderService/scripts/cat001.json
================================================
{"skuNumber" : "MRP-0001", "description" : "Brake Pads", "price" : 26.99, "inventory" : 10, "leadTime" : 3}



================================================
FILE: src/Backend/OrderService/scripts/cat002.json
================================================
{"skuNumber" : "MRP-0002", "description" : "Brake Calipers", "price" : 33.99, "inventory" : 10, "leadTime" : 3}



================================================
FILE: src/Backend/OrderService/scripts/cat003.json
================================================
{"skuNumber" : "MRP-0003", "description" : "Brake Calipers Guide Pin", "price" : 2.99, "inventory" : 10, "leadTime" : 3}


================================================
FILE: src/Backend/OrderService/scripts/cat004.json
================================================
{"skuNumber" : "MRP-0004", "description" : "Break Calipers Guide Pin Boot Kit", "price" : 8.99, "inventory" : 10, "leadTime" : 5}



================================================
FILE: src/Backend/OrderService/scripts/createorder.sh
================================================
#!/bin/sh
curl -i http://localhost:8080//orders?fromQuote=quote-1 -X POST
echo ""
echo ""

curl -i http://localhost:8080/orders?dealer=BigJoe
echo ""
echo ""







================================================
FILE: src/Backend/OrderService/scripts/dealer1.json
================================================
{"name":"BigJoe","contact":"John Doe","address":"123 Main Street, Redmond, WA 98052","email":"jdoe@tempuri.org", "phone":"425-555-1212"}



================================================
FILE: src/Backend/OrderService/scripts/getenv.sh
================================================
#!/bin/sh
echo ""
echo "Getting the environment"
echo ""

env


================================================
FILE: src/Backend/OrderService/scripts/quote1.json
================================================
{"customerName":"The Little Inn by the Bay",
  "dealerName":"BigJoe",
  "comments":"Here is your quote for our top-of-the-line fridge unit.",
  "terms":"60 days",
  "validUntil":"12/1/14",
  "unitDescription":"CoolnessExtreme",
  "additionalItems":[
    {"skuNumber":"ACC-0001", "shouldPreInstall":false,"amount":100.0},
    {"skuNumber":"ACC-0002", "shouldPreInstall":false,"amount":2.0}
  ],
  "unitCost":12000.0,
  "totalCost":18050.0,
  "discount":1500.0,
  "height":2.5,
  "width":5.0,
  "depth":8.0,
  "unit":"meters",
  "purpose":"Refrigerator",
  "ambientPeak":25.0,
  "ambientAverage":21.0,
  "buildOnSite":true,
  "city":"Wellfleet",
  "postalCode":"02667",
  "state":"MA"}



================================================
FILE: src/Backend/OrderService/scripts/quote2.json
================================================
{"customerName":"The Little Inn by the Bay",
  "dealerName":"BigJoe",
  "comments":"Here is your quote for our top-of-the-line fridge unit.",
  "terms":"60 days",
  "validUntil":"12/1/14",
  "unitDescription":"CoolnessExtreme",
  "additionalItems":[
    {"skuNumber":"ACC-0001", "shouldPreInstall":false,"amount":150.0},
    {"skuNumber":"ACC-0003", "shouldPreInstall":false,"amount":1.0},
    {"skuNumber":"ACC-0004", "shouldPreInstall":false,"amount":50.0}
  ],
  "unitCost":12000.0,
  "totalCost":18050.0,
  "discount":1500.0,
  "height":2.5,
  "width":5.0,
  "depth":8.0,
  "unit":"meters",
  "purpose":"Refrigerator",
  "ambientPeak":25.0,
  "ambientAverage":21.0,
  "buildOnSite":true,
  "city":"Wellfleet",
  "postalCode":"02667",
  "state":"MA"}



================================================
FILE: src/Backend/OrderService/scripts/schema.psql
================================================
DROP DATABASE Fabrikant;

DROP TABLE ShipmentEventInfo;
DROP TABLE ShipmentRecords;
DROP TABLE DeliveryAddress;
DROP TABLE PhoneInfo;

DROP TABLE OrderEvents;
DROP TABLE Orders;
DROP TABLE QuoteAdditionalItemRecord;
DROP TABLE Quotes;
DROP TABLE CatalogItem;
DROP TABLE Dealers;

CREATE DATABASE Fabrikant;

CREATE TABLE CatalogItems
(
  sku_number VARCHAR(32) PRIMARY KEY,
  description VARCHAR(128),
  price  NUMERIC(8,2)
);

CREATE TABLE Dealers
(
  name VARCHAR(50) PRIMARY KEY,
  contact VARCHAR(50) NOT NULL,
  address VARCHAR(128) NOT NULL,
  email VARCHAR(128) NOT NULL,
  phone VARCHAR(16) NOT NULL
);

CREATE TABLE Quotes
(
  quote_id varchar(64) primary key,

  valid_until varchar(32),

  customer_name varchar(64),
  dealer_name varchar(50),

  total_cost  NUMERIC(8,2),
  discount  NUMERIC(8,2),

  city varchar(32),
  postal_code varchar(16),
  state char(2),

  foreign key (dealer_name) references Dealers(name)
);

CREATE TABLE QuoteAdditionalItemRecord
(
  id serial PRIMARY KEY,

  quote_id varchar(64),
  sku_number VARCHAR(32),

  amount numeric(5,2),

  foreign key (quote_id) references Quotes,
  foreign key (sku_number) references CatalogItems
);

create table Orders
(
  order_id varchar(80) primary key,
  quote_id varchar(64),
  order_date varchar(32),
  status varchar(16),

  foreign key (quote_id) references Quotes(quote_id)
);

create table OrderEvents
(
  id serial primary key,

  order_id varchar(80),
  order_date varchar(32),
  comments varchar(128),

  foreign key (order_id) references Orders(order_id)
);

create table PhoneInfo
(
  phone VARCHAR(16) PRIMARY KEY,
  kind varchar(16)
);

create table DeliveryAddress
(
  id serial primary key,
  street varchar(128),
  city varchar(32),
  state char(2),
  postal_code varchar(16)
);

create table ShipmentRecords
(
  order_id varchar(80) primary key,

  delivery_date varchar(32),
  delivery_address integer,
  contact_name varchar(64),
  primary_phone varchar(16),
  alternate_phone varchar(16),

  foreign key (order_id) references Orders(order_id),
  foreign key (delivery_address) references DeliveryAddress(id),
  foreign key (primary_phone) references PhoneInfo(phone),
  foreign key (alternate_phone) references PhoneInfo(phone)
);

create table ShipmentEventInfo
(
  id serial primary key,
  order_id varchar(80),
  date varchar(32),
  comments varchar(128),

  foreign key (order_id) references Orders(order_id)
);



================================================
FILE: src/Backend/OrderService/scripts/setup.sh
================================================
#!/bin/sh
curl -i http://localhost:8080/dealers -X POST -H "Content-Type: application/json" -d @dealer1.json
echo ""
echo ""
curl -i http://localhost:8080/catalog -X POST -H "Content-Type: application/json" -d @cat001.json
echo ""
echo ""
curl -i http://localhost:8080/catalog -X POST -H "Content-Type: application/json" -d @cat002.json
echo ""
echo ""
curl -i http://localhost:8080/catalog -X POST -H "Content-Type: application/json" -d @cat003.json
echo ""
echo ""
curl -i http://localhost:8080/catalog -X POST -H "Content-Type: application/json" -d @cat004.json
echo ""
echo ""

curl -i http://localhost:8080/dealers
echo ""
echo ""
curl -i http://localhost:8080/catalog
echo ""
echo ""

curl -i http://localhost:8080/quotes -X POST -H "Content-Type: application/json" -d @quote1.json
echo ""
echo ""




================================================
FILE: src/Backend/OrderService/scripts/setupdocker.sh
================================================
#!/bin/sh
curl -i http://192.168.59.103:8080/ordering-0.1.0/dealers -X POST -H "Content-Type: application/json" -d @dealer1.json
echo ""
echo ""
curl -i http://192.168.59.103:8080/ordering-0.1.0/catalog -X POST -H "Content-Type: application/json" -d @cat001.json
echo ""
echo ""
curl -i http://192.168.59.103:8080/ordering-0.1.0/catalog -X POST -H "Content-Type: application/json" -d @cat002.json
echo ""
echo ""
curl -i http://192.168.59.103:8080/ordering-0.1.0/catalog -X POST -H "Content-Type: application/json" -d @cat003.json
echo ""
echo ""
curl -i http://192.168.59.103:8080/ordering-0.1.0/catalog -X POST -H "Content-Type: application/json" -d @cat004.json
echo ""
echo ""

curl -i http://192.168.59.103:8080/ordering-0.1.0/dealers
echo ""
echo ""
curl -i http://192.168.59.103:8080/ordering-0.1.0/catalog
echo ""
echo ""

curl -i http://192.168.59.103:8080/ordering-0.1.0/quotes -X POST -H "Content-Type: application/json" -d @quote1.json
echo ""
echo ""




================================================
FILE: src/Backend/OrderService/scripts/update.sh
================================================
#!/bin/sh
curl -i http://localhost:8080/quotes/quote-1 -X PUT -H "Content-Type: application/json" -d @quote2.json
echo ""
echo ""






================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/AppInsightsFilter.java
================================================
package smpl.ordering;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Date;

import com.microsoft.applicationinsights.TelemetryClient;
import com.microsoft.applicationinsights.telemetry.ExceptionHandledAt;
import com.microsoft.applicationinsights.telemetry.ExceptionTelemetry;
import com.microsoft.applicationinsights.telemetry.Duration;
import com.microsoft.applicationinsights.telemetry.RequestTelemetry;
import com.microsoft.applicationinsights.telemetry.TelemetryContext;

import org.springframework.stereotype.Component;

@Component
public class AppInsightsFilter implements Filter
{
    @Override
    public void init(FilterConfig filterConfig) throws ServletException
    {
    }

    @Override
    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException
    {
        TelemetryClient client = Utility.getTelemetryClient();

        if (client != null && client.getContext() != null && !Utility.isNullOrEmpty(client.getContext().getInstrumentationKey())) // && !client.isDisabled())
        {
            Date startTime = new Date();

            HttpServletRequest request = (HttpServletRequest) req;
            String method = request.getMethod();
            String rURI = request.getRequestURI();
            String scheme = request.getScheme();
            String host = request.getHeader("Host");
            String query = request.getQueryString();
            String session = request.getSession().getId();
            String name = request.getServletPath();

            RequestTelemetry telemetry = new RequestTelemetry(String.format("%s %s", method, rURI), startTime, 0L, "200", false);
            telemetry.setHttpMethod(method);
            telemetry.setTimestamp(startTime); // Doesn't work right now.
            telemetry.setName(name);

            if (!Utility.isNullOrEmpty(query))
            {
                telemetry.setUrl(String.format("%s://%s%s?%s", scheme, host, rURI, query));
            }
            else
            {
                telemetry.setUrl(String.format("%s://%s%s", scheme, host, rURI));
            }

            TelemetryContext ctx = client.getContext();

            if (!Utility.isNullOrEmpty(session))
            {
                ctx.getSession().setId(session);
            }

            ctx.getOperation().setId(telemetry.getId());
            ctx.getOperation().setName(telemetry.getName());

            try
            {
                chain.doFilter(req, res);

                Date endTime = new Date();

                HttpServletResponse response = (HttpServletResponse) res;

				Duration duration = new Duration(endTime.getTime() - startTime.getTime());
                telemetry.setDuration(duration);
                telemetry.setResponseCode(((Integer) response.getStatus()).toString());

                client.track(telemetry);

                // Clear the operation id.
                ctx.getOperation().setId(null);
                ctx.getOperation().setName(null);
            }
            catch (Exception exc)
            {
                Date endTime = new Date();

                ExceptionTelemetry ext = new ExceptionTelemetry(exc);
                ext.setExceptionHandledAt(ExceptionHandledAt.Platform);
                client.track(ext);

				Duration duration = new Duration(endTime.getTime() - startTime.getTime());
                telemetry.setDuration(duration);
                telemetry.setResponseCode("500");
                telemetry.setSuccess(false);

                client.track(telemetry);

                // Clear the operation id.
                ctx.getOperation().setId(null);
                ctx.getOperation().setName(null);
                
                throw exc;
            }
        }
        else
        {
            chain.doFilter(req, res);
        }
    }

    @Override
    public void destroy()
    {

    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/BadRequestException.java
================================================
package smpl.ordering;

/**
 * Communicating a bad REST request from a called API to the controller, which should use
 * it to create a BAD_REQUEST HTTP response.
 */
public class BadRequestException
        extends Exception
{
    public BadRequestException(String message)
    {
        super(message);
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/ConflictingRequestException.java
================================================
package smpl.ordering;

/**
 * Communicating a conflicting REST request from a called API to the controller, which should use
 * it to create a CONFLICT HTTP response.
 */
public class ConflictingRequestException
        extends BadRequestException
{
    public ConflictingRequestException(String message)
    {
        super(message);
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/MongoDBProperties.java
================================================
package smpl.ordering;

import org.springframework.boot.context.properties.ConfigurationProperties;

/**
 * Holds configuration properties pertaining to the MongoDB connection.
 */
@ConfigurationProperties(prefix = "mongodb")
public class MongoDBProperties
{
    private String host = "localhost";
    private String database = "ordering";

    public String getHost()
    {
        return host;
    }

    public void setHost(String host)
    {
        this.host = host;
    }

    public String getDatabase()
    {
        return database;
    }

    public void setDatabase(String database)
    {
        this.database = database;
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/OrderingConfiguration.java
================================================
package smpl.ordering;

import com.microsoft.applicationinsights.TelemetryClient;
import com.microsoft.applicationinsights.TelemetryConfiguration;
import com.mongodb.MongoClient;
import com.mongodb.MongoClientOptions;
import com.mongodb.ServerAddress;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.mongodb.core.MongoTemplate;
import smpl.ordering.repositories.RepositoryFactory;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("ALL")
@Configuration
@ComponentScan
@EnableAutoConfiguration
@ConditionalOnClass({MongoDBProperties.class, OrderingServiceProperties.class})
@EnableConfigurationProperties({MongoDBProperties.class, OrderingServiceProperties.class})
public class OrderingConfiguration
        implements ApplicationContextAware
{
    public static void main(String[] args)
    {
        SpringApplication app = new SpringApplication(OrderingConfiguration.class);
        app.setLogStartupInfo(false);
        app.run(args);
    }

    public OrderingConfiguration()
    {
        t_ambientTelemetryClient = new ThreadLocal<>();
    }

    public
    @Bean
    MongoTemplate mongoTemplate() throws Exception
    {
        MongoClient client;
        MongoClientOptions.Builder options = MongoClientOptions.builder();
        options.socketKeepAlive(false);

        String mongoHost = mongoDBProperties.getHost();
        String mongoPort = System.getenv("MONGO_PORT"); // Anticipating use within a docker container.

        if (!Utility.isNullOrEmpty(mongoPort))
        {
            URL portUrl = new URL(mongoPort.replace("tcp:", "http:"));
            mongoHost = portUrl.getHost();
        }

        String mongoDB = mongoDBProperties.getDatabase();

        if (mongoDB != null && !mongoDB.isEmpty() && mongoHost != null && !mongoHost.isEmpty())
        {
            List<ServerAddress> hosts = new ArrayList<>();
            for (String host : mongoHost.split(","))
            {
                hosts.add(new ServerAddress(host));
            }
            client = new MongoClient(hosts, options.build());

        }
        else
        {
            client = new MongoClient();
        }

        return new MongoTemplate(client, mongoDB);
    }

    public
    @Bean
    RepositoryFactory repositoryFactory()
    {
        RepositoryFactory.reset(orderingServiceProperties.getStorage());
        return RepositoryFactory.getFactory();
    }

    public
    @Bean
    OrderingServiceProperties orderingServiceProperties()
    {
        return orderingServiceProperties;
    }

    public
    @Bean
    TelemetryClient getTelemetryClient()
    {
        if (TelemetryConfiguration.getActive() == null)
        {
            return null;
        }

        //TelemetryConfiguration.getActive().getChannel().setDeveloperMode(true);

        TelemetryClient client = t_ambientTelemetryClient.get();
        if (client == null)
        {
            TelemetryConfiguration config = TelemetryConfiguration.getActive();
            String iKey = orderingServiceProperties.getInstrumentationKey();

            if (!Utility.isNullOrEmpty(iKey))
                config.setInstrumentationKey(iKey);

            t_ambientTelemetryClient.set(new TelemetryClient(config));
        }

        return t_ambientTelemetryClient.get();
    }

    @Autowired
    private OrderingServiceProperties orderingServiceProperties;

    @SuppressWarnings("SpringJavaAutowiringInspection")
    @Autowired
    private MongoDBProperties mongoDBProperties;

    private static ApplicationContext applicationContext;

    private static ThreadLocal<TelemetryClient> t_ambientTelemetryClient;

    @Override
    public void setApplicationContext(ApplicationContext context) throws BeansException
    {
        applicationContext = context;
    }

    public static ApplicationContext getApplicationContext()
    {
        return applicationContext;
    }

}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/OrderingInitializer.java
================================================
package smpl.ordering;

import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.context.web.SpringBootServletInitializer;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;

/**
 * This is the application starting point when the application is deployed in Tomcat on a server.
 */
public class OrderingInitializer
        extends SpringBootServletInitializer
{
    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder application)
    {
        return application.sources(OrderingConfiguration.class);
    }

    @Override
    public void onStartup(ServletContext servletContext) throws ServletException
    {
        super.onStartup(servletContext);

        if (servletContext != null)
        {
            String path = servletContext.getContextPath();
            if (path != null)
            {
                s_applicationPath = path;
            }
        }
    }

    public static String getApplicationPath()
    {
        return s_applicationPath;
    }

    private static String s_applicationPath = "";
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/OrderingServiceProperties.java
================================================
package smpl.ordering;

import org.springframework.boot.context.properties.ConfigurationProperties;

/**
 * Holds general service configuration properties.
 */
@ConfigurationProperties(prefix = "ordering")
public class OrderingServiceProperties
{
    private String storage = "memory";
    private String pingMessage = "The ordering service is available";
    private String validationMessage = "Version unknown";
    private String instrumentationKey = "";

    public String getStorage()
    {
        return storage;
    }

    public void setStorage(String storage)
    {
        this.storage = storage;
    }

    public String getValidationMessage()
    {
        return validationMessage;
    }

    public void setValidationMessage(String validationMessage)
    {
        this.validationMessage = validationMessage;
    }

    public String getPingMessage()
    {
        return pingMessage;
    }

    public void setPingMessage(String message)
    {
        this.pingMessage = message;
    }

    public String getInstrumentationKey()
    {
        return instrumentationKey;
    }

    public void setInstrumentationKey(String instrumentationKey)
    {
        this.instrumentationKey = instrumentationKey;
    }

}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/PostgresqlProperties.java
================================================
package smpl.ordering;

import org.springframework.boot.context.properties.ConfigurationProperties;

/**
 * Holds configuration properties pertaining to the PostgreSQL connection.
 */
@ConfigurationProperties(prefix = "postgresql")
public class PostgresqlProperties
{
    private String username;
    private String password;
    private String driverClass;
    private String url;

    public String getUsername()
    {
        return username;
    }

    public void setUsername(String username)
    {
        this.username = username;
    }

    public String getPassword()
    {
        return password;
    }

    public void setPassword(String password)
    {
        this.password = password;
    }

    public String getDriverClass()
    {
        return driverClass;
    }

    public void setDriverClass(String driverClass)
    {
        this.driverClass = driverClass;
    }

    public String getUrl()
    {
        return url;
    }

    public void setUrl(String url)
    {
        this.url = url;
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/PropertyHelper.java
================================================
package smpl.ordering;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

/**
 * Helper class for getting data out of the 'application.properties' file found on the
 * class path.
 */
public class PropertyHelper
{
    public static Properties getPropValues(String propFileName) throws IOException
    {

        Properties props = new Properties();

        InputStream inputStream = PropertyHelper.class.getClassLoader().getResourceAsStream(propFileName);
        props.load(inputStream);
        if (inputStream == null)
        {
            throw new FileNotFoundException("property file '" + propFileName + "' not found in the classpath");
        }

        return props;
    }

    public static Properties getProperties()
    {
        return s_props;
    }

    static
    {
        try
        {
            s_props = getPropValues("application.properties");
        }
        catch (IOException e)
        {
            s_props = new Properties();
        }
    }


    private static Properties s_props;
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/SimpleCORSFilter.java
================================================
package smpl.ordering;

import java.io.IOException;
import java.util.Enumeration;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Component;

@Component
public class SimpleCORSFilter implements Filter
{

    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException
    {
        HttpServletResponse response = (HttpServletResponse) res;
        response.setHeader("Access-Control-Allow-Origin", "*");
        response.setHeader("Access-Control-Allow-Methods", "PUT, POST, GET, OPTIONS, DELETE");
        response.setHeader("Access-Control-Max-Age", "1");
        response.setHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Pragma, Cache-Control, If-Modified-Since");

        chain.doFilter(req, res);
    }

    public void init(FilterConfig filterConfig)
    {
    }

    public void destroy()
    {
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/TestPath.java
================================================
package smpl.ordering;

/**
 * Interface for unit test hooks into various backend components.
 */
public interface TestPath
{
    public void reset();
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/Utility.java
================================================
package smpl.ordering;

import com.microsoft.applicationinsights.TelemetryClient;
import org.springframework.context.ApplicationContext;

public class Utility
{
    public static int validateStringField(String field, String fieldName, int count, StringBuilder errors)
    {
        if (isNullOrEmpty(field))
        {
            if (count == 0)
            {
                errors.append(String.format("\"Empty %s field\"", fieldName));
            }
            else
            {
                errors.append(String.format(",\"Empty %s field\"", fieldName));
            }
            count += 1;
        }
        return count;
    }

    public static boolean isNullOrEmpty(String str)
    {
        return str == null || str.isEmpty();
    }

    public static TelemetryClient getTelemetryClient()
    {
        ApplicationContext ctx = OrderingConfiguration.getApplicationContext();
        if (ctx == null) return null;
        return ctx.getBean(TelemetryClient.class);
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/controllers/CatalogController.java
================================================
package smpl.ordering.controllers;

import com.microsoft.applicationinsights.TelemetryClient;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import smpl.ordering.OrderingInitializer;
import smpl.ordering.Utility;
import smpl.ordering.models.CatalogItem;
import smpl.ordering.repositories.CatalogItemsRepository;
import smpl.ordering.repositories.RepositoryFactory;

import java.util.List;

@Controller
@RequestMapping("/catalog")
public class CatalogController
{
    /**
     * Gets a list of available catalog item.
     *
     * @return An HttpResponse containing a list of catalog item.
     */
    @RequestMapping(method = RequestMethod.GET)
    public ResponseEntity getCatalogItems()
    {
        try
        {
            List<CatalogItem> catalog = getRepository().getCatalogItems();
            if (catalog == null || catalog.size() == 0)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<>(catalog, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            exc.printStackTrace();
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.toString(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


    /**
     * Gets a specific catalog item by its id.
     *
     * @param sku The SKU number
     * @return An HttpResponse containing an catalog item record.
     */
    @RequestMapping(method = RequestMethod.GET, value = "/{sku}")
    public ResponseEntity getCatalogItem(@PathVariable String sku)
    {
        try
        {
            CatalogItem catalogItem = getRepository().getCatalogItem(sku);
            if (catalogItem == null)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<>(catalogItem, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Adds or updates an catalog item SKU
     *
     * @param info Information about the SKU
     * @return An HTTP status code.
     */
    @RequestMapping(method = RequestMethod.POST)
    public ResponseEntity addCatalogItem(@RequestBody CatalogItem info)
    {
        String errorMsg = info.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        try
        {
            CatalogItem catalogItem = getRepository().getCatalogItem(info.getSkuNumber());
            if (catalogItem != null)
            {
                return new ResponseEntity<>("The SKU already exists", HttpStatus.CONFLICT);
            }

            boolean result = getRepository().upsertCatalogItem(info.getSkuNumber(), info, null);
            String applicationPath = OrderingInitializer.getApplicationPath();
            HttpHeaders responseHeaders = new HttpHeaders();
            responseHeaders.set("Location", applicationPath + "/catalog/" + info.getSkuNumber());
            return new ResponseEntity(responseHeaders, result ? HttpStatus.OK : HttpStatus.CREATED);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Adds or updates an CatalogItem SKU
     *
     * @param sku  The SKU number
     * @param info Information about the SKU
     * @return An HTTP status code.
     */
    @RequestMapping(method = RequestMethod.PUT, value = "/{sku}")
    public ResponseEntity upsertCatalogItem(@PathVariable String sku, @RequestBody CatalogItem info)
    {
        String errorMsg = info.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        try
        {
            CatalogItem catalogItem = getRepository().getCatalogItem(sku);
            if (catalogItem == null)
            {
                return new ResponseEntity<CatalogItem>(HttpStatus.NOT_FOUND);
            }
            boolean result = getRepository().upsertCatalogItem(sku, info, null);
            return new ResponseEntity(result ? HttpStatus.OK : HttpStatus.CREATED);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Remove an catalog item SKU from the catalog.
     *
     * @param sku The SKU number.
     * @return An HTTP status code.
     */
    @RequestMapping(method = RequestMethod.DELETE, value = "/{sku}")
    public ResponseEntity removeCatalogItem(@PathVariable String sku)
    {

        try
        {
            if (getRepository().removeCatalogItem(sku, null))
            {
                return new ResponseEntity<CatalogItem>(HttpStatus.NO_CONTENT);
            }
            else
            {
                return new ResponseEntity<CatalogItem>(HttpStatus.NOT_FOUND);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private CatalogItemsRepository getRepository()
    {
        return RepositoryFactory.getCatalogItemsRepository();
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/controllers/DealerController.java
================================================
package smpl.ordering.controllers;

import com.microsoft.applicationinsights.TelemetryClient;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import smpl.ordering.OrderingInitializer;
import smpl.ordering.Utility;
import smpl.ordering.models.DealerInfo;
import smpl.ordering.repositories.DealersRepository;
import smpl.ordering.repositories.RepositoryFactory;

import java.util.List;

@Controller
@RequestMapping("/dealers")
public class DealerController
{
    /**
     * Gets a list of available dealers.
     *
     * @return An HttpResponse containing a list of dealers.
     */
    @RequestMapping(method = RequestMethod.GET)
    public ResponseEntity getDealers()
    {
		//Fix this line in Application Performance Monitoring HOL from 1000 to 1
		int numMongoDBCalls = 100000; 
		
        try
        {
			int count = 0; 
			List<DealerInfo> dealers = getRepository().getDealers();
			
			while(count < numMongoDBCalls - 1)
			{
				dealers = getRepository().getDealers();
				count++; 
			}
            if (dealers == null || dealers.size() == 0)
            {
                return new ResponseEntity<List<DealerInfo>>(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<>(dealers, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.toString(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Gets a specific dealer by its name.
     *
     * @param name The dealer name
     * @return An HttpResponse containing a list of catalog items.
     */
    @RequestMapping(method = RequestMethod.GET, value = "/{name}")
    public ResponseEntity getDealer(@PathVariable String name)
    {
        try
        {
            DealerInfo dealer = getRepository().getDealer(name);
            if (dealer == null)
            {
                return new ResponseEntity<DealerInfo>(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<>(dealer, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.toString(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Adds a dealer contact record
     *
     * @param info Information about the dealer
     * @return An HTTP status code.
     */
    @RequestMapping(method = RequestMethod.POST)
    public ResponseEntity addDealer(@RequestBody DealerInfo info)
    {
        String errorMsg = info.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        try
        {
            DealerInfo dealer = getRepository().getDealer(info.getName());
            if (dealer != null)
            {
                return new ResponseEntity<>("Dealer already exists", HttpStatus.CONFLICT);
            }

            boolean result = getRepository().upsertDealer(info, null);
            String applicationPath = OrderingInitializer.getApplicationPath();
            HttpHeaders responseHeaders = new HttpHeaders();
            responseHeaders.set("Location", applicationPath + "/dealers/" + info.getName());
            return new ResponseEntity(responseHeaders, result ? HttpStatus.OK : HttpStatus.CREATED);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Adds a dealer contact record
     *
     * @param name The dealer name
     * @param info Information about the dealer
     * @return An HTTP status code.
     */
    @RequestMapping(method = RequestMethod.PUT, value = "/{name}")
    public ResponseEntity updateDealer(@PathVariable String name, @RequestBody DealerInfo info)
    {
        String errorMsg = info.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        try
        {
            DealerInfo dealer = getRepository().getDealer(name);
            if (dealer == null)
            {
                return new ResponseEntity<DealerInfo>(HttpStatus.NOT_FOUND);
            }

            getRepository().upsertDealer(info, null);
            return new ResponseEntity(HttpStatus.OK);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Remove an catalog item SKU from the catalog.
     *
     * @param name The dealer name.
     * @return An HTTP status code.
     */
    @RequestMapping(method = RequestMethod.DELETE, value = "/{name}")
    public ResponseEntity removeDealer(@PathVariable String name)
    {

        try
        {
            if (getRepository().removeDealer(name, null))
            {
                return new ResponseEntity<DealerInfo>(HttpStatus.NO_CONTENT);
            }
            else
            {
                return new ResponseEntity<DealerInfo>(HttpStatus.NOT_FOUND);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private static DealersRepository getRepository()
    {
        return RepositoryFactory.getDealersRepository();
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/controllers/OrderController.java
================================================
package smpl.ordering.controllers;

import com.microsoft.applicationinsights.TelemetryClient;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import smpl.ordering.BadRequestException;
import smpl.ordering.ConflictingRequestException;
import smpl.ordering.OrderingInitializer;
import smpl.ordering.Utility;
import smpl.ordering.models.*;
import smpl.ordering.repositories.OrderRepository;
import smpl.ordering.repositories.QuoteRepository;
import smpl.ordering.repositories.RepositoryFactory;

import java.text.DateFormat;
import java.util.Date;
import java.util.List;

@Controller
@RequestMapping("/orders")
public class OrderController
{
    /**
     * Gets an order identified by its id.
     *
     * @param orderId The order id
     * @return An HttpResponse containing the quote, if found.
     */
    @RequestMapping(method = RequestMethod.GET, value = "/{orderId}")
    public ResponseEntity getOrderById(@PathVariable String orderId)
    {
        try
        {
            Order o = getOrders().getOrder(orderId);
            if (o == null)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<>(o, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Gets a list of orders for a given dealer.
     *
     * @param dealer The dealer name.
     * @return An HttpResponse containing the quotes, if found.
     */
    @RequestMapping(method = RequestMethod.GET)
    public ResponseEntity getOrdersByDealerName(
            @RequestParam(value = "dealer", required = false, defaultValue = "") String dealer,
            @RequestParam(value = "status", required = false, defaultValue = "None") OrderStatus status)
    {
        try
        {
            List<Order> o;
            if (dealer.length() == 0) {
                o = getOrders().getOrdersByStatus(status);
            }
            else {
                o = getOrders().getOrdersByDealerName(dealer, status);
            }
            if (o == null || o.size() == 0)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<>(o, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Creates a new order.
     *
     * @param from The id of the quote from which this order will be created.
     * @return An HttpResponse containing the quote.
     */
    @RequestMapping(method = RequestMethod.POST)
    public ResponseEntity createOrder(@RequestParam(value = "fromQuote") String from)
    {
        try
        {
            Quote quote = getQuotes().getQuote(from);

            if (quote != null)
            {
                Order order = getOrders().createOrder(from);
                String applicationPath = OrderingInitializer.getApplicationPath();
                HttpHeaders responseHeaders = new HttpHeaders();
                responseHeaders.set("Location", applicationPath + "/orders/" + order.getOrderId());
                return new ResponseEntity<>(order, responseHeaders, HttpStatus.CREATED);
            }
            else
            {
                return new ResponseEntity<>("There is no such quote", HttpStatus.BAD_REQUEST);
            }
        }
        catch (ConflictingRequestException bre)
        {
            return new ResponseEntity<>(bre.getMessage(), HttpStatus.CONFLICT);
        }
        catch (BadRequestException bre)
        {
            return new ResponseEntity<>(bre.getMessage(), HttpStatus.BAD_REQUEST);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Creates a new order.
     *
     * @return An HttpResponse containing the quote.
     */
    @RequestMapping(method = RequestMethod.POST, value = "/{orderId}/events")
    public ResponseEntity addEvent(@PathVariable String orderId,
                                   @RequestBody OrderEventInfo info)
    {
        try
        {
            Order order = getOrders().getOrder(orderId);
            if (order != null)
            {
                DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);
                info.setDate(df.format(new Date()));
                order.addEvent(info);
                getOrders().updateOrder(order.getOrderId(), order, null);
                return new ResponseEntity(HttpStatus.CREATED);
            }
            else
            {
                return new ResponseEntity<>("There is no such order", HttpStatus.BAD_REQUEST);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Updates an order.
     *
     * @return An HttpResponse containing the quote.
     */
    @RequestMapping(method = RequestMethod.PUT, value = "/{orderId}")
    public ResponseEntity updateOrder(@PathVariable String orderId,
                                   @RequestBody Order order)
    {
        // Input data validation
        String errorMsg = order.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        try
        {
            boolean ok = getOrders().updateOrder(orderId, order, null);
            return new ResponseEntity(ok ? HttpStatus.OK : HttpStatus.NOT_FOUND);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Creates a new order.
     *
     * @return An HttpResponse containing the quote.
     */
    @RequestMapping(method = RequestMethod.PUT, value = "/{orderId}/status")
    public ResponseEntity updateStatus(@PathVariable String orderId,
                                       @RequestBody OrderUpdateInfo info)
    {
        try
        {
            if (getOrders().hasOrder(orderId))
            {
                DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);
                info.getEventInfo().setDate(df.format(new Date()));
                getOrders().updateOrder(orderId, info, null);
                return new ResponseEntity(HttpStatus.OK);
            }
            else
            {
                return new ResponseEntity<>("There is no such order", HttpStatus.BAD_REQUEST);
            }
        }
        catch (BadRequestException bre)
        {
            return new ResponseEntity<>(bre.getMessage(), HttpStatus.BAD_REQUEST);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


    /**
     * Removes an existing order from the system.
     *
     * @param orderId The order id.
     * @return An HTTP status code
     */
    @RequestMapping(method = RequestMethod.DELETE, value = "/{orderId}")
    public ResponseEntity deleteOrder(@PathVariable String orderId)
    {
        try
        {
            boolean ok = getOrders().removeOrder(orderId, null);
            return new ResponseEntity(ok ? HttpStatus.NO_CONTENT : HttpStatus.NOT_FOUND);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private QuoteRepository getQuotes()
    {
        return RepositoryFactory.getQuoteRepository();
    }

    private OrderRepository getOrders()
    {
        return RepositoryFactory.getOrderRepository();
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/controllers/PingController.java
================================================
package smpl.ordering.controllers;

import com.microsoft.applicationinsights.TelemetryClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import smpl.ordering.OrderingServiceProperties;
import smpl.ordering.PropertyHelper;
import smpl.ordering.Utility;

import java.util.Properties;

@Controller
@RequestMapping("/ping")
public class PingController
{
    @Autowired
    private OrderingServiceProperties orderingServiceProperties;

    @RequestMapping(method = RequestMethod.HEAD)
    public ResponseEntity ping()
    {
        return new ResponseEntity(HttpStatus.OK);
    }

    @RequestMapping(method = RequestMethod.GET)
    public ResponseEntity getStatus() throws Exception
    {
        try
        {
            if (orderingServiceProperties != null)
            {
                String message =
                        String.format("%s\n%s\n",
                                orderingServiceProperties.getPingMessage(),
                                orderingServiceProperties.getValidationMessage());

                if ( props == null)
                {
                    props = PropertyHelper.getPropValues("buildinfo.properties");
                }

                if (props != null && props.containsKey("build.number"))
                {
                    message += "Build number:    " + props.getProperty("build.number") + "\n";
                }
                if (props != null && props.containsKey("build.timestamp"))
                {
                    message += "Build timestamp: " + props.getProperty("build.timestamp") + "\n";
                }

                return new ResponseEntity<>(message, HttpStatus.OK);
            }
            else
            {
                return new ResponseEntity(HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.toString(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private Properties props;
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/controllers/QuoteController.java
================================================
package smpl.ordering.controllers;

import com.microsoft.applicationinsights.TelemetryClient;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import smpl.ordering.BadRequestException;
import smpl.ordering.OrderingInitializer;
import smpl.ordering.Utility;
import smpl.ordering.models.Quote;
import smpl.ordering.repositories.QuoteRepository;
import smpl.ordering.repositories.RepositoryFactory;

import java.util.List;

@Controller
@RequestMapping("/quotes")
public class QuoteController
{
    /**
     * Gets a quote identified by its id.
     *
     * @param quoteId The quote id
     * @return An HttpResponse containing the quote, if found.
     */
    @RequestMapping(method = RequestMethod.GET, value = "/{quoteId}")
    public ResponseEntity getQuoteById(@PathVariable String quoteId)
    {
        try
        {
            Quote q = getRepository().getQuote(quoteId);
            if (q == null)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<>(q, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Gets a list of quotes where the customer name contains the string 'name'
     *
     * @param name A fragment of the customer name field. Case is ignored.
     * @return An HttpResponse containing the quotes, if found.
     */
    @RequestMapping(method = RequestMethod.GET)
    public ResponseEntity getQuotesByCustomerName(@RequestParam(value = "name") String name)
    {
        try
        {
            List<Quote> q = getRepository().getQuotesByCustomerName(name);
            if (q == null || q.size() == 0)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<>(q, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Updates an existing quote with the data passed in.
     *
     * @param quoteId The quote id.
     * @param info    The client-generated quote information containing the new data.
     * @return An HttpResponse containing the quote, if found.
     */
    @RequestMapping(method = RequestMethod.PUT, value = "/{quoteId}")
    public ResponseEntity updateQuote(@PathVariable String quoteId, @RequestBody Quote info)
    {
        // Input data validation
        String errorMsg = info.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        try
        {
            boolean ok = getRepository().updateQuote(quoteId, info, null);
            return new ResponseEntity(ok ? HttpStatus.OK : HttpStatus.NOT_FOUND);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Updates a new quote from the data passed in.
     *
     * @param info The client-generated quote information containing the new quote data.
     * @return An HttpResponse containing the quote.
     */
    @RequestMapping(method = RequestMethod.POST)
    public ResponseEntity createQuote(@RequestBody Quote info)
    {
        String errorMsg = info.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        try
        {
            Quote result = getRepository().createQuote(info);
            if (result != null)
            {
                String applicationPath = OrderingInitializer.getApplicationPath();
                HttpHeaders responseHeaders = new HttpHeaders();
                responseHeaders.set("Location", applicationPath + "/quotes/" + result.getQuoteId());
                return new ResponseEntity<>(result, responseHeaders, HttpStatus.CREATED);
            }
            else
            {
                return new ResponseEntity(HttpStatus.CONFLICT);
            }
        }
        catch (BadRequestException bre)
        {
            return new ResponseEntity<>(bre.getMessage(), HttpStatus.BAD_REQUEST);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Removes an existing quote from the system.
     *
     * @param quoteId The quote id.
     * @return An HTTP status code
     */
    @RequestMapping(method = RequestMethod.DELETE, value = "/{quoteId}")
    public ResponseEntity deleteQuote(@PathVariable String quoteId)
    {
        try
        {
            boolean ok = getRepository().removeQuote(quoteId, null);
            return new ResponseEntity(ok ? HttpStatus.NO_CONTENT : HttpStatus.NOT_FOUND);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private QuoteRepository getRepository()
    {
        return RepositoryFactory.getQuoteRepository();
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/controllers/ShipmentController.java
================================================
package smpl.ordering.controllers;


import com.microsoft.applicationinsights.TelemetryClient;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import smpl.ordering.BadRequestException;
import smpl.ordering.OrderingInitializer;
import smpl.ordering.Utility;
import smpl.ordering.models.CatalogItem;
import smpl.ordering.models.Delivery;
import smpl.ordering.models.Order;
import smpl.ordering.models.Quote;
import smpl.ordering.models.OrderStatus;
import smpl.ordering.models.ShipmentEventInfo;
import smpl.ordering.models.ShipmentRecord;
import smpl.ordering.repositories.RepositoryFactory;
import smpl.ordering.repositories.ShipmentRepository;
import smpl.ordering.repositories.OrderRepository;
import smpl.ordering.repositories.QuoteRepository;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;


@Controller
@RequestMapping("/shipments")
public class ShipmentController
{
    /**
     * Gets a list of existing shipments, regardless of status
     *
     * @return An HttpResponse containing a list of shipments.
     */
    @RequestMapping(method = RequestMethod.GET)
    public ResponseEntity getShipments(
            @RequestParam(value = "status", required = false, defaultValue = "None")
            OrderStatus status)
    {
        try
        {
            List<ShipmentRecord> shipments = getShipmentRepository().getShipments(status);
            if (shipments == null || shipments.size() == 0)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<List<ShipmentRecord>>(shipments, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<String>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value = "/deliveries", method = RequestMethod.GET)
    public ResponseEntity getDeliveries()
    {
        try
        {
            List<ShipmentRecord> shipments = getShipmentRepository().getShipments(OrderStatus.DeliveryConfirmed);

            if (shipments == null || shipments.size() == 0)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            else
            {
                List<Delivery> deliveries = new ArrayList<Delivery>();
                OrderRepository orderRepository = getOrderRepository();
                QuoteRepository quoteRepository = getQuoteRepository();

                for (int n = 0; n < shipments.size(); n++) {
                    Delivery delivery = new Delivery();

                    ShipmentRecord shipment = shipments.get(n);
                    delivery.setShipmentRecord(shipment);

                    Order order = orderRepository.getOrder(shipment.getOrderId());
                    delivery.setOrder(order);

                    Quote quote = quoteRepository.getQuote(order.getQuoteId());
                    delivery.setQuote(quote);

                    deliveries.add(delivery);
                }

                return new ResponseEntity<List<Delivery>>(deliveries, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            return new ResponseEntity<String>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Gets a specific shipment by its corresponding order id.
     *
     * @param id The order id
     * @return An HttpResponse containing a shipment record.
     */
    @RequestMapping(method = RequestMethod.GET, value = "/{id}")
    public ResponseEntity getShipment(@PathVariable String id)
    {

        try
        {
            ShipmentRecord sr = getShipmentRepository().getShipmentById(id);
            if (sr == null)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<ShipmentRecord>(sr, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<String>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


    /**
     * Creates a shipment record
     *
     * @param info Information about the SKU
     * @return An HTTP status code.
     */
    @RequestMapping(method = RequestMethod.POST)
    public ResponseEntity createShipmentRecord(@RequestBody ShipmentRecord info)
    {
        String errorMsg = info.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<String>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        try
        {
            ShipmentRecord sr = getShipmentRepository().getShipmentById(info.getOrderId());
            if (sr != null)
            {
                return new ResponseEntity<String>("A shipment record already exists", HttpStatus.CONFLICT);
            }

            boolean result = getShipmentRepository().createShipment(info) != null;
            String applicationPath = OrderingInitializer.getApplicationPath();
            HttpHeaders responseHeaders = new HttpHeaders();
            responseHeaders.set("Location", applicationPath + "/shipments/" + info.getOrderId());
            return new ResponseEntity(responseHeaders, result ? HttpStatus.CREATED : HttpStatus.NOT_FOUND);
        }
        catch (BadRequestException bre)
        {
            return new ResponseEntity<String>(bre.getMessage(), HttpStatus.BAD_REQUEST);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<String>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Updates a shipment record
     *
     * @param id  The order id
     * @param record A shipment record
     * @return An HTTP status code.
     */
    @RequestMapping(method = RequestMethod.PUT, value = "/{id}")
    public ResponseEntity updateShipment(@PathVariable String id, @RequestBody ShipmentRecord record)
    {
        String errorMsg = record.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        if (!id.equals(record.getOrderId()))
        {
            return new ResponseEntity<>("mismatched ids", HttpStatus.BAD_REQUEST);
        }

        try
        {
            ShipmentRecord sr = getShipmentRepository().getShipmentById(id);
            if (sr == null)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }

            getShipmentRepository().updateShipment(record);
            return new ResponseEntity(HttpStatus.OK);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Updates a shipment record with a new event.
     *
     * @param id  The order id
     * @param event A shipment event record
     * @return An HTTP status code.
     */
    @RequestMapping(method = RequestMethod.POST, value = "/{id}/events")
    public ResponseEntity addEvent(@PathVariable String id, @RequestBody ShipmentEventInfo event)
    {
        String errorMsg = event.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        try
        {
            ShipmentRecord sr = getShipmentRepository().getShipmentById(id);
            if (sr == null)
            {
                return new ResponseEntity<ShipmentRecord>(HttpStatus.NOT_FOUND);
            }

            event.setDate(DateFormat.getDateInstance(DateFormat.SHORT).format(new Date()));

            boolean result = getShipmentRepository().addEvent(id, event);
            return new ResponseEntity(result ? HttpStatus.OK : HttpStatus.CREATED);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Removes an existing shipment from the system.
     *
     * @param orderId The order id.
     * @return An HTTP status code
     */
    @RequestMapping(method = RequestMethod.DELETE, value = "/{orderId}")
    public ResponseEntity deleteShipment(@PathVariable String orderId)
    {
        try
        {
            boolean ok = getShipmentRepository().removeShipment(orderId, null);
            return new ResponseEntity(ok ? HttpStatus.NO_CONTENT : HttpStatus.NOT_FOUND);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private ShipmentRepository getShipmentRepository()
    {
        return RepositoryFactory.getShipmentRepository();
    }

    private OrderRepository getOrderRepository()
    {
        return RepositoryFactory.getOrderRepository();
    }

    private QuoteRepository getQuoteRepository()
    {
        return RepositoryFactory.getQuoteRepository();
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/CatalogItem.java
================================================
package smpl.ordering.models;

import smpl.ordering.Utility;

/**
 * Represents an catalog item item description
 */
public class CatalogItem
{
    private String skuNumber;
    private String description;
    private double price;
    private int inventory;
    private int leadTime;

    public CatalogItem()
    {
    }

    public CatalogItem(String skuNumber, String description, double price, int inventory, int leadTime)
    {
        this.skuNumber = skuNumber;
        this.description = description;
        this.price = price;
        this.inventory = inventory;
        this.leadTime = leadTime;
    }

    public CatalogItem(CatalogItem catalogItem)
    {
        this.skuNumber = catalogItem.getSkuNumber();
        this.description = catalogItem.getDescription();
        this.price = catalogItem.getPrice();
        this.inventory = catalogItem.getInventory();
        this.leadTime  = catalogItem.getLeadTime();
    }

    public String getDescription()
    {
        return description;
    }

    public void setDescription(String description)
    {
        this.description = description;
    }

    public double getPrice()
    {
        return price;
    }

    public void setPrice(double price)
    {
        this.price = price;
    }

    public String getSkuNumber()
    {
        return skuNumber;
    }

    public void setSkuNumber(String skuNumber)
    {
        this.skuNumber = skuNumber;
    }

    public int getInventory() {
        return inventory;
    }

    public void setInventory(int inventory) {
        this.inventory = inventory;
    }

    public int getLeadTime() {
        return leadTime;
    }

    public void setLeadTime(int leadTime) {
        this.leadTime = leadTime;
    }

    public String validate()
    {
        int count = 0;
        StringBuilder errors = new StringBuilder("{\"errors\": [");
        count = Utility.validateStringField(skuNumber, "SKU #", count, errors);
        count = Utility.validateStringField(description, "description", count, errors);
        errors.append("]}");

        return (count > 0) ? errors.toString() : null;
    }

}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/DealerInfo.java
================================================
package smpl.ordering.models;

import smpl.ordering.Utility;

/**
 * Represents the information stored about an individual dealer.
 */
public class DealerInfo
{
    private String name;
    private String contact;
    private String address;
    private String email;
    private String phone;

    public DealerInfo()
    {
    }

    public DealerInfo(String name)
    {
        this.name = name;
    }

    public DealerInfo(DealerInfo other)
    {
        this.name = other.name;
        this.contact = other.contact;
        this.address = other.address;
        this.email = other.email;
        this.phone = other.phone;
    }

    public String validate()
    {
        int count = 0;
        StringBuilder errors = new StringBuilder("{\"errors\": [");
        count = Utility.validateStringField(name, "name", count, errors);
        errors.append("]}");

        return (count > 0) ? errors.toString() : null;
    }

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    public String getContact()
    {
        return contact;
    }

    public void setContact(String contact)
    {
        this.contact = contact;
    }

    public String getAddress()
    {
        return address;
    }

    public void setAddress(String address)
    {
        this.address = address;
    }

    public String getEmail()
    {
        return email;
    }

    public void setEmail(String email)
    {
        this.email = email;
    }

    public String getPhone()
    {
        return phone;
    }

    public void setPhone(String phone)
    {
        this.phone = phone;
    }
}




================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/Delivery.java
================================================
package smpl.ordering.models;

import smpl.ordering.Utility;

/**
 * Represents the aggregate information stored about delivery (Quote, Order, Shipment).
 */
public class Delivery {
    private Quote quote;
    private Order order;
    private ShipmentRecord shipmentRecord;

    public Quote getQuote() {
        return this.quote;
    }

    public void setQuote(Quote quote) {
        this.quote = quote;
    }

    public Order getOrder() {
        return this.order;
    }

    public void setOrder(Order order) {
        this.order = order;
    }

    public ShipmentRecord getShipmentRecord() {
        return this.shipmentRecord;
    }

    public void setShipmentRecord(ShipmentRecord shipmentRecord) {
        this.shipmentRecord = shipmentRecord;
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/DeliveryAddress.java
================================================
package smpl.ordering.models;

public class DeliveryAddress
{
    @SuppressWarnings("SameParameterValue")
    public DeliveryAddress(String street, String city, String state, String postalCode, String specialInstructions)
    {
        this.street = street;
        this.city = city;
        this.state = state;
        this.postalCode = postalCode;
        this.specialInstructions = specialInstructions;
    }

    public DeliveryAddress()
    {
    }

    public String getStreet()
    {
        return street;
    }

    public void setStreet(String street)
    {
        this.street = street;
    }

    public String getCity()
    {
        return city;
    }

    public void setCity(String city)
    {
        this.city = city;
    }

    public String getState()
    {
        return state;
    }

    public void setState(String state)
    {
        this.state = state;
    }

    public String getPostalCode()
    {
        return postalCode;
    }

    public void setPostalCode(String postalCode)
    {
        this.postalCode = postalCode;
    }

    public String getSpecialInstructions()
    {
        return specialInstructions;
    }

    public void setSpecialInstructions(String specialInstructions)
    {
        this.specialInstructions = specialInstructions;
    }

    public boolean validate()
    {
        return isNotEmpty(city) && isNotEmpty(postalCode);
    }

    private static boolean isNotEmpty(String str)
    {
        return str != null && !str.isEmpty();
    }

    private String street;
    private String city;
    private String state;
    private String postalCode;
    private String specialInstructions;
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/Order.java
================================================
package smpl.ordering.models;

import smpl.ordering.Utility;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents an agreed-upon order of a refrigeration or freezer room,
 * along with any catalog item, such as shelving and cooling equipment.
 */
public class Order
{
    private String orderId;
    private String quoteId;
    private String orderDate;
    private OrderStatus status;
    private List<OrderEventInfo> events;

    public String validate()
    {
        int count = 0;
        StringBuilder errors = new StringBuilder("{\"errors\": [");
        count = Utility.validateStringField(quoteId, "quoteId", count, errors);
        count = Utility.validateStringField(orderDate, "orderDate", count, errors);
        errors.append("]}");

        return (count > 0) ? errors.toString() : null;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Order order = (Order) o;

        if (!events.equals(order.events)) return false;
        if (!orderDate.equals(order.orderDate)) return false;
        return orderId.equals(order.orderId) && quoteId.equals(order.quoteId) && status == order.status;
    }

    @Override
    public int hashCode()
    {
        int result = orderId.hashCode();
        result = 31 * result + quoteId.hashCode();
        result = 31 * result + orderDate.hashCode();
        result = 31 * result + status.hashCode();
        result = 31 * result + events.hashCode();
        return result;
    }

    public Order()
    {
        events = new ArrayList();
        status = OrderStatus.None;
    }

    public String getQuoteId()
    {
        return quoteId;
    }

    public void setQuoteId(String quoteId)
    {
        this.quoteId = quoteId;
    }

    public String getOrderId()
    {
        return orderId;
    }

    public void setOrderId(String orderId)
    {
        this.orderId = orderId;
    }

    public String getOrderDate()
    {
        return orderDate;
    }

    public void setOrderDate(String orderDate)
    {
        this.orderDate = orderDate;
    }

    public OrderStatus getStatus()
    {
        return status;
    }

    public void setStatus(OrderStatus status)
    {
        this.status = status;
    }

    public List<OrderEventInfo> getEvents()
    {
        return events;
    }

    public void setEvents(List<OrderEventInfo> events)
    {
        this.events = events;
    }

    public void addEvent(OrderEventInfo event)
    {
        events.add(event);
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/OrderEventInfo.java
================================================
package smpl.ordering.models;

import java.text.DateFormat;
import java.util.Date;

/**
 * Information on order-related events (comments).
 */
public class OrderEventInfo
{
    private String date;
    private String comments;

    public OrderEventInfo()
    {
    }

    public OrderEventInfo(String comments)
    {
        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);
        this.setDate(df.format(new Date()));
        this.setComments(comments);
    }

    public OrderEventInfo(String date, String comments)
    {
        this.setDate(date);
        this.setComments(comments);
    }

    public String getComments()
    {
        return comments;
    }

    public void setComments(String comments)
    {
        this.comments = comments;
    }

    public String getDate()
    {
        return date;
    }

    public void setDate(String date)
    {
        this.date = date;
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/OrderStatus.java
================================================
package smpl.ordering.models;

/**
 * Order status enumeration
 */
public enum OrderStatus
{
    None,
    Created,
    Confirmed,
    Started,
    Built,
    DeliveryConfirmed,
    Shipped,
    Delivered,
    Installed
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/OrderUpdateInfo.java
================================================
package smpl.ordering.models;

import java.text.DateFormat;
import java.util.Date;

/**
 * Order update record
 */
@SuppressWarnings("SameParameterValue")
public class OrderUpdateInfo
{
    private OrderStatus status;
    private OrderEventInfo eventInfo;

    public OrderUpdateInfo()
    {
    }

    public OrderUpdateInfo(OrderStatus status, String comments)
    {
        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);
        this.status = status;
        this.eventInfo = new OrderEventInfo(df.format(new Date()), comments);
    }

    public OrderStatus getStatus()
    {
        return status;
    }

    public void setStatus(OrderStatus status)
    {
        this.status = status;
    }

    public OrderEventInfo getEventInfo()
    {
        return eventInfo;
    }

    public void setEventInfo(OrderEventInfo eventInfo)
    {
        this.eventInfo = eventInfo;
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/PhoneInfo.java
================================================
package smpl.ordering.models;

/**
 * Information regarding phone numbers for individuals related
 * to quotes, orders, and shipments.
 */
public class PhoneInfo
{
    public String getPhoneNumber()
    {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber)
    {
        this.phoneNumber = phoneNumber;
    }

    public String getKind()
    {
        return kind;
    }

    public void setKind(String kind)
    {
        this.kind = kind;
    }

    public PhoneInfo()
    {
    }

    public PhoneInfo(String phoneNumber, String kind)
    {
        this.phoneNumber = phoneNumber;
        this.kind = kind;
    }

    private String phoneNumber;
    private String kind;
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/Quote.java
================================================
package smpl.ordering.models;

import smpl.ordering.Utility;

import java.util.*;

/**
 * Represents quote information sent from the service to the client.
 *
 * @see smpl.ordering.models.Order
 */
public class Quote
{
    private String quoteId;
    private String validUntil;
    private String customerName;
    private String dealerName;
    private List<QuoteItemInfo> quoteItems;
    private double totalCost;
    private double discount;
    private String city;
    private String postalCode;
    private String state;

    public Quote()
    {
    }

    public Quote(Quote quote) {
        this.quoteId = quote.quoteId;
        this.customerName = quote.getCustomerName();
        this.dealerName = quote.getDealerName();
        this.validUntil = quote.getValidUntil();
        this.totalCost = quote.getTotalCost();
        this.discount = quote.getDiscount();
        this.city = quote.getCity();
        this.postalCode = quote.getPostalCode();
        this.state = quote.getState();
        this.quoteItems = quote.getQuoteItems();
    }

    public String validate()
    {
        int count = 0;
        StringBuilder errors = new StringBuilder("{\"errors\": [");
        count = Utility.validateStringField(dealerName, "dealerName", count, errors);
        count = Utility.validateStringField(customerName, "customerName", count, errors);
        errors.append("]}");

        return (count > 0) ? errors.toString() : null;
    }

    public String getQuoteId()
    {
        return quoteId;
    }

    public void setQuoteId(String quoteId)
    {
        this.quoteId = quoteId;
    }

    public String getDealerName()
    {
        return dealerName;
    }

    public void setDealerName(String dealerName)
    {
        this.dealerName = dealerName;
    }

    public String getCustomerName()
    {
        return customerName;
    }

    public void setCustomerName(String customerName)
    {
        this.customerName = customerName;
    }

    public String getValidUntil()
    {
        return validUntil;
    }

    public void setValidUntil(String validUntil)
    {
        this.validUntil = validUntil;
    }

    public List<QuoteItemInfo> getQuoteItems()
    {
        return quoteItems;
    }

    public void setQuoteItems(List<QuoteItemInfo> quoteItems)
    {
        this.quoteItems = quoteItems;
    }

    /**
     * Adds an item to the quote items list.
     *
     * @param sku        The item sku number
     * @param amount     The amount or number of units quoted.
     */
    public void addQuoteItem(String sku, double amount)
    {
        if (quoteItems == null)
        {
            this.quoteItems = new ArrayList<QuoteItemInfo>();
        }
        quoteItems.add(new QuoteItemInfo(sku, amount));
    }

    /**
     * Gets the overall cost of the quote, before any discount is applied.
     */
    public double getTotalCost()
    {
        return totalCost;
    }

    /**
     * Sets the overall cost of the quote, before any discount is applied.
     */
    public void setTotalCost(double totalCost)
    {
        this.totalCost = totalCost;
    }

    /**
     * Gets the overall discount, as an amount (not percentage).
     */
    public double getDiscount()
    {
        return discount;
    }

    /**
     * Sets the overall discount, as an amount (not percentage).
     */
    public void setDiscount(double discount)
    {
        this.discount = discount;
    }

    /**
     * Gets city where the unit is to be delivered.
     * Used to estimate delivery costs and for capturing local regulatory purposes.
     */
    public String getCity()
    {
        return city;
    }

    /**
     * Sets city where the unit is to be delivered.
     * Used to estimate delivery costs and for capturing local regulatory purposes.
     */
    public void setCity(String city)
    {
        this.city = city;
    }

    /**
     * Gets postal code where the unit is to be delivered.
     * Used to estimate delivery costs and for capturing local regulatory purposes.
     */
    public String getPostalCode()
    {
        return postalCode;
    }

    /**
     * Sets postal code where the unit is to be delivered.
     * Used to estimate delivery costs and for capturing local regulatory purposes.
     */
    public void setPostalCode(String postalCode)
    {
        this.postalCode = postalCode;
    }

    /**
     * Gets state where the unit is to be delivered.
     * Used to estimate delivery costs and for capturing local regulatory purposes.
     */
    public String getState()
    {
        return state;
    }

    /**
     * Sets state where the unit is to be delivered.
     * Used to estimate delivery costs and for capturing local regulatory purposes.
     */
    public void setState(String state)
    {
        this.state = state;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Quote quote = (Quote) o;


        if (Double.compare(quote.totalCost, totalCost) != 0) return false;
        if (city != null ? !city.equals(quote.city) : quote.city != null) return false;
        if (customerName != null ? !customerName.equals(quote.customerName) : quote.customerName != null) return false;
        if (dealerName != null ? !dealerName.equals(quote.dealerName) : quote.dealerName != null) return false;
        if (postalCode != null ? !postalCode.equals(quote.postalCode) : quote.postalCode != null) return false;
        if (quoteId != null ? !quoteId.equals(quote.quoteId) : quote.quoteId != null) return false;
        if (state != null ? !state.equals(quote.state) : quote.state != null) return false;
        if (validUntil != null ? validUntil.equals(quote.validUntil) : quote.validUntil != null) return false;

        if (quoteItems.size() != quote.quoteItems.size()) return false;

        if (quoteItems.size() > 0)
        {
            QuoteItemInfo arr1[] = new QuoteItemInfo[quoteItems.size()];
            QuoteItemInfo arr2[] = new QuoteItemInfo[quote.quoteItems.size()];

            quoteItems.toArray(arr1);
            quote.quoteItems.toArray(arr2);

            Arrays.sort(arr1);
            Arrays.sort(arr2);

            if (!Arrays.equals(arr1, arr2)) return false;
        }
        // if all conditions are true return true.
        return true;
    }

    @Override
    public int hashCode()
    {
        int result;
        long temp;
        result = quoteId != null ? quoteId.hashCode() : 0;
        result = 31 * result + (validUntil != null ? validUntil.hashCode() : 0);
        result = 31 * result + (customerName != null ? customerName.hashCode() : 0);
        result = 31 * result + (dealerName != null ? dealerName.hashCode() : 0);
        result = 31 * result + (quoteItems != null ? quoteItems.hashCode() : 0);
        temp = Double.doubleToLongBits(totalCost);
        result = 31 * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(discount);
        result = 31 * result + (int) (temp ^ (temp >>> 32));
        result = 31 * result + (city != null ? city.hashCode() : 0);
        result = 31 * result + (postalCode != null ? postalCode.hashCode() : 0);
        result = 31 * result + (state != null ? state.hashCode() : 0);
        return result;
    }


}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/QuoteItemInfo.java
================================================
package smpl.ordering.models;

/**
 * Represents a line item of catalog item products, coming from the client to the service
 *
 * @see QuoteItemInfo
 * @see smpl.ordering.models.CatalogItem
 */
public class QuoteItemInfo
        implements Comparable<QuoteItemInfo>
{
    private String skuNumber;
    private double amount;

    public QuoteItemInfo()
    {
    }

    public QuoteItemInfo(String sku, double amount)
    {
        this.skuNumber = sku;
        this.amount = amount;
    }

    @Override
    public int compareTo(@SuppressWarnings("NullableProblems") QuoteItemInfo other)
    {
        return skuNumber.compareTo(other.skuNumber);
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        QuoteItemInfo itemInfo = (QuoteItemInfo) o;

        return Double.compare(itemInfo.amount, amount) == 0 && skuNumber.equals(itemInfo.skuNumber);
    }

    @Override
    public int hashCode()
    {
        int result;
        long temp;
        result = skuNumber.hashCode();
        temp = Double.doubleToLongBits(amount);
        result = 31 * result + (int) (temp ^ (temp >>> 32));
        return result;
    }

    public String getSkuNumber()
    {
        return skuNumber;
    }

    public void setSkuNumber(String sku)
    {
        this.skuNumber = sku;
    }

    /**
     * Gets the amount of the item that is quoted / ordered.
     */
    public double getAmount()
    {
        return amount;
    }

    /**
     * Sets the amount of the item that is quoted / ordered.
     */
    public void setAmount(double amount)
    {
        this.amount = amount;
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/ShipmentEventInfo.java
================================================
package smpl.ordering.models;

public class ShipmentEventInfo
{
    public ShipmentEventInfo()
    {
    }

    public ShipmentEventInfo(String date, String comments)
    {
        this.date = date;
        this.comments = comments;
    }

    public String getDate()
    {
        return date;
    }

    public void setDate(String date)
    {
        this.date = date;
    }

    public String getComments()
    {
        return comments;
    }

    public void setComments(String comments)
    {
        this.comments = comments;
    }

    public String validate()
    {
        StringBuilder builder = new StringBuilder();
        boolean ok = true;

        if (comments == null || comments.isEmpty())
        {
            builder.append("No or shipment event comment\n");
            ok = false;
        }
        return ok ? null : builder.toString();
    }

    private String date;
    private String comments;
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/ShipmentRecord.java
================================================
package smpl.ordering.models;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents data fpr a particular shipment. Each order corresponds to no more
 * than one shipment record. In other words, shipments are consolidated.
 */
public class ShipmentRecord
{
    /**
     * The order id is also the key of the shipment record.
     *
     * @return The order/shipment identity
     */
    public String getOrderId()
    {
        return orderId;
    }

    public void setOrderId(String orderId)
    {
        this.orderId = orderId;
    }

    public String getDeliveryDate()
    {
        return deliveryDate;
    }

    public void setDeliveryDate(String deliveryDate)
    {
        this.deliveryDate = deliveryDate;
    }

    public List<ShipmentEventInfo> getEvents()
    {
        return events;
    }

    public void addEvent(ShipmentEventInfo event)
    {
        this.events.add(event);
    }

    @SuppressWarnings("SameParameterValue")
    public void addEvent(String date, String comments)
    {
        this.events.add(new ShipmentEventInfo(date, comments));
    }

    public DeliveryAddress getDeliveryAddress()
    {
        return deliveryAddress;
    }

    public void setDeliveryAddress(DeliveryAddress deliveryAddress)
    {
        this.deliveryAddress = deliveryAddress;
    }

    public String getContactName()
    {
        return contactName;
    }

    public void setContactName(String contactName)
    {
        this.contactName = contactName;
    }

    public PhoneInfo getPrimaryContactPhone()
    {
        return primaryContactPhone;
    }

    public void setPrimaryContactPhone(PhoneInfo primaryContactPhone)
    {
        this.primaryContactPhone = primaryContactPhone;
    }

    public PhoneInfo getAlternateContactPhone()
    {
        return alternateContactPhone;
    }

    public void setAlternateContactPhone(PhoneInfo alternateContactPhone)
    {
        this.alternateContactPhone = alternateContactPhone;
    }

    public ShipmentRecord()
    {
        this.events = new ArrayList<>();
    }

    public ShipmentRecord(ShipmentRecord other)
    {
        orderId = other.orderId;
        deliveryDate = other.deliveryDate;
        deliveryAddress = other.deliveryAddress;
        contactName = other.contactName;
        primaryContactPhone = other.primaryContactPhone;
        alternateContactPhone = other.alternateContactPhone;
        events = new ArrayList<>();
        for (ShipmentEventInfo event : other.events)
        {
            events.add(new ShipmentEventInfo(event.getDate(), event.getComments()));
        }
    }

    public String validate()
    {
        StringBuilder bldr = new StringBuilder();
        boolean ok = true;

        if (orderId == null || orderId.isEmpty())
        {
            bldr.append("No order id\n");
            ok = false;
        }
        if (deliveryDate == null || deliveryDate.isEmpty())
        {
            bldr.append("No delivery Date\n");
            ok = false;
        }
        if (deliveryAddress == null || !deliveryAddress.validate())
        {
            bldr.append("No or incomplete delivery address\n");
            ok = false;
        }
        if (contactName == null || contactName.isEmpty() || primaryContactPhone == null)
        {
            bldr.append("Contact information missing\n");
            ok = false;
        }

        return ok ? null : bldr.toString();
    }

    private String orderId;

    private String deliveryDate;

    private final List<ShipmentEventInfo> events;

    private DeliveryAddress deliveryAddress;

    private String contactName;

    private PhoneInfo primaryContactPhone;

    private PhoneInfo alternateContactPhone;
}




================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/CatalogItemsRepository.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.models.CatalogItem;

import java.util.List;

/**
 * Interface for repositories holding catalog item data.
 */
@SuppressWarnings({"SameParameterValue", "UnusedParameters"})
public interface CatalogItemsRepository
{
    List<CatalogItem> getCatalogItems();

    CatalogItem getCatalogItem(String sku);

    boolean upsertCatalogItem(String sku, CatalogItem catalogItem, String eTag);

    boolean removeCatalogItem(String sku, String eTag);
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/DealersRepository.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.models.DealerInfo;

import java.util.List;

/**
 * Represents the interface of repositories holding dealer information.
 */
@SuppressWarnings({"SameParameterValue", "UnusedParameters"})
public interface DealersRepository
{
    List<DealerInfo> getDealers();

    DealerInfo getDealer(String name);

    boolean upsertDealer(DealerInfo dealer, String eTag);

    boolean removeDealer(String name, String eTag);
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/OrderRepository.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.BadRequestException;
import smpl.ordering.models.Order;
import smpl.ordering.models.OrderStatus;
import smpl.ordering.models.OrderUpdateInfo;

import java.util.List;

/**
 * Interface for repositories holding order information
 */
@SuppressWarnings({"SameParameterValue", "UnusedParameters"})
public interface OrderRepository
{
    boolean hasOrder(String id);

    Order getOrder(String id);

    Order getOrderByQuoteId(String id);

    List<Order> getOrdersByStatus(OrderStatus status);

    List<Order> getOrdersByDealerName(String dealer, OrderStatus status);

    Order createOrder(String from) throws BadRequestException;

    @SuppressWarnings("UnusedParameters")
    boolean updateOrder(String id, Order order, String eTag);

    @SuppressWarnings("UnusedParameters")
    boolean updateOrder(String id, OrderUpdateInfo info, String eTag) throws BadRequestException;

    boolean removeOrder(String id, String eTag);
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/QuoteRepository.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.BadRequestException;
import smpl.ordering.models.Quote;

import java.util.List;

/**
 * Interface for repositories holding quote data.
 */
@SuppressWarnings({"SameParameterValue", "UnusedParameters"})
public interface QuoteRepository
{
    Quote getQuote(String id);

    List<Quote> getQuotesByCustomerName(String customerName);

    List<String> getQuoteIdsByDealerName(String dealerName);

    Quote createQuote(Quote from) throws BadRequestException;

    boolean updateQuote(String id, Quote quote, String eTag);

    boolean removeQuote(String id, String eTag);
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/RepositoryFactory.java
================================================
package smpl.ordering.repositories;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import smpl.ordering.OrderingConfiguration;
import smpl.ordering.repositories.mock.*;
import smpl.ordering.repositories.mongodb.*;

@SuppressWarnings("EmptyCatchBlock")
public class RepositoryFactory
{

    public static CatalogItemsRepository getCatalogItemsRepository()
    {
        switch (s_factory.storageKind)
        {
        case RepositoryFactory.MEMORY:
            return s_factory.mockRepos.catalogItems;
        case RepositoryFactory.MONGODB:
            return s_factory.mongodbRepos.catalogItems;
        default:
            return null;
        }
    }

    public static DealersRepository getDealersRepository()
    {
        switch (s_factory.storageKind)
        {
        case RepositoryFactory.MEMORY:
            return s_factory.mockRepos.dealers;
        case RepositoryFactory.MONGODB:
            return s_factory.mongodbRepos.dealers;
        default:
            return null;
        }
    }

    public static OrderRepository getOrderRepository()
    {
        switch (s_factory.storageKind)
        {
        case RepositoryFactory.MEMORY:
            return s_factory.mockRepos.orders;
        case RepositoryFactory.MONGODB:
            return s_factory.mongodbRepos.orders;
        default:
            return null;
        }
    }

    public static QuoteRepository getQuoteRepository()
    {
        switch (s_factory.storageKind)
        {
        case RepositoryFactory.MEMORY:
            return s_factory.mockRepos.quotes;
        case RepositoryFactory.MONGODB:
            return s_factory.mongodbRepos.quotes;
        default:
            return null;
        }
    }

    public static ShipmentRepository getShipmentRepository()
    {
        switch (s_factory.storageKind)
        {
        case RepositoryFactory.MEMORY:
            return s_factory.mockRepos.shipments;
        case RepositoryFactory.MONGODB:
            return s_factory.mongodbRepos.shipments;
        default:
            return null;
        }
    }

    private void init(String storage)
    {
        if (mongoTemplate == null)
        {
            try
            {
                mongoTemplate = OrderingConfiguration.getApplicationContext().getBean(MongoTemplate.class);
            }
            catch (Exception exc)
            {
            }
        }

        this.storageKind = storage;
        this.mockRepos = new Repositories();
        this.mongodbRepos = new Repositories();

        this.mockRepos.catalogItems = new MockCatalogItemsRepository();
        this.mockRepos.dealers = new MockDealersRepository();
        this.mockRepos.quotes = new MockQuoteRepository(this.mockRepos.catalogItems, this.mockRepos.dealers);
        this.mockRepos.orders = new MockOrderRepository(this.mockRepos.quotes);
        this.mockRepos.shipments = new MockShipmentRepository(this.mockRepos.orders);

        this.mongodbRepos.catalogItems = new MongoCatalogItemsRepository(mongoTemplate);
        this.mongodbRepos.dealers = new MongoDealersRepository(mongoTemplate);
        this.mongodbRepos.quotes = new MongoQuoteRepository(mongoTemplate, this.mongodbRepos.dealers);
        this.mongodbRepos.orders = new MongoOrderRepository(mongoTemplate, this.mongodbRepos.quotes);
        this.mongodbRepos.shipments = new MongoShipmentRepository(mongoTemplate, this.mongodbRepos.orders);
    }

    private RepositoryFactory(String storage)
    {
        init(storage);
    }

    public static synchronized RepositoryFactory getFactory()
    {
        return s_factory;
    }

    static public void reset(String storage)
    {
        if (s_factory != null)
        {
            s_factory.mongoTemplate = null;
        }
        s_factory = new RepositoryFactory(storage);
    }

    @Autowired
    private MongoTemplate mongoTemplate;

    private class Repositories
    {
        CatalogItemsRepository catalogItems;
        DealersRepository dealers;
        QuoteRepository quotes;
        OrderRepository orders;
        ShipmentRepository shipments;
    }

    private Repositories mockRepos;
    private Repositories mongodbRepos;

    private String storageKind;
    private static RepositoryFactory s_factory;

    public static final String MEMORY = "memory";
    public static final String MONGODB = "mongodb";
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/ShipmentRepository.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.BadRequestException;
import smpl.ordering.models.OrderStatus;
import smpl.ordering.models.ShipmentEventInfo;
import smpl.ordering.models.ShipmentRecord;

import java.util.List;

/**
 * Interface for repositories holding shipment data.
 */
public interface ShipmentRepository
{
    List<ShipmentRecord> getShipments(OrderStatus status);

    ShipmentRecord getShipmentById(String id);

    ShipmentRecord createShipment(ShipmentRecord info) throws BadRequestException;

    boolean addEvent(String id, ShipmentEventInfo event);

    boolean updateShipment(ShipmentRecord info);

    boolean removeShipment(String id, String eTag);
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mock/MockCatalogItemsRepository.java
================================================
package smpl.ordering.repositories.mock;

import smpl.ordering.TestPath;
import smpl.ordering.models.CatalogItem;
import smpl.ordering.repositories.CatalogItemsRepository;

import java.util.ArrayList;
import java.util.List;

/**
 * An in-memory repository of catalog items. Used for testing the API surface area.
 */
public class MockCatalogItemsRepository
        implements CatalogItemsRepository, TestPath
{
    public MockCatalogItemsRepository()
    {
        catalog.add(new CatalogItem("MRP-0001", "Brake Pads", 26.99,  10,  3));
        catalog.add(new CatalogItem("MRP-0002", "Brake Calipers", 33.99, 10, 3));
        catalog.add(new CatalogItem("MRP-0003", "Brake Calipers Guide Pin", 2.99, 10, 3));
    }

    /**
     * Retrieves a list of the items in the catalog.
     *
     * @return An catalog item list
     */
    @Override
    public List<CatalogItem> getCatalogItems()
    {

        List<CatalogItem> result = new ArrayList<>();
        for (CatalogItem catalogItem : catalog)
        {
            result.add(new CatalogItem(catalogItem));
        }
        return result;
    }

    /**
     * Retrieves information on a specific product
     *
     * @param sku The SKU number
     * @return The catalogItem, null if not found.
     */
    @Override
    public CatalogItem getCatalogItem(String sku)
    {
        for (CatalogItem catalogItem : catalog)
        {
            if (compareSkuNumbers(sku, catalogItem))
            {
                return new CatalogItem(catalogItem);
            }
        }
        return null;
    }

    private boolean compareSkuNumbers(String sku, CatalogItem catalogItem)
    {
        return catalogItem.getSkuNumber().toLowerCase().equals(sku.toLowerCase());
    }

    /**
     * Insert or update an catalog item product information record in the catalog.
     *
     * @param sku       The SKU number
     * @param catalogItem The catalog item information record.
     * @param eTag      An entity tag used for optimistic concurrency
     * @return true if update, false if insert.
     */
    @Override
    public boolean upsertCatalogItem(String sku, CatalogItem catalogItem, String eTag)
    {
        for (int i = 0; i < catalog.size(); ++i)
        {
            CatalogItem ci = catalog.get(i);
            if (compareSkuNumbers(sku, ci))
            {
                catalog.set(i, catalogItem);
                return true;
            }
        }
        catalog.add(catalogItem);
        return false;
    }

    /**
     * Remove an catalog item information record from the catalog.
     *
     * @param sku The SKU number
     * @return true if found, false otherwise.
     */
    @Override
    public boolean removeCatalogItem(String sku, String eTag)
    {
        for (int i = 0; i < catalog.size(); ++i)
        {
            CatalogItem catalogItem = catalog.get(i);
            if (compareSkuNumbers(sku, catalogItem))
            {
                catalog.remove(i);
                return true;
            }
        }
        return false;
    }

    private final List<CatalogItem> catalog = new ArrayList<>();

    @Override
    public void reset()
    {
        catalog.clear();
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mock/MockDealersRepository.java
================================================
package smpl.ordering.repositories.mock;

import smpl.ordering.TestPath;
import smpl.ordering.models.DealerInfo;
import smpl.ordering.repositories.DealersRepository;

import java.util.ArrayList;
import java.util.List;

/**
 * In-memory dealer repository.
 */
public class MockDealersRepository
        implements DealersRepository, TestPath
{
    public MockDealersRepository()
    {
        this.dealers = new ArrayList<>();
    }

    @Override
    public List<DealerInfo> getDealers()
    {
        List<DealerInfo> result = new ArrayList<>();
        for (DealerInfo info : dealers)
        {
            result.add(new DealerInfo(info));
        }
        return result;
    }

    @Override
    public DealerInfo getDealer(String name)
    {
        for (DealerInfo info : dealers)
        {
            if (compareDealerNames(name, info))
            {
                return new DealerInfo(info);
            }
        }
        return null;
    }

    private boolean compareDealerNames(String name, DealerInfo info)
    {
        return info.getName().toLowerCase().equals(name.toLowerCase());
    }

    @Override
    public boolean upsertDealer(DealerInfo dealer, String eTag)
    {
        String name = dealer.getName();
        for (int i = 0; i < dealers.size(); ++i)
        {
            DealerInfo info = dealers.get(i);
            if (compareDealerNames(name, info))
            {
                dealers.set(i, dealer);
                return true;
            }
        }
        dealers.add(dealer);
        return false;
    }

    @Override
    public boolean removeDealer(String name, String eTag)
    {
        for (int i = 0; i < dealers.size(); ++i)
        {
            DealerInfo info = dealers.get(i);
            if (compareDealerNames(name, info))
            {
                dealers.remove(i);
                return true;
            }
        }
        return false;
    }

    private final List<DealerInfo> dealers;

    @Override
    public void reset()
    {
        dealers.clear();
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mock/MockOrderRepository.java
================================================
package smpl.ordering.repositories.mock;

import smpl.ordering.BadRequestException;
import smpl.ordering.ConflictingRequestException;
import smpl.ordering.TestPath;
import smpl.ordering.models.*;
import smpl.ordering.repositories.OrderRepository;
import smpl.ordering.repositories.QuoteRepository;

import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;

/**
 * In-memory order repository implementation class
 */
public class MockOrderRepository
        implements OrderRepository, TestPath
{
    public MockOrderRepository(QuoteRepository quotes)
    {
        this.orders = new ArrayList<>();
        this.quotes = quotes;
    }

    @Override
    public boolean hasOrder(String id)
    {
        for (Order order : orders)
        {
            if (order.getOrderId().equals(id))
            {
                return true;
            }
        }
        return false;
    }

    @Override
    public Order getOrder(String id)
    {
        for (Order order : orders)
        {
            if (order.getOrderId().equals(id))
            {
                return order;
            }
        }
        return null;
    }

    @Override
    public List<Order> getOrdersByStatus(OrderStatus status)
    {
        List<Order> lst = new ArrayList<>();
        for (Order order : orders)
        {
            if (status == OrderStatus.None || order.getStatus() == status)
            {
                lst.add(order);
            }
        }
        return lst;
    }

    @Override
    public List<Order> getOrdersByDealerName(String name, OrderStatus status)
    {
        List<Order> lst = new ArrayList<>();
        for (Order order : orders)
        {
            Quote q = quotes.getQuote(order.getQuoteId());
            if (q.getDealerName().toLowerCase().equals(name.toLowerCase()) &&
                    (status == OrderStatus.None || status == order.getStatus()))
            {
                lst.add(order);
            }
        }
        return lst;
    }

    @Override
    public Order getOrderByQuoteId(String id)
    {
        for (Order order : orders)
        {
            if (order.getQuoteId().equals(id))
            {
                return order;
            }
        }
        return null;
    }


    @Override
    public Order createOrder(String from) throws BadRequestException
    {
        Quote q = quotes.getQuote(from);
        if (q == null)
        {
            throw new BadRequestException(String.format("No such quote: %s", from));
        }

        Order assocOrder = getOrderByQuoteId(from);

        if (assocOrder != null)
        {
            throw new ConflictingRequestException(String.format("The quote has already been used to create an order: %s", assocOrder.getOrderId()));
        }

        Order result = new Order();
        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);

        result.setOrderDate(df.format(new Date()));
        result.setOrderId(String.format("order-%s", from));
        result.setQuoteId(from);
        result.setStatus(OrderStatus.Created);

        orders.add(result);

        return result;
    }

    @Override
    public boolean updateOrder(String id, Order order, String eTag)
    {
        Order old = getOrder(id);
        if (old == null) return false;
        int idx = orders.indexOf(old);
        orders.set(idx, order);
        return true;
    }

    @Override
    public boolean updateOrder(String id, OrderUpdateInfo info, String eTag) throws BadRequestException
    {
        Order old = getOrder(id);
        if (old == null) throw new BadRequestException("No such order");
        old.addEvent(info.getEventInfo());
        old.setStatus(info.getStatus());
        return true;
    }

    @Override
    public boolean removeOrder(String id, String eTag)
    {
        return false;
    }

    static
    {
        s_counter = new AtomicLong(0L);
    }

    private final List<Order> orders;
    private static AtomicLong s_counter;
    private final QuoteRepository quotes;

    @Override
    public void reset()
    {
        orders.clear();
        s_counter = new AtomicLong(0L);
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mock/MockQuoteRepository.java
================================================
package smpl.ordering.repositories.mock;

import smpl.ordering.TestPath;
import smpl.ordering.models.*;
import smpl.ordering.BadRequestException;
import smpl.ordering.repositories.CatalogItemsRepository;
import smpl.ordering.repositories.DealersRepository;
import smpl.ordering.repositories.QuoteRepository;

import java.util.List;
import java.util.ArrayList;
import java.util.Random;

/**
 * An in-memory repository of quotes. Used for testing the API surface area.
 */
@SuppressWarnings("UnusedParameters")
public class MockQuoteRepository
        implements QuoteRepository, TestPath
{
    public MockQuoteRepository(CatalogItemsRepository catalog, DealersRepository dealers)
    {
        this.quotes = new ArrayList<>();
        this.dealers = dealers;
    }

    /**
     * Retrieves a specific quote from the repository.
     *
     * @param id The quote id.
     * @return A Quote object, if found.
     */
    @Override
    public Quote getQuote(String id)
    {
        for (Quote q : quotes)
        {
            if (q.getQuoteId().equals(id))
            {
                return q;
            }
        }
        return null;
    }

    /**
     * Retrieves a list of quotes where the customer name contains the string passed in.
     *
     * @param customerName A fragment of the customer name.
     * @return A list of quotes, possibly empty.
     */
    @Override
    public List<Quote> getQuotesByCustomerName(String customerName)
    {
        List<Quote> lst = new ArrayList<>();
        for (Quote q : quotes)
        {
            if (q.getCustomerName().toLowerCase().contains(customerName.toLowerCase()))
            {
                lst.add(q);
            }
        }
        return lst;
    }

    @Override
    public List<String> getQuoteIdsByDealerName(String dealerName)
    {
        List<String> lst = new ArrayList<>();
        for (Quote q : quotes)
        {
            if (q.getDealerName().compareToIgnoreCase(dealerName) == 0)
            {
                lst.add(q.getQuoteId());
            }
        }
        return lst;
    }

    /**
     * Creates a new quote from information edited by a client.
     *
     * @param quote The client quote information.
     * @return A Quote object.
     */
    @Override
    public Quote createQuote(Quote quote) throws BadRequestException
    {
        DealerInfo info = dealers.getDealer(quote.getDealerName());
        if (info == null)
        {
            dealers.upsertDealer(new DealerInfo(quote.getDealerName()), null);
        }

        String id = quote.getQuoteId();

        if (id == null || id.isEmpty())
        {
            quote.setQuoteId(String.format("%d", s_counter.nextInt() & 0x7FFFFFFF));
        }
        else
        {
            if (getQuote(id) != null)
            {
                throw new BadRequestException(String.format("Duplicate: the quote '%s' already exists", id));
            }
        }

        quotes.add(quote);

        return quote;
    }

    /**
     * Update an existing quote from client-edited information.
     *
     * @param id   The quote id.
     * @param from New client-edited information.
     * @param eTag An entity tag used for optimistic concurrency
     * @return true if the quote exists, false otherwise.
     */
    @Override
    public boolean updateQuote(String id, Quote from, String eTag)
    {
        Quote quote = getQuote(id);
        if (quote == null) return false;

        DealerInfo info = dealers.getDealer(from.getDealerName());
        if (info == null)
        {
            dealers.upsertDealer(new DealerInfo(from.getDealerName()), null);
        }

        from.setQuoteId(id);

        int idx = quotes.indexOf(quote);
        quotes.set(idx, from);

        return true;
    }

    /**
     * Remove a quote from the system.
     *
     * @param id   The quote id.
     * @param eTag An entity tag used for optimistic concurrency
     * @return true if the quote exists, false otherwise
     */
    @Override
    public boolean removeQuote(String id, String eTag)
    {
        Quote quote = getQuote(id);
        if (quote == null) return false;
        quotes.remove(quote);
        return true;
    }

    static
    {
        s_counter = new Random();
    }

    private final List<Quote> quotes;
    private final DealersRepository dealers;
    private static final Random s_counter;

    @Override
    public void reset()
    {
        quotes.clear();
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mock/MockShipmentRepository.java
================================================
package smpl.ordering.repositories.mock;

import smpl.ordering.BadRequestException;
import smpl.ordering.TestPath;
import smpl.ordering.models.Order;
import smpl.ordering.models.OrderStatus;
import smpl.ordering.models.ShipmentEventInfo;
import smpl.ordering.models.ShipmentRecord;
import smpl.ordering.repositories.OrderRepository;
import smpl.ordering.repositories.ShipmentRepository;

import java.util.ArrayList;
import java.util.List;

public class MockShipmentRepository
        implements ShipmentRepository, TestPath
{
    public MockShipmentRepository(OrderRepository orders)
    {
        this.orders = orders;
    }

    @Override
    public List<ShipmentRecord> getShipments(OrderStatus status)
    {
        List<ShipmentRecord> result = new ArrayList<>();
        for (ShipmentRecord record : records)
        {
            if (status == OrderStatus.None)
            {
                result.add(new ShipmentRecord(record));
            }
            else
            {
                Order o = orders.getOrder(record.getOrderId());
                if (o.getStatus() == status)
                {
                    result.add(new ShipmentRecord(record));
                }
            }
        }
        return result;
    }

    @Override
    public ShipmentRecord getShipmentById(String id)
    {
        for (ShipmentRecord record : records)
        {
            if (record.getOrderId().equals(id))
            {
                return new ShipmentRecord(record);
            }
        }
        return null;
    }

    @Override
    public ShipmentRecord createShipment(ShipmentRecord info) throws BadRequestException
    {
        Order order = orders.getOrder(info.getOrderId());
        if (order == null)
        {
            throw new BadRequestException(String.format("No such order: %s", info.getOrderId()));
        }

        ShipmentRecord existing = getShipmentById(info.getOrderId());
        if (existing != null)
        {
            throw new BadRequestException(String.format("A shipment record for order '%s' already exists", info.getOrderId()));
        }

        ShipmentRecord result = new ShipmentRecord(info);
        records.add(result);
        return result;
    }

    @Override
    public boolean addEvent(String id, ShipmentEventInfo event)
    {
        ShipmentRecord existing = null;

        for (ShipmentRecord record : records)
        {
            if (record.getOrderId().equals(id))
            {
                existing = record;
                break;
            }
        }

        if (existing == null) return false;

        existing.addEvent(new ShipmentEventInfo(event.getDate(), event.getComments()));

        return true;
    }

    @Override
    public boolean updateShipment(ShipmentRecord info)
    {
        int idx = -1;
        String id = info.getOrderId();

        for (int i = 0; i < records.size(); ++i)
        {
            ShipmentRecord record = records.get(i);
            if (record.getOrderId().equals(id))
            {
                idx = i;
                break;
            }
        }

        if (idx == -1) return false;

        // Replace shipment in the same location

        records.set(idx, new ShipmentRecord(info));

        return true;
    }

    @Override
    public boolean removeShipment(String id, String eTag)
    {
        return false;
    }

    public void reset()
    {
        records.clear();
    }

    private final List<ShipmentRecord> records = new ArrayList<>();
    private final OrderRepository orders;
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/MongoCatalogItemsRepository.java
================================================
package smpl.ordering.repositories.mongodb;

import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import smpl.ordering.TestPath;
import smpl.ordering.repositories.CatalogItemsRepository;
import smpl.ordering.repositories.mongodb.models.CatalogItem;
import java.util.ArrayList;
import java.util.List;

/**
 * MongoDB-based catalog items repository implementation class
 */
public class MongoCatalogItemsRepository
        implements CatalogItemsRepository, TestPath
{
    @Override
    public List<smpl.ordering.models.CatalogItem> getCatalogItems()
    {
        List<CatalogItem> found = operations.findAll(CatalogItem.class);

        List<smpl.ordering.models.CatalogItem> result = new ArrayList<>();

        for (CatalogItem catalogItem : found)
        {
            result.add(catalogItem.toCatalogItem());
        }

        return result;
    }

    @Override
    public smpl.ordering.models.CatalogItem getCatalogItem(String sku)
    {
        CatalogItem existing = findExistingCatalogItem(sku);

        if (existing != null)
        {
            return existing.toCatalogItem();
        }

        return null;
    }

    private CatalogItem findExistingCatalogItem(String sku)
    {
        Query findExisting = new Query(Criteria.where("skuNumber").is(sku));
        return operations.findOne(findExisting, CatalogItem.class);
    }

    @Override
    public boolean upsertCatalogItem(String sku, smpl.ordering.models.CatalogItem catalogItem, String eTag)
    {
        CatalogItem existing = findExistingCatalogItem(sku);
        CatalogItem mongoCatalogItem = new smpl.ordering.repositories.mongodb.models.CatalogItem(catalogItem);

        if (existing != null)
        {
            mongoCatalogItem.setId(existing.getId());
        }

        operations.save(mongoCatalogItem);

        return existing != null;
    }

    @Override
    public boolean removeCatalogItem(String sku, String eTag)
    {
        Query findExisting = new Query(Criteria.where("skuNumber").is(sku));
        CatalogItem existing = operations.findAndRemove(findExisting, CatalogItem.class);
        return existing != null;
    }

    public MongoCatalogItemsRepository(MongoTemplate template)
    {
        operations = new MongoOperationsWithRetry(template);
    }

    private final MongoOperations operations;

    @Override
    public void reset()
    {
        operations.dropCollection(CatalogItem.class);
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/MongoDealersRepository.java
================================================
package smpl.ordering.repositories.mongodb;

import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import smpl.ordering.TestPath;
import smpl.ordering.models.DealerInfo;
import smpl.ordering.repositories.DealersRepository;
import smpl.ordering.repositories.mongodb.models.Dealer;

import java.util.ArrayList;
import java.util.List;

/**
 * MongoDB-based dealers repository implementation class
 */
public class MongoDealersRepository
        implements DealersRepository, TestPath
{

    @Override
    public List<DealerInfo> getDealers()
    {
        List<DealerInfo> result = new ArrayList<>();
        List<Dealer> found = operations.findAll(Dealer.class);

        for (Dealer dealer : found)
        {
            result.add(dealer.toDealerInfo());
        }
        return result;
    }

    @Override
    public DealerInfo getDealer(String name)
    {
        Query findExisting = new Query(Criteria.where("name").is(name));
        Dealer existing = operations.findOne(findExisting, Dealer.class);

        if (existing != null)
        {
            return existing.toDealerInfo();
        }
        return null;
    }

    @Override
    public boolean upsertDealer(DealerInfo dealer, String eTag)
    {
        Query findExisting = new Query(Criteria.where("name").is(dealer.getName()));
        Dealer existing = operations.findOne(findExisting, Dealer.class);
        Dealer mongoDealer = new Dealer(dealer);

        if (existing != null)
        {
            mongoDealer.setId(existing.getId());
        }

        operations.save(mongoDealer);

        return existing != null;
    }

    @Override
    public boolean removeDealer(String name, String eTag)
    {
        Query findExisting = new Query(Criteria.where("name").is(name));
        Dealer existing = operations.findAndRemove(findExisting, Dealer.class);
        return existing != null;
    }

    public MongoDealersRepository(MongoTemplate template)
    {
        operations = new MongoOperationsWithRetry(template);
    }

    private final MongoOperations operations;

    @Override
    public void reset()
    {
        operations.dropCollection("dealers");
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/MongoOperationsWithRetry.java
================================================
package smpl.ordering.repositories.mongodb;

import com.microsoft.applicationinsights.TelemetryClient;
import com.microsoft.applicationinsights.channel.TelemetryChannel;
import com.microsoft.applicationinsights.telemetry.Duration;
import com.microsoft.applicationinsights.telemetry.RemoteDependencyTelemetry;
import com.microsoft.applicationinsights.internal.schemav2.DependencyKind;
import com.microsoft.applicationinsights.internal.schemav2.DependencySourceType;
import com.mongodb.CommandResult;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.WriteResult;
import org.springframework.data.mongodb.core.*;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationResults;
import org.springframework.data.mongodb.core.aggregation.TypedAggregation;
import org.springframework.data.mongodb.core.convert.MongoConverter;
import org.springframework.data.mongodb.core.geo.GeoResults;
import org.springframework.data.mongodb.core.mapreduce.GroupBy;
import org.springframework.data.mongodb.core.mapreduce.GroupByResults;
import org.springframework.data.mongodb.core.mapreduce.MapReduceOptions;
import org.springframework.data.mongodb.core.mapreduce.MapReduceResults;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.NearQuery;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import smpl.ordering.Utility;

import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Set;

@SuppressWarnings({"ALL", "deprecation"})
public class MongoOperationsWithRetry
        implements MongoOperations
{
    private MongoOperations underlying;

    MongoOperationsWithRetry(MongoOperations underlying)
    {
        this.underlying = underlying;
    }

    @Override
    public String getCollectionName(Class<?> entityClass)
    {
        return underlying.getCollectionName(entityClass);
    }

    @Override
    public CommandResult executeCommand(String jsonCommand)
    {
        return underlying.executeCommand(jsonCommand);
    }

    @Override
    public CommandResult executeCommand(DBObject command)
    {
        return underlying.executeCommand(command);
    }

    @Override
    public CommandResult executeCommand(DBObject command, int options)
    {
        return underlying.executeCommand(command, options);
    }

    @Override
    public void executeQuery(Query query, String collectionName, DocumentCallbackHandler dch)
    {
        underlying.executeQuery(query, collectionName, dch);
    }

    @Override
    public <T> T execute(DbCallback<T> action)
    {
        return underlying.execute(action);
    }

    @Override
    public <T> T execute(Class<?> entityClass, CollectionCallback<T> action)
    {
        return underlying.execute(entityClass, action);
    }

    @Override
    public <T> T execute(String collectionName, CollectionCallback<T> action)
    {
        return underlying.execute(collectionName, action);
    }

    @Override
    public <T> T executeInSession(DbCallback<T> action)
    {
        return underlying.executeInSession(action);
    }

    @Override
    public <T> DBCollection createCollection(Class<T> entityClass)
    {
        return underlying.createCollection(entityClass);
    }

    @Override
    public <T> DBCollection createCollection(Class<T> entityClass, CollectionOptions collectionOptions)
    {
        return underlying.createCollection(entityClass, collectionOptions);
    }

    @Override
    public DBCollection createCollection(String collectionName)
    {
        return underlying.createCollection(collectionName);
    }

    @Override
    public DBCollection createCollection(String collectionName, CollectionOptions collectionOptions)
    {
        return underlying.createCollection(collectionName, collectionOptions);
    }

    @Override
    public Set<String> getCollectionNames()
    {
        return underlying.getCollectionNames();
    }

    @Override
    public DBCollection getCollection(String collectionName)
    {
        return underlying.getCollection(collectionName);
    }

    @Override
    public <T> boolean collectionExists(Class<T> entityClass)
    {
        return underlying.collectionExists(entityClass);
    }

    @Override
    public boolean collectionExists(String collectionName)
    {
        return underlying.collectionExists(collectionName);
    }

    @Override
    public <T> void dropCollection(Class<T> entityClass)
    {
        boolean success = false;

        Date start = new Date();
        try
        {
            try
            {
                underlying.dropCollection(entityClass);
            }
            catch (org.springframework.dao.DataAccessResourceFailureException darf)
            {
                if (darf.getRootCause().getClass() != java.net.SocketTimeoutException.class)
                {
                    throw darf;
                }
                underlying.dropCollection(entityClass);
            }
            success = true;
        }
        finally
        {
            sendTelemetry(start, new Date(), "dropCollection", success);
        }
    }

    private void sendTelemetry(Date start, Date end, String operation, boolean success)
    {
        TelemetryClient client = Utility.getTelemetryClient();
        if (client != null)
        {
            RemoteDependencyTelemetry rdt = new RemoteDependencyTelemetry(String.format("MongoDB.%s", operation));
			Duration duration = new Duration(end.getTime() - start.getTime());
            rdt.setDuration(duration);
            rdt.setCount(1);
            rdt.setDependencyKind(DependencyKind.Other);
            rdt.setSuccess(success);
            client.track(rdt);
        }
    }

    @Override
    public void dropCollection(String collectionName)
    {
        boolean success = false;
        Date start = new Date();
        try
        {
            try
            {
                underlying.dropCollection(collectionName);
            }
            catch (org.springframework.dao.DataAccessResourceFailureException darf)
            {
                if (darf.getRootCause().getClass() != java.net.SocketTimeoutException.class)
                {
                    throw darf;
                }
                underlying.dropCollection(collectionName);
            }
            success = true;
        }
        finally
        {
            sendTelemetry(start, new Date(), "dropCollection", success);
        }
    }

    @Override
    public IndexOperations indexOps(String collectionName)
    {
        return underlying.indexOps(collectionName);
    }

    @Override
    public IndexOperations indexOps(Class<?> entityClass)
    {
        return underlying.indexOps(entityClass);
    }

    @Override
    public <T> List<T> findAll(Class<T> entityClass)
    {
        List<T> result = null;
        Date start = new Date();
        boolean success = false;
        try
        {
            try
            {
                result = underlying.findAll(entityClass);
            }
            catch (org.springframework.dao.DataAccessResourceFailureException darf)
            {
                if (darf.getRootCause().getClass() != java.net.SocketTimeoutException.class)
                {
                    throw darf;
                }
                result = underlying.findAll(entityClass);
            }
            success = true;
        }
        finally
        {
            sendTelemetry(start, new Date(), "findAll", success);
        }

        return result;
    }

    @Override
    public <T> List<T> findAll(Class<T> entityClass, String collectionName)
    {
        return underlying.findAll(entityClass, collectionName);
    }

    @Override
    public <T> GroupByResults<T> group(String inputCollectionName, GroupBy groupBy, Class<T> entityClass)
    {
        return underlying.group(inputCollectionName, groupBy, entityClass);
    }

    @Override
    public <T> GroupByResults<T> group(Criteria criteria, String inputCollectionName, GroupBy groupBy, Class<T> entityClass)
    {
        return underlying.group(criteria, inputCollectionName, groupBy, entityClass);
    }

    @Override
    public <O> AggregationResults<O> aggregate(TypedAggregation<?> aggregation, String collectionName, Class<O> outputType)
    {
        return underlying.aggregate(aggregation, collectionName, outputType);
    }

    @Override
    public <O> AggregationResults<O> aggregate(TypedAggregation<?> aggregation, Class<O> outputType)
    {
        return underlying.aggregate(aggregation, outputType);
    }

    @Override
    public <O> AggregationResults<O> aggregate(Aggregation aggregation, Class<?> inputType, Class<O> outputType)
    {
        return underlying.aggregate(aggregation, inputType, outputType);
    }

    @Override
    public <O> AggregationResults<O> aggregate(Aggregation aggregation, String collectionName, Class<O> outputType)
    {
        return underlying.aggregate(aggregation, collectionName, outputType);
    }

    @Override
    public <T> MapReduceResults<T> mapReduce(String inputCollectionName, String mapFunction, String reduceFunction, Class<T> entityClass)
    {
        return underlying.mapReduce(inputCollectionName, mapFunction, reduceFunction, entityClass);
    }

    @Override
    public <T> MapReduceResults<T> mapReduce(String inputCollectionName, String mapFunction, String reduceFunction, MapReduceOptions mapReduceOptions, Class<T> entityClass)
    {
        return underlying.mapReduce(inputCollectionName, mapFunction, reduceFunction, mapReduceOptions, entityClass);
    }

    @Override
    public <T> MapReduceResults<T> mapReduce(Query query, String inputCollectionName, String mapFunction, String reduceFunction, Class<T> entityClass)
    {
        return underlying.mapReduce(query, inputCollectionName, mapFunction, reduceFunction, entityClass);
    }

    @Override
    public <T> MapReduceResults<T> mapReduce(Query query, String inputCollectionName, String mapFunction, String reduceFunction, MapReduceOptions mapReduceOptions, Class<T> entityClass)
    {
        return underlying.mapReduce(query, inputCollectionName, mapFunction, reduceFunction, mapReduceOptions, entityClass);
    }

    @Override
    public <T> GeoResults<T> geoNear(NearQuery near, Class<T> entityClass)
    {
        return underlying.geoNear(near, entityClass);
    }

    @Override
    public <T> GeoResults<T> geoNear(NearQuery near, Class<T> entityClass, String collectionName)
    {
        return underlying.geoNear(near, entityClass, collectionName);
    }

    @Override
    public <T> T findOne(Query query, Class<T> entityClass)
    {
        T result = null;
        Date start = new Date();
        boolean success = false;
        try
        {
            try
            {
                result = underlying.findOne(query, entityClass);
            }
            catch (org.springframework.dao.DataAccessResourceFailureException darf)
            {
                if (darf.getRootCause().getClass() != java.net.SocketTimeoutException.class)
                {
                    throw darf;
                }
                result = underlying.findOne(query, entityClass);
            }
            success = true;
        }
        finally
        {
            sendTelemetry(start, new Date(), "findOne", success);
        }

        return result;
    }

    @Override
    public <T> T findOne(Query query, Class<T> entityClass, String collectionName)
    {
        return underlying.findOne(query, entityClass, collectionName);
    }

    @Override
    public boolean exists(Query query, String collectionName)
    {
        return underlying.exists(query, collectionName);
    }

    @Override
    public boolean exists(Query query, Class<?> entityClass)
    {
        boolean result = false;
        Date start = new Date();
        boolean success = false;
        try
        {
            try
            {
                result = underlying.exists(query, entityClass);
            }
            catch (org.springframework.dao.DataAccessResourceFailureException darf)
            {
                if (darf.getRootCause().getClass() != java.net.SocketTimeoutException.class)
                {
                    throw darf;
                }
                result = underlying.exists(query, entityClass);
            }
        }
        finally
        {
            sendTelemetry(start, new Date(), "exists", success);
        }

        return result;
    }

    @Override
    public boolean exists(Query query, Class<?> entityClass, String collectionName)
    {
        return underlying.exists(query, entityClass, collectionName);
    }

    @Override
    public <T> List<T> find(Query query, Class<T> entityClass)
    {
        List<T> result = null;
        Date start = new Date();
        boolean success = false;
        try
        {
            try
            {
                result = underlying.find(query, entityClass);
            }
            catch (org.springframework.dao.DataAccessResourceFailureException darf)
            {
                if (darf.getRootCause().getClass() != java.net.SocketTimeoutException.class)
                {
                    throw darf;
                }
                result = underlying.find(query, entityClass);
            }
        }
        finally
        {
            sendTelemetry(start, new Date(), "find", success);
        }

        return result;
    }

    @Override
    public <T> List<T> find(Query query, Class<T> entityClass, String collectionName)
    {
        return underlying.find(query, entityClass, collectionName);
    }

    @Override
    public <T> T findById(Object id, Class<T> entityClass)
    {
        return underlying.findById(id, entityClass);
    }

    @Override
    public <T> T findById(Object id, Class<T> entityClass, String collectionName)
    {
        return underlying.findById(id, entityClass, collectionName);
    }

    @Override
    public <T> T findAndModify(Query query, Update update, Class<T> entityClass)
    {
        return underlying.findAndModify(query, update, entityClass);
    }

    @Override
    public <T> T findAndModify(Query query, Update update, Class<T> entityClass, String collectionName)
    {
        return underlying.findAndModify(query, update, entityClass, collectionName);
    }

    @Override
    public <T> T findAndModify(Query query, Update update, FindAndModifyOptions options, Class<T> entityClass)
    {
        return underlying.findAndModify(query, update, options, entityClass);
    }

    @Override
    public <T> T findAndModify(Query query, Update update, FindAndModifyOptions options, Class<T> entityClass, String collectionName)
    {
        return underlying.findAndModify(query, update, options, entityClass, collectionName);
    }

    @Override
    public <T> T findAndRemove(Query query, Class<T> entityClass)
    {
        T result = null;
        Date start = new Date();
        boolean success = false;
        try
        {
            try
            {
                result = underlying.findAndRemove(query, entityClass);
            }
            catch (org.springframework.dao.DataAccessResourceFailureException darf)
            {
                if (darf.getRootCause().getClass() != java.net.SocketTimeoutException.class)
                {
                    throw darf;
                }
                result = underlying.findAndRemove(query, entityClass);
            }
        }
        finally
        {
            sendTelemetry(start, new Date(), "findAndRemove", success);
        }

        return result;
    }

    @Override
    public <T> T findAndRemove(Query query, Class<T> entityClass, String collectionName)
    {
        return underlying.findAndRemove(query, entityClass, collectionName);
    }

    @Override
    public long count(Query query, Class<?> entityClass)
    {
        return underlying.count(query, entityClass);
    }

    @Override
    public long count(Query query, String collectionName)
    {
        return underlying.count(query, collectionName);
    }

    @Override
    public void insert(Object objectToSave)
    {
        Date start = new Date();
        boolean success = false;
        try
        {
            try
            {
                underlying.insert(objectToSave);
            }
            catch (org.springframework.dao.DataAccessResourceFailureException darf)
            {
                if (darf.getRootCause().getClass() != java.net.SocketTimeoutException.class)
                {
                    throw darf;
                }
                underlying.insert(objectToSave);
            }
        }
        finally
        {
            sendTelemetry(start, new Date(), "insert", success);
        }
    }

    @Override
    public void insert(Object objectToSave, String collectionName)
    {
        underlying.insert(objectToSave, collectionName);
    }

    @Override
    public void insert(Collection<? extends Object> batchToSave, Class<?> entityClass)
    {
        underlying.insert(batchToSave, entityClass);
    }

    @Override
    public void insert(Collection<? extends Object> batchToSave, String collectionName)
    {
        underlying.insert(batchToSave, collectionName);
    }

    @Override
    public void insertAll(Collection<? extends Object> objectsToSave)
    {
        underlying.insertAll(objectsToSave);
    }

    @Override
    public void save(Object objectToSave)
    {
        Date start = new Date();
        boolean success = false;
        try
        {
            try
            {
                underlying.save(objectToSave);
            }
            catch (org.springframework.dao.DataAccessResourceFailureException darf)
            {
                if (darf.getRootCause().getClass() != java.net.SocketTimeoutException.class)
                {
                    throw darf;
                }
                underlying.save(objectToSave);
            }
        }
        finally
        {
            sendTelemetry(start, new Date(), "save", success);
        }

    }

    @Override
    public void save(Object objectToSave, String collectionName)
    {
        underlying.save(objectToSave, collectionName);
    }

    @Override
    public WriteResult upsert(Query query, Update update, Class<?> entityClass)
    {
        return underlying.upsert(query, update, entityClass);
    }

    @Override
    public WriteResult upsert(Query query, Update update, String collectionName)
    {
        return underlying.upsert(query, update, collectionName);
    }

    @Override
    public WriteResult upsert(Query query, Update update, Class<?> entityClass, String collectionName)
    {
        return underlying.upsert(query, update, entityClass, collectionName);
    }

    @Override
    public WriteResult updateFirst(Query query, Update update, Class<?> entityClass)
    {
        return underlying.updateFirst(query, update, entityClass);
    }

    @Override
    public WriteResult updateFirst(Query query, Update update, String collectionName)
    {
        return underlying.updateFirst(query, update, collectionName);
    }

    @Override
    public WriteResult updateFirst(Query query, Update update, Class<?> entityClass, String collectionName)
    {
        return underlying.updateFirst(query, update, entityClass, collectionName);
    }

    @Override
    public WriteResult updateMulti(Query query, Update update, Class<?> entityClass)
    {
        return underlying.updateMulti(query, update, entityClass);
    }

    @Override
    public WriteResult updateMulti(Query query, Update update, String collectionName)
    {
        return underlying.updateMulti(query, update, collectionName);
    }

    @Override
    public WriteResult updateMulti(Query query, Update update, Class<?> entityClass, String collectionName)
    {
        return underlying.updateMulti(query, update, entityClass, collectionName);
    }

    @Override
    public WriteResult remove(Object object)
    {
        return underlying.remove(object);
    }

    @Override
    public WriteResult remove(Object object, String collection)
    {
        return underlying.remove(object, collection);
    }

    @Override
    public WriteResult remove(Query query, Class<?> entityClass)
    {
        return underlying.remove(query, entityClass);
    }

    @Override
    public WriteResult remove(Query query, Class<?> entityClass, String collectionName)
    {
        return underlying.remove(query, entityClass, collectionName);
    }

    @Override
    public WriteResult remove(Query query, String collectionName)
    {
        return underlying.remove(query, collectionName);
    }

    @Override
    public <T> List<T> findAllAndRemove(Query query, String collectionName)
    {
        return underlying.findAllAndRemove(query, collectionName);
    }

    @Override
    public <T> List<T> findAllAndRemove(Query query, Class<T> entityClass)
    {
        return underlying.findAllAndRemove(query, entityClass);
    }

    @Override
    public <T> List<T> findAllAndRemove(Query query, Class<T> entityClass, String collectionName)
    {
        return underlying.findAllAndRemove(query, entityClass, collectionName);
    }

    @Override
    public MongoConverter getConverter()
    {
        return underlying.getConverter();
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/MongoOrderRepository.java
================================================
package smpl.ordering.repositories.mongodb;

import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import smpl.ordering.BadRequestException;
import smpl.ordering.ConflictingRequestException;
import smpl.ordering.TestPath;
import smpl.ordering.models.*;
import smpl.ordering.repositories.OrderRepository;
import smpl.ordering.repositories.QuoteRepository;
import smpl.ordering.repositories.mongodb.models.OrderDetails;
import smpl.ordering.repositories.mongodb.models.QuoteDetails;

import java.text.DateFormat;
import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class MongoOrderRepository
        implements OrderRepository, TestPath
{
    @Override
    public boolean hasOrder(String id)
    {
        Query findExisting = new Query(Criteria.where("orderId").is(id));
        return operations.exists(findExisting, OrderDetails.class);
    }

    @Override
    public Order getOrder(String id)
    {
        OrderDetails existing = findExistingOrder(id);
        return (existing != null) ? existing.toOrder() : null;
    }

    private OrderDetails findExistingOrder(String id)
    {
        Query findExisting = new Query(Criteria.where("orderId").is(id));
        return operations.findOne(findExisting, OrderDetails.class);
    }

    @Override
    public List<Order> getOrdersByStatus(OrderStatus status)
    {
        List<OrderDetails> found;
        if (status == OrderStatus.None)
        {
            found = operations.findAll(OrderDetails.class);
        }
        else
        {
            Query findExisting = new Query(Criteria.where("status").is(status));
            found = operations.find(findExisting, OrderDetails.class);
        }

        List<Order> result = new ArrayList<>();
        if (found != null && found.size() > 0)
        {
            for (OrderDetails details : found)
            {
                result.add(details.toOrder());
            }
        }
        return result;
    }


    @Override
    public List<Order> getOrdersByDealerName(String dealer, OrderStatus status)
    {
        List<String> quotesIds = quotes.getQuoteIdsByDealerName(dealer);

        Criteria criteria = Criteria.where("quoteId").in(quotesIds);

        if (status != OrderStatus.None)
        {
            criteria = criteria.and("status").is(status);
        }

        Query findExisting = new Query(criteria);

        List<OrderDetails> found = operations.find(findExisting, OrderDetails.class);

        List<Order> result = new ArrayList<>();
        if (found != null && found.size() > 0)
        {
            for (OrderDetails details : found)
            {
                result.add(details.toOrder());
            }
        }
        return result;
    }

    @Override
    public Order getOrderByQuoteId(String id)
    {
        Query findExisting = new Query(Criteria.where("quoteId").is(id));
        OrderDetails existing = operations.findOne(findExisting, OrderDetails.class);
        return (existing != null) ? existing.toOrder() : null;
    }

    @Override
    public Order createOrder(String from) throws BadRequestException
    {
        Quote q = quotes.getQuote(from);
        if (q == null)
        {
            throw new BadRequestException(String.format("No such quote: %s", from));
        }

        Order assocOrder = getOrderByQuoteId(from);

        if (assocOrder != null)
        {
            throw new ConflictingRequestException(String.format("The quote has already been used to create an order: %s", assocOrder.getOrderId()));
        }

        Order result = new Order();
        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);
        result.setOrderDate(df.format(new Date()));
        result.setOrderId(String.format("order-%s", from));
        result.setQuoteId(from);
        result.setStatus(OrderStatus.Created);

        operations.insert(new OrderDetails(result));

        return result;
    }

    @Override
    public boolean updateOrder(String id, Order order, String eTag)
    {
        OrderDetails existing = findExistingOrder(id);
        return (existing != null) && saveOrder(id, order, existing);
    }

    private boolean saveOrder(String id, Order order, OrderDetails existing)
    {
        order.setOrderId(id); // Just to make sure

        OrderDetails details = new OrderDetails(order);
        details.setId(existing.getId());

        operations.save(details);

        return true;
    }

    @Override
    public boolean updateOrder(String id, OrderUpdateInfo info, String eTag) throws BadRequestException
    {
        OrderDetails existing = findExistingOrder(id);

        Order old = existing.toOrder();
        old.addEvent(info.getEventInfo());
        old.setStatus(info.getStatus());
        return saveOrder(id, old, existing);
    }

    @Override
    public boolean removeOrder(String id, String eTag)
    {
        Query findExisting = new Query(Criteria.where("orderId").is(id));
        OrderDetails existing = operations.findAndRemove(findExisting, OrderDetails.class);
        return existing != null;
    }

    public MongoOrderRepository(MongoTemplate template, QuoteRepository quotes)
    {
        this.operations = new MongoOperationsWithRetry(template);
        this.quotes = quotes;
    }

    static
    {
        s_counter = new AtomicLong(0L);
    }

    private static AtomicLong s_counter;
    private final QuoteRepository quotes;

    private final MongoOperations operations;

    @Override
    public void reset()
    {
        operations.dropCollection("orders");
        s_counter = new AtomicLong(0L);
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/MongoQuoteRepository.java
================================================
package smpl.ordering.repositories.mongodb;

import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import smpl.ordering.BadRequestException;
import smpl.ordering.TestPath;
import smpl.ordering.models.*;
import smpl.ordering.repositories.DealersRepository;
import smpl.ordering.repositories.QuoteRepository;
import smpl.ordering.repositories.mongodb.models.QuoteDetails;

import java.util.*;

public class MongoQuoteRepository
        implements QuoteRepository, TestPath
{
    @Override
    public Quote getQuote(String id)
    {
        QuoteDetails existing = findExistingQuote(id);
        return (existing != null) ? existing.toQuote() : null;
    }

    private QuoteDetails findExistingQuote(String id)
    {
        Query findExisting = new Query(Criteria.where("quoteId").is(id));
        return operations.findOne(findExisting, QuoteDetails.class);
    }

    @Override
    public List<Quote> getQuotesByCustomerName(String customerName)
    {
        // TODO: figure out a way to not bring all quotes into memory just to
        //       do the filtering. The database should filter for us.

        //Query findExisting = new Query(Criteria.where("customerName").is(customerName));
        List<QuoteDetails> found = operations.findAll(QuoteDetails.class);

        List<Quote> result = new ArrayList<>();

        if (found != null)
        {
            for (QuoteDetails q : found)
            {
                String cName = q.getCustomerName();
                if (cName != null && cName.toLowerCase().contains(customerName.toLowerCase()))
                {
                    result.add(q.toQuote());
                }
            }
        }
        return result;
    }

    @Override
    public List<String> getQuoteIdsByDealerName(String dealerName)
    {
        List<QuoteDetails> foundQueries = operations.find(new Query(Criteria.where("dealerName").is(dealerName)), QuoteDetails.class);
        List<String> quotesIds = new ArrayList<>();
        for (QuoteDetails q : foundQueries)
        {
            quotesIds.add(q.getQuoteId());
        }

        return quotesIds;
    }

    @Override
    public Quote createQuote(Quote from) throws BadRequestException
    {
        Quote quote = new Quote(from);

        DealerInfo info = dealers.getDealer(from.getDealerName());
        if (info == null)
        {
            dealers.upsertDealer(new DealerInfo(from.getDealerName()), null);
        }

        String id = quote.getQuoteId();

        if (id == null || id.isEmpty())
        {
            quote.setQuoteId(String.format("%d", s_counter.nextInt() & 0x7FFFFFFF));
        }
        else
        {
            if (getQuote(id) != null)
            {
                throw new BadRequestException(String.format("Duplicate: the quote '%s' already exists", id));
            }
        }

        operations.insert(new QuoteDetails(quote));

        return quote;
    }

    @Override
    public boolean updateQuote(String id, Quote from, String eTag)
    {
        QuoteDetails existing = findExistingQuote(id);
        if (existing == null) return false;

        from.setQuoteId(id); // Just to make sure...

        DealerInfo info = dealers.getDealer(from.getDealerName());
        if (info == null)
        {
            dealers.upsertDealer(new DealerInfo(from.getDealerName()), null);
        }

        QuoteDetails details = new QuoteDetails(from);
        details.setId(existing.getId());

        operations.save(details);

        return true;
    }

    @Override
    public boolean removeQuote(String id, String eTag)
    {
        Query findExisting = new Query(Criteria.where("quoteId").is(id));
        QuoteDetails existing = operations.findAndRemove(findExisting, QuoteDetails.class);
        return existing != null;
    }

    public MongoQuoteRepository(MongoTemplate template, DealersRepository dealers)
    {
        this.operations = new MongoOperationsWithRetry(template);
        this.dealers = dealers;
    }

    static
    {
        s_counter = new Random();
    }

    private final DealersRepository dealers;

    private static final Random s_counter;
    private final MongoOperations operations;

    @Override
    public void reset()
    {
        operations.dropCollection("quotes");
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/MongoShipmentRepository.java
================================================
package smpl.ordering.repositories.mongodb;

import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import smpl.ordering.BadRequestException;
import smpl.ordering.ConflictingRequestException;
import smpl.ordering.TestPath;
import smpl.ordering.models.*;
import smpl.ordering.repositories.OrderRepository;
import smpl.ordering.repositories.ShipmentRepository;
import smpl.ordering.repositories.mongodb.models.ShipmentDetails;

import java.util.ArrayList;
import java.util.List;

/**
 * MongoDB-based shipment repository implementation class
 */
public class MongoShipmentRepository implements ShipmentRepository, TestPath
{
    @Override
    public List<ShipmentRecord> getShipments(OrderStatus status)
    {
        List<Order> ordrs = orders.getOrdersByStatus(status);
        List<String> oids = new ArrayList<>();
        for (Order o : ordrs)
        {
            oids.add(o.getOrderId());
        }

        Query q = new Query(Criteria.where("orderId").in(oids));
        List<ShipmentDetails> details = operations.find(q, ShipmentDetails.class);

        List<ShipmentRecord> result = new ArrayList<>();
        if (details != null)
        {
            for (ShipmentDetails d : details)
            {
                result.add(d.toShipmentRecord());
            }
        }

        return result;
    }

    @Override
    public ShipmentRecord getShipmentById(String id)
    {
        Query q = new Query(Criteria.where("orderId").is(id));
        ShipmentDetails existing = operations.findOne(q, ShipmentDetails.class);
        return (existing != null) ? existing.toShipmentRecord() : null;
    }

    @Override
    public ShipmentRecord createShipment(ShipmentRecord info) throws BadRequestException
    {
        Order assocOrder = orders.getOrder(info.getOrderId());
        if (assocOrder == null)
        {
            throw new BadRequestException(String.format("Order '%s' could not be found: ", info.getOrderId()));
        }

        ShipmentDetails existing = findExistingShipmentDetails(info.getOrderId());
        if (existing != null)
        {
            throw new ConflictingRequestException(String.format("A shipment record for order '%s' already exists", info.getOrderId()));
        }

        operations.insert(new ShipmentDetails(info));
        return new ShipmentRecord(info);
    }

    private ShipmentDetails findExistingShipmentDetails(String id)
    {
        Query q = new Query(Criteria.where("orderId").is(id));
        return operations.findOne(q, ShipmentDetails.class);
    }

    @Override
    public boolean addEvent(String id, ShipmentEventInfo event)
    {
        ShipmentDetails existing = findExistingShipmentDetails(id);
        if (existing == null) return false;

        ShipmentRecord result = existing.toShipmentRecord();
        result.addEvent(event);
        return saveUpdates(existing, result);
    }

    private boolean saveUpdates(ShipmentDetails existing, ShipmentRecord result)
    {
        ShipmentDetails updated = new ShipmentDetails(result);
        updated.setId(existing.getId());

        operations.save(updated);

        return true;
    }

    @Override
    public boolean updateShipment(ShipmentRecord info)
    {
        ShipmentDetails existing = findExistingShipmentDetails(info.getOrderId());
        return (existing != null) && saveUpdates(existing, info);
    }

    @Override
    public boolean removeShipment(String id, String eTag)
    {
        Query findExisting = new Query(Criteria.where("orderId").is(id));
        ShipmentDetails existing = operations.findAndRemove(findExisting, ShipmentDetails.class);
        return existing != null;
    }

    public MongoShipmentRepository(MongoTemplate template, OrderRepository orders)
    {
        this.operations = new MongoOperationsWithRetry(template);
        this.orders = orders;
    }

    private final OrderRepository orders;
    private final MongoOperations operations;

    @Override
    public void reset()
    {
        operations.dropCollection("shipments");
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/models/CatalogItem.java
================================================
package smpl.ordering.repositories.mongodb.models;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;

@Document(collection = "catalog")
public class CatalogItem
{
    public CatalogItem()
    {
    }

    public CatalogItem(smpl.ordering.models.CatalogItem from)
    {
        this.skuNumber = from.getSkuNumber();
        this.description = from.getDescription();
        this.price = from.getPrice();
        this.inventory = from.getInventory();
        this.leadTime = from .getLeadTime();
    }

    public smpl.ordering.models.CatalogItem toCatalogItem()
    {
        int calculatedLeadTime = (inventory > 0 ) ? 0 : leadTime;

        smpl.ordering.models.CatalogItem result = new smpl.ordering.models.CatalogItem();
        result.setSkuNumber(skuNumber);
        result.setDescription(description);
        result.setPrice(price);
        result.setInventory(inventory);
        result.setLeadTime(calculatedLeadTime);
        return result;
    }

    @Id
    private String id;

    public String getId()
    {
        return id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    @Indexed
    private String skuNumber;
    private String description;
    private double price;
    private int inventory;
    private int leadTime;
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/models/Dealer.java
================================================
package smpl.ordering.repositories.mongodb.models;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;
import smpl.ordering.models.DealerInfo;

@Document(collection = "dealers")
public class Dealer
{
    @Id
    private String id;

    @Indexed
    private String name;
    private String contact;
    private String address;
    private String email;
    private String phone;

    public Dealer()
    {
    }

    public Dealer(DealerInfo from)
    {
        this.name = from.getName();
        this.contact = from.getContact();
        this.address = from.getAddress();
        this.email = from.getEmail();
        this.phone = from.getPhone();
    }

    public DealerInfo toDealerInfo()
    {
        DealerInfo result = new DealerInfo();
        result.setName(name);
        result.setContact(contact);
        result.setAddress(address);
        result.setEmail(email);
        result.setPhone(phone);
        return result;
    }

    public String getId()
    {
        return id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/models/OrderDetails.java
================================================
package smpl.ordering.repositories.mongodb.models;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;
import smpl.ordering.models.Order;
import smpl.ordering.models.OrderEventInfo;
import smpl.ordering.models.OrderStatus;

import java.util.List;

@Document(collection = "orders")
public class OrderDetails
{
    public String getId()
    {
        return this.id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    @Id
    private String id;

    @Indexed
    private String orderId;
    @Indexed
    private String quoteId;

    private String orderDate;

    @Indexed
    private OrderStatus status;
    private OrderEventInfo[] events;

    public OrderDetails()
    {
    }

    public OrderDetails(Order from)
    {
        this.orderId = from.getOrderId();
        this.quoteId = from.getQuoteId();
        this.orderDate = from.getOrderDate();
        this.status = from.getStatus();

        List<OrderEventInfo> es = from.getEvents();
        this.events = (es != null && es.size() > 0) ?
                es.toArray(new OrderEventInfo[es.size()]) :
                new OrderEventInfo[0];
    }

    public Order toOrder()
    {
        Order result = new Order();
        result.setOrderId(orderId);
        result.setQuoteId(quoteId);
        result.setStatus(status);
        result.setOrderDate(orderDate);
        if (events != null)
        {
            for (OrderEventInfo item : events)
            {
                result.addEvent(item);
            }
        }
        return result;
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/models/QuoteDetails.java
================================================
package smpl.ordering.repositories.mongodb.models;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;
import smpl.ordering.models.QuoteItemInfo;
import smpl.ordering.models.Quote;

import java.util.List;

@Document(collection = "quotes")
public class QuoteDetails
{
    @Id
    private String id;

    public String getQuoteId()
    {
        return quoteId;
    }

    @Indexed
    private String quoteId;

    private String validUntil;

    private String customerName;

    public String getDealerName()
    {
        return dealerName;
    }

    @Indexed
    private String dealerName;
    private QuoteItemInfo[] quoteItems;
    private double totalCost;
    private double discount;
    private String city;
    private String postalCode;
    private String state;

    public QuoteDetails()
    {
    }

    public QuoteDetails(Quote from)
    {
        this.quoteId = from.getQuoteId();
        this.validUntil = from.getValidUntil();
        this.customerName = from.getCustomerName();
        this.dealerName = from.getDealerName();
        this.totalCost = from.getTotalCost();
        this.discount = from.getDiscount();
        this.city = from.getCity();
        this.postalCode = from.getPostalCode();
        this.state = from.getState();

        List<QuoteItemInfo> ai = from.getQuoteItems();
        this.quoteItems = (ai != null && ai.size() > 0) ?
                ai.toArray(new QuoteItemInfo[ai.size()]) :
                new QuoteItemInfo[0];
    }

    public Quote toQuote()
    {
        Quote result = new Quote();
        result.setQuoteId(quoteId);
        result.setValidUntil(validUntil);
        result.setCustomerName(customerName);
        result.setDealerName(dealerName);
        result.setTotalCost(totalCost);
        result.setDiscount(discount);
        result.setCity(city);
        result.setPostalCode(postalCode);
        result.setState(state);
        if (quoteItems != null)
        {
            for (QuoteItemInfo item : quoteItems)
            {
                result.addQuoteItem(item.getSkuNumber(), item.getAmount());
            }
        }
        return result;
    }

    public String getCustomerName()
    {
        return customerName;
    }

    public String getId()
    {
        return id;
    }

    public void setId(String id)
    {
        this.id = id;
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/models/ShipmentDetails.java
================================================
package smpl.ordering.repositories.mongodb.models;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;
import smpl.ordering.models.DeliveryAddress;
import smpl.ordering.models.PhoneInfo;
import smpl.ordering.models.ShipmentEventInfo;
import smpl.ordering.models.ShipmentRecord;

@Document(collection = "shipments")
public class ShipmentDetails
{
    public String getId()
    {
        return id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    @Id
    private String id;

    @Indexed
    private String orderId;

    private ShipmentEventInfo[] events;

    private DeliveryAddress deliveryAddress;

    private String contactName;

    private PhoneInfo primaryContactPhone;

    private PhoneInfo alternateContactPhone;

    public ShipmentDetails()
    {
    }

    public ShipmentDetails(ShipmentRecord from)
    {
        this.orderId = from.getOrderId();
        this.events = (from.getEvents() != null) ?
                from.getEvents().toArray(new ShipmentEventInfo[from.getEvents().size()]) :
                new ShipmentEventInfo[0];
        this.deliveryAddress = from.getDeliveryAddress();
        this.contactName = from.getContactName();
        this.primaryContactPhone = from.getPrimaryContactPhone();
        this.alternateContactPhone = from.getAlternateContactPhone();
    }

    public ShipmentRecord toShipmentRecord()
    {
        ShipmentRecord result = new ShipmentRecord();
        result.setOrderId(orderId);
        result.setDeliveryAddress(deliveryAddress);
        result.setPrimaryContactPhone(primaryContactPhone);
        result.setContactName(contactName);
        result.setAlternateContactPhone(alternateContactPhone);
        if (events != null)
        {
            for (ShipmentEventInfo info : events)
            {
                result.addEvent(info);
            }
        }
        return result;
    }
}



================================================
FILE: src/Backend/OrderService/src/main/resources/application.properties
================================================
# suppress inspection "UnusedProperty" for whole file
###########
#
# This properties file is intended for use with debugging, staging and production system deployment. Not
# suitable for configuring unit test execution.
#
###########

#
# Service configuration. These apply when running under Spring Boot Actuator, not when deploying under
# an application server, for which configuration is done separately.
#
server.port: 8080
management.port: 8081
management.address: 127.0.0.1

#
# Configuration elements specific to the Fabrikant ordering service.
#
ordering.storage: mongodb
ordering.pingMessage: Configuration data is from inside the WAR
ordering.validationMessage: This is version 1.0.3

#
# Default MongoDB configuration parameters. Override on Tomcat7 production system by placing
# an application.properties file in the root Tomcat7 directory.
#
mongodb.host: localhost
mongodb.database: ordering





================================================
FILE: src/Backend/OrderService/src/main/resources/ApplicationInsights.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<ApplicationInsights xmlns="http://schemas.microsoft.com/ApplicationInsights/2013/Settings" schemaVersion="2014-05-30">
    <!--
      Learn more about Application Insights configuration with ApplicationInsights.config here:
      http://go.microsoft.com/fwlink/?LinkID=513840
    -->
    <InstrumentationKey></InstrumentationKey>
    <TelemetryModules>
        <Add type="com.microsoft.applicationinsights.web.extensibility.modules.WebRequestTrackingTelemetryModule"/>
        <Add type="com.microsoft.applicationinsights.web.extensibility.modules.WebSessionTrackingTelemetryModule"/>
        <Add type="com.microsoft.applicationinsights.web.extensibility.modules.WebUserTrackingTelemetryModule"/>
    </TelemetryModules>
    <ContextInitializers>
    </ContextInitializers>
    <TelemetryInitializers>
        <Add type="com.microsoft.applicationinsights.web.extensibility.initializers.WebOperationIdTelemetryInitializer"/>
        <Add type="com.microsoft.applicationinsights.web.extensibility.initializers.WebOperationNameTelemetryInitializer"/>
        <Add type="com.microsoft.applicationinsights.web.extensibility.initializers.WebSessionTelemetryInitializer"/>
        <Add type="com.microsoft.applicationinsights.web.extensibility.initializers.WebUserTelemetryInitializer"/>
        <Add type="com.microsoft.applicationinsights.web.extensibility.initializers.WebUserAgentTelemetryInitializer"/>
    </TelemetryInitializers>
    <TelemetryChannel>
        <DeveloperMode>true</DeveloperMode>
    </TelemetryChannel>
    <Channel>
        <!--<Type>com.microsoft.applicationinsights.channel.StdOutChannel</Type>-->
        <!--<EndpointAddress>http://localhost:8888/v2/track</EndpointAddress>-->
    </Channel>
</ApplicationInsights>


================================================
FILE: src/Backend/OrderService/src/main/resources/buildinfo.properties
================================================
build.number: 0.1.#
build.timestamp: 2015-05-02T13:11:31-04:00



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/ConfigurationRule.java
================================================
package smpl.ordering;

import org.junit.rules.TestRule;
import org.junit.runner.Description;
import org.junit.runners.model.Statement;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

/**
 * This JUnit rule is used to enforce the availability of an ApplicationContext, which is essential for
 * creating beans and auto-wiring.
 */
public class ConfigurationRule
        implements TestRule
{
    @Override
    public Statement apply(Statement statement, Description description)
    {
        AnnotationConfigApplicationContext context =
                new AnnotationConfigApplicationContext(TestOrderingConfiguration.class);
        return statement;
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/TestOrderingConfiguration.java
================================================
package smpl.ordering;

import com.microsoft.applicationinsights.TelemetryClient;
import com.microsoft.applicationinsights.TelemetryConfiguration;
import com.mongodb.MongoClient;
import com.mongodb.MongoClientOptions;
import com.mongodb.ServerAddress;
import org.springframework.beans.BeansException;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.mongodb.core.MongoTemplate;
import smpl.ordering.repositories.RepositoryFactory;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

@Configuration
@ComponentScan
@EnableAutoConfiguration
public class TestOrderingConfiguration
        implements ApplicationContextAware
{
    public
    @Bean
    MongoTemplate mongoTemplate() throws Exception
    {
        Properties props = PropertyHelper.getProperties();

        MongoClientOptions.Builder options = MongoClientOptions.builder();
        options.socketKeepAlive(false);

        // Compared to the product configuration, this is a bit primitive, but trying to autowire the unit test
        // configuration turned out to be rather complicated, so getting properties manually is a better
        // way to go.
        String mongoHost = props.getProperty("mongodb.host");
        String mongoPort = System.getenv("MONGO_PORT"); // Anticipating use within a docker container.

        if (!Utility.isNullOrEmpty(mongoPort))
        {
            URL portUrl = new URL(mongoPort.replace("tcp:", "http:"));
            mongoHost = portUrl.getHost();
        }

        String mongoDB = props.getProperty("mongodb.database");

        if (s_mongoClient == null)
        {
            if (mongoDB != null && !mongoDB.isEmpty() && mongoHost != null && !mongoHost.isEmpty())
            {
                List<ServerAddress> hosts = new ArrayList<>();
                for (String host : mongoHost.split(","))
                {
                    hosts.add(new ServerAddress(host));
                }
                s_mongoClient = new MongoClient(hosts, options.build());

            }
            else
            {
                s_mongoClient = new MongoClient();
            }
        }

        return new MongoTemplate(s_mongoClient, mongoDB);
    }

    public
    @Bean
    TelemetryClient getTelemetryClient()
    {
        if (TelemetryConfiguration.getActive() == null)
        {
            return null;
        }

        TelemetryClient client = new TelemetryClient(TelemetryConfiguration.getActive());
        return client;
    }

    public
    @Bean
    RepositoryFactory repositoryFactory()
    {
        // See comments about manually getting properties earlier in the file.
        Properties props = PropertyHelper.getProperties();
        String storage = props.getProperty("ordering.storage");
        RepositoryFactory.reset(storage);
        return RepositoryFactory.getFactory();
    }

    private static ApplicationContext applicationContext;

    private static MongoClient s_mongoClient;

    @Override
    public void setApplicationContext(ApplicationContext context) throws BeansException
    {
        applicationContext = context;
    }

    public static ApplicationContext getApplicationContext()
    {
        return applicationContext;
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/UtilityTest.java
================================================
package smpl.ordering;

import com.microsoft.applicationinsights.TelemetryClient;
import org.junit.Rule;
import org.junit.Test;

import javax.validation.constraints.AssertFalse;

import static org.junit.Assert.*;

public class UtilityTest
{
    @Rule
    public ConfigurationRule rule = new ConfigurationRule();

    @Test
    public void testIsNullOrEmpty() throws Exception
    {
        assertTrue(Utility.isNullOrEmpty(null));
        assertTrue(Utility.isNullOrEmpty(""));
        assertFalse(Utility.isNullOrEmpty("test"));
        assertFalse(Utility.isNullOrEmpty(" "));
    }

    @Test
    public void testGetTelemetryClient() throws Exception
    {
        // Verify that the Telemetry client used for unit tests is disabled.
        TelemetryClient client = Utility.getTelemetryClient();
        assertTrue(true);//client.isDisabled());
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/controllers/CatalogControllerTest.java
================================================
package smpl.ordering.controllers;

import org.junit.Before;
import org.junit.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import smpl.ordering.TestPath;
import smpl.ordering.models.CatalogItem;
import smpl.ordering.repositories.CatalogItemsRepository;
import smpl.ordering.repositories.RepositoryFactory;

import java.util.List;

import static org.junit.Assert.*;

@SuppressWarnings("unchecked")
public class CatalogControllerTest
{
    @Before
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");

        // Make sure the repository is empty.
        CatalogItemsRepository catalog = RepositoryFactory.getCatalogItemsRepository();
        ((TestPath) catalog).reset();

        controller = new CatalogController();
    }

    @Test
    public void testAddCatalogItem() throws Exception
    {
        ResponseEntity response =
                controller.addCatalogItem(new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        // Negative test case

        response = controller.addCatalogItem(new CatalogItem("", "Shelving", 11.50, 4, 3));
        assertNotNull(response);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());

        response = controller.addCatalogItem(new CatalogItem("ACC-0001", "Shelving", 11.50, 4, 3));
        assertNotNull(response);
        assertEquals(HttpStatus.CONFLICT, response.getStatusCode());
    }

    @Test
    public void testUpsertCatalogItem() throws Exception
    {
        ResponseEntity response =
                controller.upsertCatalogItem("ACC-0001", new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3));
        assertNotNull(response);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());

        response = controller.addCatalogItem(new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response =
                controller.upsertCatalogItem("ACC-0001", new CatalogItem("ACC-0001", "Shelving", 12.50, 4, 3));
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        ResponseEntity<CatalogItem> getResponse = controller.getCatalogItem("ACC-0001");
        assertNotNull(getResponse);
        assertNotNull(getResponse.getBody());
        assertEquals(HttpStatus.OK, getResponse.getStatusCode());

        CatalogItem catalogItem = getResponse.getBody();
        assertEquals("ACC-0001", catalogItem.getSkuNumber());
        assertEquals(12.50, catalogItem.getPrice(), 0.01);
    }

    @Test
    public void testGetCatalogItems() throws Exception
    {
        {
            ResponseEntity<List<CatalogItem>> response = controller.getCatalogItems();
            assertNotNull(response);
            assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());

            List<CatalogItem> list = response.getBody();
            assertNull(list);
        }

        controller.addCatalogItem(new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3));
        controller.addCatalogItem(new CatalogItem("ACC-0002", "Refrigeration Unit", 2500, 2, 7));
        controller.addCatalogItem(new CatalogItem("ACC-0003", "Freezer Unit", 4500, 4, 5));

        {
            ResponseEntity<List<CatalogItem>> response = controller.getCatalogItems();
            assertNotNull(response);
            assertEquals(HttpStatus.OK, response.getStatusCode());

            List<CatalogItem> list = response.getBody();
            assertEquals(3, list.size());
        }
    }

    @Test
    public void testGetCatalogItem() throws Exception
    {
        {
            ResponseEntity<CatalogItem> response = controller.getCatalogItem("ACC-0002");
            assertNotNull(response);
            assertNull(response.getBody());
            assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        }

        controller.addCatalogItem(new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3));
        controller.addCatalogItem(new CatalogItem("ACC-0002", "Refrigeration Unit", 2500, 2, 7));
        controller.addCatalogItem(new CatalogItem("ACC-0003", "Freezer Unit", 4500, 4, 5));

        {
            ResponseEntity<CatalogItem> response = controller.getCatalogItem("ACC-0002");
            assertNotNull(response);
            assertNotNull(response.getBody());
            assertEquals(HttpStatus.OK, response.getStatusCode());

            CatalogItem catalogItem = response.getBody();
            assertEquals("ACC-0002", catalogItem.getSkuNumber());
        }
    }

    @Test
    public void testRemoveCatalogItem() throws Exception
    {
        ResponseEntity response = controller.addCatalogItem(new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.removeCatalogItem("ACC-0001");
        assertNotNull(response);
        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());

        ResponseEntity<CatalogItem> getResponse = controller.getCatalogItem("ACC-0001");
        assertNotNull(getResponse);
        assertEquals(HttpStatus.NOT_FOUND, getResponse.getStatusCode());
    }

    private CatalogController controller;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/controllers/DealerControllerTest.java
================================================
package smpl.ordering.controllers;

import org.junit.Before;
import org.junit.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import smpl.ordering.TestPath;
import smpl.ordering.models.DealerInfo;
import smpl.ordering.repositories.DealersRepository;
import smpl.ordering.repositories.DealersRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;

import java.util.List;

import static org.junit.Assert.*;

@SuppressWarnings("unchecked")
public class DealerControllerTest
{

    @Before
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");

        // Make sure the repository is empty.
        DealersRepository dealers = RepositoryFactory.getDealersRepository();
        ((TestPath) dealers).reset();

        controller = new DealerController();
    }

    @Test
    public void testAddDealer() throws Exception
    {
        ResponseEntity response = controller.addDealer(DealersRepositoryTest.createDealer("DLR-1"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        // Negative test case

        response = controller.addDealer(DealersRepositoryTest.createDealer(null));
        assertNotNull(response);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());

        response = controller.addDealer(DealersRepositoryTest.createDealer(""));
        assertNotNull(response);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());

        response = controller.addDealer(DealersRepositoryTest.createDealer("DLR-1"));
        assertNotNull(response);
        assertEquals(HttpStatus.CONFLICT, response.getStatusCode());
    }

    @Test
    public void testUpdateDealer() throws Exception
    {
        ResponseEntity response = controller.addDealer(DealersRepositoryTest.createDealer("DLR-1"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        DealerInfo update = DealersRepositoryTest.createDealer("DLR-1");
        update.setContact("Jane Doe");

        response = controller.updateDealer("DLR-1", update);
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        ResponseEntity<DealerInfo> getDealer = controller.getDealer("DLR-1");
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        update = getDealer.getBody();
        assertNotNull(update);
        assertEquals("Jane Doe", update.getContact());

        // Negative tests

        update.setName(null);
        response = controller.updateDealer("DLR-1", update);
        assertNotNull(response);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());

        update.setName("");
        response = controller.updateDealer("DLR-1", update);
        assertNotNull(response);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());

        update = DealersRepositoryTest.createDealer("DLR-2");
        response = controller.updateDealer("DLR-2", update);
        assertNotNull(response);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
    }

    @Test
    public void testGetDealers() throws Exception
    {
        {
            ResponseEntity<List<DealerInfo>> response = controller.getDealers();
            assertNotNull(response);
            assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
            assertNull(response.getBody());
        }

        createDealers();

        {
            ResponseEntity<List<DealerInfo>> response = controller.getDealers();
            assertNotNull(response);
            assertEquals(HttpStatus.OK, response.getStatusCode());

            List<DealerInfo> dealers = response.getBody();
            assertNotNull(dealers);
            assertEquals(4, dealers.size());
        }
    }

    private void createDealers()
    {
        controller.addDealer(DealersRepositoryTest.createDealer("DLR-1"));
        controller.addDealer(DealersRepositoryTest.createDealer("DLR-2"));
        controller.addDealer(DealersRepositoryTest.createDealer("DLR-3"));
        controller.addDealer(DealersRepositoryTest.createDealer("DLR-4"));
    }

    @Test
    public void testGetDealer() throws Exception
    {
        {
            ResponseEntity<DealerInfo> response = controller.getDealer("DLR-1");
            assertNotNull(response);
            assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
            assertNull(response.getBody());
        }

        createDealers();

        {
            ResponseEntity<DealerInfo> response = controller.getDealer("DLR-1");
            assertNotNull(response);
            assertEquals(HttpStatus.OK, response.getStatusCode());

            DealerInfo dealer = response.getBody();
            assertNotNull(dealer);
            assertEquals("DLR-1", dealer.getName());
        }
    }

    @Test
    public void testRemoveDealer() throws Exception
    {
        createDealers();

        {
            ResponseEntity<List<DealerInfo>> response = controller.getDealers();
            assertNotNull(response);
            assertEquals(HttpStatus.OK, response.getStatusCode());

            List<DealerInfo> dealers = response.getBody();
            assertNotNull(dealers);
            assertEquals(4, dealers.size());
        }

        ResponseEntity remove = controller.removeDealer("DLR-1");
        assertNotNull(remove);
        assertEquals(HttpStatus.NO_CONTENT, remove.getStatusCode());

        {
            ResponseEntity<List<DealerInfo>> response = controller.getDealers();
            assertNotNull(response);
            assertEquals(HttpStatus.OK, response.getStatusCode());

            List<DealerInfo> dealers = response.getBody();
            assertNotNull(dealers);
            assertEquals(3, dealers.size());
        }
    }

    private DealerController controller;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/controllers/OrderControllerTest.java
================================================
package smpl.ordering.controllers;

import org.junit.Before;
import org.junit.Test;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import smpl.ordering.TestPath;
import smpl.ordering.models.*;
import smpl.ordering.repositories.QuoteRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;

import java.net.URI;
import java.text.DateFormat;
import java.util.Date;
import java.util.List;

import static org.junit.Assert.*;

@SuppressWarnings("unchecked")
public class OrderControllerTest
{

    @Before
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");

        // Make sure the repositories are empty.
        ((TestPath) RepositoryFactory.getDealersRepository()).reset();
        ((TestPath) RepositoryFactory.getCatalogItemsRepository()).reset();
        ((TestPath) RepositoryFactory.getQuoteRepository()).reset();
        ((TestPath) RepositoryFactory.getOrderRepository()).reset();

        quotes = new QuoteController();
        controller = new OrderController();
    }

    @Test
    public void testCreateOrder() throws Exception
    {
        ResponseEntity response = quotes.createQuote(QuoteRepositoryTest.createQuote("quote-4711"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.createOrder("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        Order order = ((ResponseEntity<Order>) response).getBody();
        assertEquals("quote-4711", order.getQuoteId());
        HttpHeaders headers = response.getHeaders();
        assertEquals(new URI("/orders/" + order.getOrderId()), headers.getLocation());

        response = controller.getOrderById(order.getOrderId());
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("quote-4711", order.getQuoteId());
    }

    @Test
    public void testGetOrderById() throws Exception
    {
        ResponseEntity response = controller.getOrderById("order-not-there");
        assertNotNull(response);
        assertNull(response.getBody());
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());

        response = quotes.createQuote(QuoteRepositoryTest.createQuote("quote-4711"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.createOrder("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        Order refOrder = ((ResponseEntity<Order>) response).getBody();
        assertNotNull(refOrder);

        response = controller.getOrderById(refOrder.getOrderId());
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        Order order = ((ResponseEntity<Order>) response).getBody();
        assertNotNull(order);

        assertEquals(refOrder, order);
    }

    @Test
    public void testGetQuotesByDealerName() throws Exception
    {
        ResponseEntity response = controller.getOrdersByDealerName("DLR-1", OrderStatus.None);
        assertNotNull(response);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());

        List<Order> orders = ((ResponseEntity<List<Order>>) response).getBody();
        assertNull(orders);

        response = quotes.createQuote(QuoteRepositoryTest.createQuote("quote-4711"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.createOrder("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        Order refOrder = ((ResponseEntity<Order>) response).getBody();
        assertNotNull(refOrder);

        response = controller.getOrdersByDealerName("DLR-1", OrderStatus.Created);
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        orders = ((ResponseEntity<List<Order>>) response).getBody();
        assertNotNull(orders);
        assertEquals(1, orders.size());

        assertEquals(refOrder, orders.get(0));

        // Case insensitive.

        response = controller.getOrdersByDealerName("dlr-1", OrderStatus.Created);
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        // optional dealer
        response = controller.getOrdersByDealerName("", OrderStatus.Created);
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        // optional dealer, status
        response = controller.getOrdersByDealerName("", OrderStatus.None);
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }

    @Test
    public void testAddEvent() throws Exception
    {
        ResponseEntity response = quotes.createQuote(QuoteRepositoryTest.createQuote("quote-4711"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.createOrder("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        Order refOrder = ((ResponseEntity<Order>) response).getBody();
        assertNotNull(refOrder);

        response = controller.addEvent(refOrder.getOrderId(), new OrderEventInfo("testAddEvent-1"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.addEvent(refOrder.getOrderId(), new OrderEventInfo("testAddEvent-2"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.addEvent(refOrder.getOrderId(), new OrderEventInfo("1/1/2000", "testAddEvent-3"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.getOrderById(refOrder.getOrderId());
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        Order order = ((ResponseEntity<Order>) response).getBody();
        assertNotNull(order);
        assertNotNull(order.getEvents());
        assertEquals(3, order.getEvents().size());

        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);
        String today = df.format(new Date());

        for (int i = 0; i < order.getEvents().size(); ++i)
        {
            assertEquals(today, order.getEvents().get(i).getDate());
            assertTrue(order.getEvents().get(i).getComments().startsWith("testAddEvent"));
        }
    }

    @Test
    public void testUpdate() throws Exception
    {
        ResponseEntity response = quotes.createQuote(QuoteRepositoryTest.createQuote("quote-4711"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.createOrder("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        Order refOrder = ((ResponseEntity<Order>) response).getBody();
        assertNotNull(refOrder);

        response = controller.updateStatus(refOrder.getOrderId(), new OrderUpdateInfo(OrderStatus.Confirmed, "testUpdate-1"));
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        response = controller.updateStatus(refOrder.getOrderId(), new OrderUpdateInfo(OrderStatus.Started, "testUpdate-2"));
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        response = controller.updateStatus(refOrder.getOrderId(), new OrderUpdateInfo(OrderStatus.Built, "testUpdate-3"));
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        response = controller.updateStatus(refOrder.getOrderId(), new OrderUpdateInfo(OrderStatus.Shipped, "testUpdate-4"));
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        response = controller.getOrderById(refOrder.getOrderId());
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        Order order = ((ResponseEntity<Order>) response).getBody();
        assertNotNull(order);
        assertNotNull(order.getEvents());
        assertEquals(4, order.getEvents().size());

        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);
        String today = df.format(new Date());

        for (int i = 0; i < order.getEvents().size(); ++i)
        {
            assertEquals(today, order.getEvents().get(i).getDate());
            assertTrue(order.getEvents().get(i).getComments().startsWith("testUpdate"));
        }
    }

    private QuoteController quotes;
    private OrderController controller;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/controllers/QuoteControllerTest.java
================================================
package smpl.ordering.controllers;

import org.junit.Before;
import org.junit.Test;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import smpl.ordering.TestPath;
import smpl.ordering.models.Quote;
import smpl.ordering.repositories.QuoteRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;

import java.net.URI;
import java.util.List;

import static org.junit.Assert.*;

@SuppressWarnings("unchecked")
public class QuoteControllerTest
{

    @Before
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");

        // Make sure the repositories are empty.
        ((TestPath) RepositoryFactory.getDealersRepository()).reset();
        ((TestPath) RepositoryFactory.getCatalogItemsRepository()).reset();
        ((TestPath) RepositoryFactory.getQuoteRepository()).reset();

        controller = new QuoteController();
    }


    @SuppressWarnings("ResultOfMethodCallIgnored")
    @Test
    public void testCreateQuote() throws Exception
    {
        ResponseEntity response = controller.createQuote(QuoteRepositoryTest.createQuote("quote-4711"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        Quote q = ((ResponseEntity<Quote>) response).getBody();
        assertNotNull(q);
        assertEquals("quote-4711", q.getQuoteId());
        HttpHeaders headers = response.getHeaders();
        assertEquals(new URI("/quotes/quote-4711"), headers.getLocation());

        response = controller.createQuote(QuoteRepositoryTest.createQuote(null));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        q = ((ResponseEntity<Quote>) response).getBody();
        assertNotNull(q);
        // The default quote id is a random integer. We'll get an exception if not.
        Integer.parseInt(q.getQuoteId());
        headers = response.getHeaders();
        assertEquals(new URI("/quotes/" + q.getQuoteId()), headers.getLocation());

        response = controller.createQuote(QuoteRepositoryTest.createQuote(""));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        q = ((ResponseEntity<Quote>) response).getBody();
        assertNotNull(q);
        // The default quote id is a random integer. We'll get an exception if not.
        Integer.parseInt(q.getQuoteId());
        headers = response.getHeaders();
        assertEquals(new URI("/quotes/" + q.getQuoteId()), headers.getLocation());

        response = controller.createQuote(QuoteRepositoryTest.createQuote("quote-4711"));
        assertNotNull(response);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
    }

    @Test
    public void testUpdateQuote() throws Exception
    {
        Quote q = QuoteRepositoryTest.createQuote("quote-4711");

        ResponseEntity response = controller.updateQuote("quote-4711", q);
        assertNotNull(response);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());

        response = controller.createQuote(q);
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.updateQuote("quote-4711", q);
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        response = controller.getQuoteById("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        q = ((ResponseEntity<Quote>) response).getBody();
        assertNotNull(q);
        assertEquals("quote-4711", q.getQuoteId());
    }

    @Test
    public void testGetQuoteById() throws Exception
    {
        ResponseEntity response = controller.getQuoteById("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());

        createNewQuote();
    }

    private void createNewQuote()
    {
        Quote q = QuoteRepositoryTest.createQuote("quote-4711");
        ResponseEntity response = controller.createQuote(q);
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.getQuoteById("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }

    @Test
    public void testGetQuotesByCustomerName() throws Exception
    {
        ResponseEntity response = controller.getQuotesByCustomerName("cust-");
        assertNotNull(response);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());

        Quote q = QuoteRepositoryTest.createQuote("quote-4711");
        response = controller.createQuote(q);
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.getQuotesByCustomerName("cust-");
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        List<Quote> quotes = ((ResponseEntity<List<Quote>>) response).getBody();
        assertNotNull(quotes);
        assertEquals(1, quotes.size());

        controller.createQuote(QuoteRepositoryTest.createQuote("quote-4712"));

        response = controller.getQuotesByCustomerName("cust-");
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        quotes = ((ResponseEntity<List<Quote>>) response).getBody();
        assertNotNull(quotes);
        assertEquals(2, quotes.size());
    }

    @Test
    public void testDeleteQuote() throws Exception
    {
        ResponseEntity response = controller.deleteQuote("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());

        createNewQuote();

        response = controller.deleteQuote("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());

        response = controller.getQuoteById("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
    }


    private QuoteController controller;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/controllers/ShipmentControllerTest.java
================================================
package smpl.ordering.controllers;

import org.junit.Before;
import org.junit.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import smpl.ordering.TestPath;
import smpl.ordering.models.*;
import smpl.ordering.repositories.QuoteRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;
import smpl.ordering.repositories.ShipmentRepositoryTest;

import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

@SuppressWarnings("unchecked")
public class ShipmentControllerTest
{
    @Before
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");

        // Make sure the repositories are empty.
        ((TestPath) RepositoryFactory.getDealersRepository()).reset();
        ((TestPath) RepositoryFactory.getCatalogItemsRepository()).reset();
        ((TestPath) RepositoryFactory.getQuoteRepository()).reset();
        ((TestPath) RepositoryFactory.getOrderRepository()).reset();
        ((TestPath) RepositoryFactory.getShipmentRepository()).reset();

        quotes = new QuoteController();
        orders = new OrderController();
        controller = new ShipmentController();

    }

    @Test
    public void testCreateShipment()
    {
        ShipmentRecord info = ShipmentRepositoryTest.createShipmentRecord("order-quote-4711");

        ResponseEntity response = controller.createShipmentRecord(info);
        assertNotNull(response);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());

        createQuoteAndOrder("quote-4711");

        response = controller.createShipmentRecord(info);
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
    }

    @Test
    public void testGetAllShipments()
    {
        Order order = createQuoteAndOrder("quote-4711");

        ResponseEntity response = controller.createShipmentRecord(ShipmentRepositoryTest.createShipmentRecord(order.getOrderId()));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.getShipments(OrderStatus.None);
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        List<ShipmentRecord> list = ((ResponseEntity<List<ShipmentRecord>>) response).getBody();
        assertNotNull(list);
        assertEquals(1, list.size());
        assertNotNull(list.get(0).getEvents());
        assertEquals(order.getOrderId(), list.get(0).getOrderId());
    }

    @Test
    public void testGetShipmentsByStatus()
    {
        Order order = createQuoteAndOrder("quote-4711");

        ResponseEntity response = controller.createShipmentRecord(ShipmentRepositoryTest.createShipmentRecord(order.getOrderId()));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.getShipments(OrderStatus.Created);
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        List<ShipmentRecord> list = ((ResponseEntity<List<ShipmentRecord>>) response).getBody();
        assertNotNull(list);
        assertEquals(1, list.size());
        assertNotNull(list.get(0).getEvents());
        assertEquals(order.getOrderId(), list.get(0).getOrderId());

        response = orders.updateStatus(order.getOrderId(), new OrderUpdateInfo(OrderStatus.Shipped, "The thing has shipped"));
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        response = controller.getShipments(OrderStatus.Shipped);
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        list = ((ResponseEntity<List<ShipmentRecord>>) response).getBody();
        assertNotNull(list);
        assertEquals(1, list.size());
        assertNotNull(list.get(0).getEvents());
        assertEquals(order.getOrderId(), list.get(0).getOrderId());

        response = controller.getShipments(OrderStatus.Delivered);
        assertNotNull(response);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
    }

    @Test
    public void testUpdateShipment()
    {
        Order order = createQuoteAndOrder("quote-4711");

        ShipmentRecord record = ShipmentRepositoryTest.createShipmentRecord(order.getOrderId());

        ResponseEntity response = controller.createShipmentRecord(record);
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.getShipment(order.getOrderId());
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        ShipmentRecord rec = ((ResponseEntity<ShipmentRecord>) response).getBody();
        assertNotNull(rec);
        assertNotNull(rec.getEvents());
        assertEquals(0, rec.getEvents().size());

        record.setContactName("John Jones");

        controller.updateShipment(record.getOrderId(), record);

        response = controller.getShipment(record.getOrderId());
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        rec = ((ResponseEntity<ShipmentRecord>) response).getBody();
        assertNotNull(rec);
        assertEquals(rec.getContactName(), "John Jones");
        assertNotNull(rec.getEvents());
        assertEquals(0, rec.getEvents().size());
    }

    @Test
    public void testAddEventToShipment()
    {
        Order order = createQuoteAndOrder("quote-4711");

        ShipmentRecord record = ShipmentRepositoryTest.createShipmentRecord(order.getOrderId());

        ResponseEntity response = controller.createShipmentRecord(record);
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.getShipment(order.getOrderId());
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        ShipmentRecord rec = ((ResponseEntity<ShipmentRecord>) response).getBody();
        assertNotNull(rec);
        assertNotNull(rec.getEvents());
        assertEquals(0, rec.getEvents().size());

        controller.addEvent(record.getOrderId(), new ShipmentEventInfo("12/13/2014", "The truck is on its way..."));

        response = controller.getShipment(record.getOrderId());
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        rec = ((ResponseEntity<ShipmentRecord>) response).getBody();
        assertNotNull(rec);
        assertNotNull(rec.getEvents());
        assertEquals(1, rec.getEvents().size());
        assertEquals("The truck is on its way...", rec.getEvents().get(0).getComments());
    }

    @SuppressWarnings("SameParameterValue")
    private Order createQuoteAndOrder(String id)
    {
        ResponseEntity response = quotes.createQuote(QuoteRepositoryTest.createQuote(id));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = orders.createOrder(id);
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        return ((ResponseEntity<Order>) response).getBody();
    }


    private QuoteController quotes;
    private OrderController orders;
    private ShipmentController controller;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/CatalogItemsRepositoryTest.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.TestPath;
import smpl.ordering.models.CatalogItem;

import java.util.List;

import static org.junit.Assert.*;

public class CatalogItemsRepositoryTest
{
    protected void setUp() throws Exception
    {
        catalog = RepositoryFactory.getCatalogItemsRepository();
        ((TestPath) catalog).reset();

        catalog.upsertCatalogItem("ACC-0001", new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3), null);
        catalog.upsertCatalogItem("ACC-0002", new CatalogItem("ACC-0002", "Refrigeration Unit", 2500, 4, 3), null);
        catalog.upsertCatalogItem("ACC-0003", new CatalogItem("ACC-0003", "Freezer Unit", 4500, 4, 3), null);
    }

    protected void testGetCatalogItems()
    {
        List<CatalogItem> list = catalog.getCatalogItems();
        assertNotNull(list);
        assertEquals(3, list.size());
        assertEquals("ACC-0001", list.get(0).getSkuNumber());
        assertEquals("ACC-0002", list.get(1).getSkuNumber());
        assertEquals("ACC-0003", list.get(2).getSkuNumber());

        catalog.upsertCatalogItem("ACC-0004", new CatalogItem("ACC-0004", "Shelving", 13.50, 4, 3), null);
        list = catalog.getCatalogItems();
        assertEquals(4, list.size());

        assertEquals("ACC-0004", list.get(3).getSkuNumber());
    }

    protected void testGetCatalogItem()
    {
        assertEquals(10.50, catalog.getCatalogItem("ACC-0001").getPrice(), 0.01);
        assertEquals(2500, catalog.getCatalogItem("ACC-0002").getPrice(), 0.10);
        assertEquals(4500, catalog.getCatalogItem("ACC-0003").getPrice(), 0.10);
    }

    protected void testUpsertCatalogItem()
    {
        assertTrue(catalog.upsertCatalogItem("ACC-0001", new CatalogItem("ACC-0001", "Shelving", 11.50, 4, 3), null));
        assertFalse(catalog.upsertCatalogItem("ACC-0004", new CatalogItem("ACC-0004", "Shelving", 13.50, 4, 3), null));
        assertEquals(11.50, catalog.getCatalogItem("ACC-0001").getPrice(), 0.01);
    }

    protected void testRemoveCatalogItem()
    {
        assertTrue(catalog.removeCatalogItem("ACC-0001", null));
        assertFalse(catalog.removeCatalogItem("ACC-0004", null));
        List<CatalogItem> list = catalog.getCatalogItems();
        assertEquals(2, list.size());
        assertTrue(catalog.removeCatalogItem("ACC-0002", null));
        assertTrue(catalog.removeCatalogItem("ACC-0003", null));
        list = catalog.getCatalogItems();
        assertEquals(0, list.size());
    }

    private static CatalogItemsRepository catalog;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/DealersRepositoryTest.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.TestPath;
import smpl.ordering.models.DealerInfo;

import java.util.List;

import static org.junit.Assert.*;

public class DealersRepositoryTest
{
    public void setUp() throws Exception
    {
        repository = RepositoryFactory.getDealersRepository();
        ((TestPath) repository).reset();

        repository.upsertDealer(createDealer("DLR-1"), null);
        repository.upsertDealer(createDealer("DLR-2"), null);
        repository.upsertDealer(createDealer("DLR-3"), null);
        repository.upsertDealer(createDealer("DLR-4"), null);
    }

    public void testGetDealers()
    {
        List<DealerInfo> dealers = repository.getDealers();
        assertNotNull(dealers);
        assertEquals(4, dealers.size());
        for (DealerInfo info : dealers)
        {
            assertEquals("John Doe", info.getContact());
        }
        assertEquals("DLR-1", dealers.get(0).getName());
        assertEquals("DLR-2", dealers.get(1).getName());
        assertEquals("DLR-3", dealers.get(2).getName());
        assertEquals("DLR-4", dealers.get(3).getName());
    }

    public void testGetDealer()
    {
        DealerInfo dealer = repository.getDealer("DLR-1");
        assertEquals("DLR-1@tempuri.org", dealer.getEmail());
        dealer = repository.getDealer("DLR-5");
        assertNull(dealer);
    }

    public void testUpsertDealer()
    {
        DealerInfo dealer = repository.getDealer("DLR-1");
        assertEquals("DLR-1@tempuri.org", dealer.getEmail());
        dealer.setEmail("jd@tempuri.org");
        assertTrue(repository.upsertDealer(dealer, null));
        dealer = repository.getDealer("DLR-1");
        assertEquals("jd@tempuri.org", dealer.getEmail());

        assertFalse(repository.upsertDealer(createDealer("DLR-5"), null));
        dealer = repository.getDealer("DLR-5");
        assertNotNull(dealer);
        assertEquals("DLR-5@tempuri.org", dealer.getEmail());

        assertEquals(5, repository.getDealers().size());
    }

    public void testRemoveDealer()
    {
        assertTrue(repository.removeDealer("DLR-1", null));
        assertEquals(3, repository.getDealers().size());

        assertFalse(repository.removeDealer("DLR-5", null));

        assertTrue(repository.removeDealer("DLR-2", null));
        assertTrue(repository.removeDealer("DLR-3", null));
        assertTrue(repository.removeDealer("DLR-4", null));

        assertFalse(repository.removeDealer("DLR-2", null));
    }

    public static DealerInfo createDealer(String name)
    {
        DealerInfo info = new DealerInfo();
        info.setName(name);
        info.setPhone("425-555-1212");
        info.setContact("John Doe");
        info.setEmail(name + "@tempuri.org");
        info.setAddress("1234 Main St., Redmond, WA 98052");
        return info;
    }

    private DealersRepository repository;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/OrderRepositoryTest.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.ConflictingRequestException;
import smpl.ordering.TestPath;
import smpl.ordering.models.*;

import java.util.List;

import static org.junit.Assert.*;

@SuppressWarnings("EmptyCatchBlock")
public class OrderRepositoryTest
{
    public void setUp() throws Exception
    {
        // Set up some data for the order tests to access.

        DealersRepository dealers = RepositoryFactory.getDealersRepository();
        ((TestPath)dealers).reset();

        dealers.upsertDealer(DealersRepositoryTest.createDealer("DLR-1"), null);
        dealers.upsertDealer(DealersRepositoryTest.createDealer("DLR-2"), null);
        dealers.upsertDealer(DealersRepositoryTest.createDealer("DLR-3"), null);
        dealers.upsertDealer(DealersRepositoryTest.createDealer("DLR-4"), null);

        CatalogItemsRepository catalog = RepositoryFactory.getCatalogItemsRepository();
        ((TestPath)catalog).reset();

        catalog.upsertCatalogItem("ACC-0001", new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3), null);
        catalog.upsertCatalogItem("ACC-0002", new CatalogItem("ACC-0002", "Refrigeration Unit", 2500, 2, 7), null);
        catalog.upsertCatalogItem("ACC-0003", new CatalogItem("ACC-0003", "Freezer Unit", 4500, 4, 5), null);

        QuoteRepository quotes = RepositoryFactory.getQuoteRepository();
        ((TestPath)quotes).reset();
        repository = RepositoryFactory.getOrderRepository();
        ((TestPath)repository).reset();

        for (int i = 0; i < 10; ++i)
        {
            Quote template = quotes.createQuote(QuoteRepositoryTest.createQuote(String.format("quote-%s", i)));
            repository.createOrder(template.getQuoteId());
        }
    }

    public void testHasOrder()
    {
        assertTrue(repository.hasOrder("order-quote-0"));
        assertFalse(repository.hasOrder("order-not-there"));
    }

    public void testGetOrder()
    {
        Order o1 = repository.getOrder("order-quote-0");
        assertNotNull(o1);
        assertNull(repository.getOrder("order-not-there"));

        String qid = o1.getQuoteId();
        assertEquals("quote-0", qid);
    }

    public void testGetOrdersByQuoteId()
    {
        Order order = repository.getOrderByQuoteId("quote-100");
        assertNull(order);

        order = repository.getOrderByQuoteId("quote-1");
        assertNotNull(order);
        assertEquals("quote-1", order.getQuoteId());
    }

    public void testGetOrdersByStatus()
    {
        List<Order> orders = repository.getOrdersByStatus(OrderStatus.Delivered);
        assertNotNull(orders);
        assertEquals(0, orders.size());

        orders = repository.getOrdersByStatus(OrderStatus.Created);
        assertNotNull(orders);
        assertEquals(10, orders.size());
    }


    public void testGetOrdersByDealerName()
    {
        List<Order> orders = repository.getOrdersByDealerName("DLR-1", OrderStatus.Created);
        assertNotNull(orders);
        assertEquals(10, orders.size());

        orders = repository.getOrdersByDealerName("DLR-100", OrderStatus.Created);
        assertNotNull(orders);
        assertEquals(0, orders.size());

        orders = repository.getOrdersByDealerName("DLR-1", OrderStatus.Confirmed);
        assertNotNull(orders);
        assertEquals(0, orders.size());
    }

    public void testCreateOrder() throws Exception
    {
        QuoteRepository quotes = RepositoryFactory.getQuoteRepository();

        Quote template = quotes.createQuote(QuoteRepositoryTest.createQuote("quote-4711"));
        Order o1 = repository.createOrder(template.getQuoteId());

        assertNotNull(o1);
        assertEquals(o1.getQuoteId(), "quote-4711");
        assertEquals(0, o1.getEvents().size());
        assertEquals(OrderStatus.Created, o1.getStatus());

        List<Order> orders = repository.getOrdersByDealerName("DLR-1", OrderStatus.Created);
        assertNotNull(orders);
        assertEquals(11, orders.size());

        try {
            // Duplicate orders...
            assertNull(repository.createOrder(template.getQuoteId()));
        } catch (ConflictingRequestException bre) { }
    }

    public void testUpdateOrder() throws Exception
    {
        QuoteRepository quotes = RepositoryFactory.getQuoteRepository();

        Quote template = quotes.createQuote(QuoteRepositoryTest.createQuote("quote-4712"));
        Order o1 = repository.createOrder(template.getQuoteId());
        assertNotNull(o1);
        assertEquals(o1.getQuoteId(), "quote-4712");
        assertEquals(0, o1.getEvents().size());
        assertEquals(OrderStatus.Created, o1.getStatus());

        String orderId = o1.getOrderId();

        OrderEventInfo info = new OrderEventInfo();
        info.setDate("1/1/2001");
        info.setComments("This is a unit test");
        o1.addEvent(info);
        repository.updateOrder(o1.getOrderId(), o1, null);

        Order o2 = repository.getOrder(orderId);
        assertNotNull(o2);
        assertEquals(o2.getQuoteId(), "quote-4712");
        assertEquals(1, o2.getEvents().size());

        info = o2.getEvents().get(0);
        assertEquals("This is a unit test", info.getComments());
        assertEquals("1/1/2001", info.getDate());
    }

    public void testUpdateOrder1() throws Exception
    {
        QuoteRepository quotes = RepositoryFactory.getQuoteRepository();

        Quote template = quotes.createQuote(QuoteRepositoryTest.createQuote("quote-4713"));
        Order o1 = repository.createOrder(template.getQuoteId());
        assertNotNull(o1);
        assertEquals(o1.getQuoteId(), "quote-4713");
        assertEquals(0, o1.getEvents().size());
        assertEquals(OrderStatus.Created, o1.getStatus());

        String orderId = o1.getOrderId();

        OrderEventInfo info = new OrderEventInfo();
        info.setDate("1/2/2001");
        info.setComments("This is a unit test");
        OrderUpdateInfo update = new OrderUpdateInfo();
        update.setStatus(OrderStatus.Confirmed);
        update.setEventInfo(info);
        repository.updateOrder(o1.getOrderId(), update, null);

        Order o2 = repository.getOrder(orderId);
        assertNotNull(o2);
        assertEquals(o2.getQuoteId(), "quote-4713");
        assertEquals(1, o2.getEvents().size());
        assertEquals(OrderStatus.Confirmed, o2.getStatus());

        info = o2.getEvents().get(0);
        assertEquals("This is a unit test", info.getComments());
        assertEquals("1/2/2001", info.getDate());
    }

    private OrderRepository repository;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/QuoteRepositoryTest.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.BadRequestException;
import smpl.ordering.TestPath;
import smpl.ordering.models.CatalogItem;
import smpl.ordering.models.QuoteItemInfo;
import smpl.ordering.models.Quote;
import smpl.ordering.repositories.mock.test.MockDealersRepositoryTest;

import java.util.List;

import static org.junit.Assert.*;

@SuppressWarnings("EmptyCatchBlock")
public class QuoteRepositoryTest
{
    public void setUp() throws Exception
    {
        // Set up some data for the quote tests to access.

        repository = RepositoryFactory.getQuoteRepository();
        ((TestPath) repository).reset();

        DealersRepository dealers = RepositoryFactory.getDealersRepository();
        ((TestPath) dealers).reset();

        dealers.upsertDealer(MockDealersRepositoryTest.createDealer("DLR-1"), null);
        dealers.upsertDealer(MockDealersRepositoryTest.createDealer("DLR-2"), null);
        dealers.upsertDealer(MockDealersRepositoryTest.createDealer("DLR-3"), null);
        dealers.upsertDealer(MockDealersRepositoryTest.createDealer("DLR-4"), null);

        CatalogItemsRepository catalog = RepositoryFactory.getCatalogItemsRepository();
        ((TestPath) catalog).reset();

        catalog.upsertCatalogItem("ACC-0001", new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3), null);
        catalog.upsertCatalogItem("ACC-0002", new CatalogItem("ACC-0002", "Refrigeration Unit", 2500, 2, 7), null);
        catalog.upsertCatalogItem("ACC-0003", new CatalogItem("ACC-0003", "Freezer Unit", 4500, 4, 5), null);

        for (int i = 0; i < 10; ++i)
        {
            repository.createQuote(createQuote(String.format("quote-%s", i)));
        }
    }

    public void testGetQuote()
    {
        Quote q1 = repository.getQuote("quote-0");
        assertNotNull(q1);
        assertNull(repository.getQuote("quote-100"));

        assertEquals("quote-0", q1.getQuoteId());
        assertEquals("cust-quote-0", q1.getCustomerName());
        assertEquals(2, q1.getQuoteItems().size());

        QuoteItemInfo a0 = q1.getQuoteItems().get(0);
        QuoteItemInfo a1 = q1.getQuoteItems().get(1);

        assertTrue(
            ("ACC-0001".equals(a0.getSkuNumber()) && "ACC-0003".equals(a1.getSkuNumber())) ||
            ("ACC-0001".equals(a1.getSkuNumber()) && "ACC-0003".equals(a0.getSkuNumber())));
        assertTrue(
            (15 == a0.getAmount() && 1 == a1.getAmount()) ||
            (15 == a1.getAmount() && 1 == a0.getAmount()));
    }

    public void testGetQuotesByCustomerName()
    {
        List<Quote> q1 = repository.getQuotesByCustomerName("cust-quote-7");
        assertNotNull(q1);
        assertEquals(1, q1.size());
        List<Quote> q3 = repository.getQuotesByCustomerName("non-existent");
        assertNotNull(q3);
        assertTrue(q3.isEmpty());

        List<Quote> q2 = repository.getQuotesByCustomerName("cust-quote");
        assertNotNull(q2);
        assertEquals(10, q2.size());
    }

    public void testCreateQuote() throws Exception
    {
        Quote template = createQuote("New-Quote-1");

        Quote q1 = repository.createQuote(template);

        assertEquals(template, q1);

        try
        {
            // Duplicate
            repository.createQuote(template);
            fail("Duplicate quote not caught.");
        }
        catch (BadRequestException bre)
        {
        }
    }

    public void testUpdateQuote()
    {
        Quote q1 = repository.getQuote("quote-5");
        assertNotNull(q1);

        q1.setState("WA");
        assertTrue(repository.updateQuote("quote-5", q1, null));

        Quote q2 = repository.getQuote("quote-5");
        assertEquals(q1, q2);

        assertFalse(repository.updateQuote("quote-16", q1, null));
    }

    public void testRemoveQuote()
    {
        assertTrue(repository.removeQuote("quote-5", null));
        assertFalse(repository.removeQuote("quote-16", null));
        List<Quote> q2 = repository.getQuotesByCustomerName("cust-quote");
        assertNotNull(q2);
        assertEquals(9, q2.size());
    }

    public static Quote createQuote(String quoteId)
    {
        Quote quote = new Quote();
        quote.setQuoteId(quoteId);
        quote.setDealerName("DLR-1");
        quote.setCustomerName("cust-" + quoteId);
        quote.addQuoteItem("ACC-0001", 15);
        quote.addQuoteItem("ACC-0003", 1);
        return quote;
    }

    private QuoteRepository repository;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/ShipmentRepositoryTest.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.BadRequestException;
import smpl.ordering.TestPath;
import smpl.ordering.models.*;

import java.util.List;

import static org.junit.Assert.*;

@SuppressWarnings("EmptyCatchBlock")
public class ShipmentRepositoryTest
{
    public void setUp() throws Exception
    {
        // Set up some data for the order tests to access.

        DealersRepository dealers = RepositoryFactory.getDealersRepository();
        ((TestPath) dealers).reset();

        dealers.upsertDealer(DealersRepositoryTest.createDealer("DLR-1"), null);
        dealers.upsertDealer(DealersRepositoryTest.createDealer("DLR-2"), null);
        dealers.upsertDealer(DealersRepositoryTest.createDealer("DLR-3"), null);
        dealers.upsertDealer(DealersRepositoryTest.createDealer("DLR-4"), null);

        CatalogItemsRepository catalog = RepositoryFactory.getCatalogItemsRepository();
        ((TestPath) catalog).reset();

        catalog.upsertCatalogItem("ACC-0001", new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3), null);
        catalog.upsertCatalogItem("ACC-0002", new CatalogItem("ACC-0002", "Refrigeration Unit", 2500, 2, 7), null);
        catalog.upsertCatalogItem("ACC-0003", new CatalogItem("ACC-0003", "Freezer Unit", 4500, 4, 5), null);

        QuoteRepository quotes = RepositoryFactory.getQuoteRepository();
        ((TestPath) quotes).reset();
        orders = RepositoryFactory.getOrderRepository();
        ((TestPath) orders).reset();

        shipments = RepositoryFactory.getShipmentRepository();
        ((TestPath) shipments).reset();

        for (int i = 0; i < 10; ++i)
        {
            Quote template = quotes.createQuote(QuoteRepositoryTest.createQuote(String.format("quote-%s", i)));
            Order order = orders.createOrder(template.getQuoteId());
            if (i < 5)
            {
                shipments.createShipment(createShipmentRecord(order.getOrderId()));
                order.setStatus(OrderStatus.Shipped);
                orders.updateOrder(order.getOrderId(), order, null);
            }
        }
    }

    public void testGetShipments()
    {
        List<ShipmentRecord> records = shipments.getShipments(OrderStatus.None);
        assertNotNull(records);
        assertEquals(5, records.size());

        records = shipments.getShipments(OrderStatus.Delivered);
        assertNotNull(records);
        assertEquals(0, records.size());

        records = shipments.getShipments(OrderStatus.Shipped);
        assertNotNull(records);
        assertEquals(5, records.size());
    }

    public void testGetShipmentById()
    {
        ShipmentRecord record = shipments.getShipmentById("order-quote-0");
        assertNotNull(record);
        assertNotNull(record.getEvents());
        assertEquals(0, record.getEvents().size());
    }

    public void testCreateShipment() throws BadRequestException
    {
        List<ShipmentRecord> records = shipments.getShipments(OrderStatus.None);
        assertNotNull(records);
        assertEquals(5, records.size());

        try
        {
            // Duplicate shipment record
            Order o = orders.getOrder("order-quote-0");
            shipments.createShipment(createShipmentRecord(o.getOrderId()));
            fail("Should have seen an exception");
        }
        catch (BadRequestException bre)
        {
        }

        Order o = orders.getOrder("order-quote-5");
        ShipmentRecord newShipment = shipments.createShipment(createShipmentRecord(o.getOrderId()));
        assertNotNull(newShipment);
        assertEquals(o.getOrderId(), newShipment.getOrderId());

        records = shipments.getShipments(OrderStatus.None);
        assertNotNull(records);
        assertEquals(6, records.size());
    }

    public void testUpdateShipment()
    {
        ShipmentRecord record = shipments.getShipmentById("order-quote-0");
        assertNotNull(record);
        assertNotNull(record.getEvents());
        assertEquals(0, record.getEvents().size());

        record.addEvent("12/1/2014", "This is just a test.");

        shipments.updateShipment(record);

        getShipment("order-quote-0");
    }

    private void getShipment(String id)
    {
        ShipmentRecord record;
        record = shipments.getShipmentById(id);
        assertNotNull(record);
        assertNotNull(record.getEvents());
        assertEquals(1, record.getEvents().size());

        assertEquals("12/1/2014", record.getEvents().get(0).getDate());
        assertEquals("This is just a test.", record.getEvents().get(0).getComments());
    }

    public void testAddEvent()
    {
        ShipmentRecord record = shipments.getShipmentById("order-quote-0");
        assertNotNull(record);
        assertNotNull(record.getEvents());
        assertEquals(0, record.getEvents().size());

        shipments.addEvent("order-quote-0", new ShipmentEventInfo("12/1/2014", "This is just a test."));

        getShipment("order-quote-0");
    }

    public static ShipmentRecord createShipmentRecord(String orderId)
    {
        ShipmentRecord result = new ShipmentRecord();
        result.setOrderId(orderId);
        result.setDeliveryDate("02/02/2015");
        result.setContactName("Jane Smith");
        result.setPrimaryContactPhone(new PhoneInfo("206-555-1212", "Mobile"));
        result.setAlternateContactPhone(new PhoneInfo("206-555-1111", "Work"));
        result.setDeliveryAddress(new DeliveryAddress("123 Main Street", "Bellevue", "WA", "98006", "Near KFC"));
        return result;
    }

    private OrderRepository orders;
    private ShipmentRepository shipments;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mock/test/MockCatalogItemsRepositoryTest.java
================================================
package smpl.ordering.repositories.mock.test;

import org.junit.Before;
import org.junit.Test;
import smpl.ordering.repositories.CatalogItemsRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;

public class MockCatalogItemsRepositoryTest extends CatalogItemsRepositoryTest
{
    @Before
    @Override
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");
        super.setUp();
    }

    @Test
    @Override
    public void testGetCatalogItems()
    {
        super.testGetCatalogItems();
    }

    @Test
    @Override
    public void testGetCatalogItem()
    {
        super.testGetCatalogItem();
    }

    @Test
    @Override
    public void testUpsertCatalogItem()
    {
        super.testUpsertCatalogItem();
    }

    @Test
    @Override
    public void testRemoveCatalogItem()
    {
        super.testRemoveCatalogItem();
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mock/test/MockDealersRepositoryTest.java
================================================
package smpl.ordering.repositories.mock.test;

import org.junit.Before;
import org.junit.Test;
import smpl.ordering.repositories.DealersRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;

@SuppressWarnings("EmptyMethod")
public class MockDealersRepositoryTest
        extends DealersRepositoryTest
{
    @Before
    @Override
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");
        super.setUp();
    }

    @Test
    @Override
    public void testGetDealers()
    {
        super.testGetDealers();
    }

    @Test
    @Override
    public void testGetDealer()
    {
        super.testGetDealer();
    }

    @Test
    @Override
    public void testUpsertDealer()
    {
        super.testUpsertDealer();
    }

    @Test
    @Override
    public void testRemoveDealer()
    {
        super.testRemoveDealer();
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mock/test/MockOrderRepositoryTest.java
================================================
package smpl.ordering.repositories.mock.test;

import org.junit.Before;
import org.junit.Test;

import smpl.ordering.repositories.*;

@SuppressWarnings("EmptyMethod")
public class MockOrderRepositoryTest
        extends OrderRepositoryTest
{

    @Before
    @Override
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");
        super.setUp();
    }

    @Test
    @Override
    public void testHasOrder()
    {
        super.testHasOrder();
    }

    @Test
    @Override
    public void testGetOrder()
    {
        super.testGetOrder();
    }

    @Test
    @Override
    public void testGetOrdersByQuoteId()
    {
        super.testGetOrdersByQuoteId();
    }

    @Test
    @Override
    public void testGetOrdersByStatus()
    {
        super.testGetOrdersByStatus();
    }

    @Test
    @Override
    public void testGetOrdersByDealerName()
    {
        super.testGetOrdersByDealerName();
    }

    @Test
    @Override
    public void testCreateOrder() throws Exception
    {
        super.testCreateOrder();
    }

    @Test
    @Override
    public void testUpdateOrder() throws Exception
    {
        super.testUpdateOrder();
    }

    @Test
    @Override
    public void testUpdateOrder1() throws Exception
    {
        super.testUpdateOrder1();
    }

    private OrderRepository repository;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mock/test/MockQuoteRepositoryTest.java
================================================
package smpl.ordering.repositories.mock.test;

import org.junit.Before;
import org.junit.Test;
import smpl.ordering.repositories.*;

@SuppressWarnings("EmptyMethod")
public class MockQuoteRepositoryTest
        extends QuoteRepositoryTest
{
    @Before
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");
        super.setUp();
    }

    @Test
    public void testGetQuote()
    {
        super.testGetQuote();
    }

    @Test
    public void testGetQuotesByCustomerName()
    {
        super.testGetQuotesByCustomerName();
    }

    @Test
    public void testCreateQuote() throws Exception
    {
        super.testCreateQuote();
    }

    @Test
    public void testUpdateQuote()
    {
        super.testUpdateQuote();
    }

    @Test
    public void testRemoveQuote()
    {
        super.testRemoveQuote();
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mock/test/MockShipmentRepositoryTest.java
================================================
package smpl.ordering.repositories.mock.test;

import org.junit.Before;
import org.junit.Test;
import smpl.ordering.BadRequestException;
import smpl.ordering.repositories.RepositoryFactory;
import smpl.ordering.repositories.ShipmentRepositoryTest;

@SuppressWarnings("EmptyMethod")
public class MockShipmentRepositoryTest extends ShipmentRepositoryTest
{
    @Before
    @Override
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");
        super.setUp();
    }

    @Override
    @Test
    public void testGetShipmentById()
    {
        super.testGetShipmentById();
    }

    @Override
    @Test
    public void testGetShipments()
    {
        super.testGetShipments();
    }

    @Override
    @Test
    public void testCreateShipment() throws BadRequestException
    {
        super.testCreateShipment();
    }

    @Override
    @Test
    public void testUpdateShipment()
    {
        super.testUpdateShipment();
    }

    @Override
    @Test
    public void testAddEvent()
    {
        super.testAddEvent();
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mongodb/test/IntegrationTests.java
================================================
package smpl.ordering.repositories.mongodb.test;

public interface IntegrationTests{

}


================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mongodb/test/MongoCatalogItemsRepositoryTest.java
================================================
package smpl.ordering.repositories.mongodb.test;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import smpl.ordering.ConfigurationRule;
import smpl.ordering.repositories.CatalogItemsRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;

@Category(IntegrationTests.class)
public class MongoCatalogItemsRepositoryTest extends CatalogItemsRepositoryTest
{
    @Rule
    public ConfigurationRule rule = new ConfigurationRule();

    @Before
    @Override
    public void setUp() throws Exception
    {
        // Make sure we're using a clean repository.
        RepositoryFactory.reset("mongodb");
        super.setUp();
    }

    @Test
    @Override
    public void testGetCatalogItems()
    {
        super.testGetCatalogItems();
    }

    @Test
    @Override
    public void testGetCatalogItem()
    {
        super.testGetCatalogItem();
    }

    @Test
    @Override
    public void testUpsertCatalogItem()
    {
        super.testUpsertCatalogItem();
    }

    @Test
    @Override
    public void testRemoveCatalogItem()
    {
        super.testRemoveCatalogItem();
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mongodb/test/MongoDealersRepositoryTest.java
================================================
package smpl.ordering.repositories.mongodb.test;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import smpl.ordering.ConfigurationRule;
import smpl.ordering.repositories.DealersRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;


@SuppressWarnings("EmptyMethod")
@Category(IntegrationTests.class)
public class MongoDealersRepositoryTest
        extends DealersRepositoryTest
{
    @Rule
    public ConfigurationRule rule = new ConfigurationRule();

    @Before
    @Override
    public void setUp() throws Exception
    {
        // Make sure we're using a clean repository.
        RepositoryFactory.reset("mongodb");
        super.setUp();
    }

    @Test
    @Override
    public void testGetDealers()
    {
        super.testGetDealers();
    }

    @Test
    @Override
    public void testGetDealer()
    {
        super.testGetDealer();
    }

    @Test
    @Override
    public void testUpsertDealer()
    {
        super.testUpsertDealer();
    }

    @Test
    @Override
    public void testRemoveDealer()
    {
        super.testRemoveDealer();
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mongodb/test/MongoOrderRepositoryTest.java
================================================
package smpl.ordering.repositories.mongodb.test;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import smpl.ordering.ConfigurationRule;
import smpl.ordering.repositories.OrderRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;

@SuppressWarnings("EmptyMethod")
@Category(IntegrationTests.class)
public class MongoOrderRepositoryTest
        extends OrderRepositoryTest
{
    @Rule
    public ConfigurationRule rule = new ConfigurationRule();

    @Before
    @Override
    public void setUp() throws Exception
    {
        // Make sure we're using a clean repository.
        RepositoryFactory.reset("mongodb");
        super.setUp();
    }

    @Test
    @Override

    public void testHasOrder()
    {
        super.testHasOrder();
    }

    @Test
    @Override
    public void testGetOrder()
    {
        super.testGetOrder();
    }

    @Test
    @Override
    public void testGetOrdersByQuoteId()
    {
        super.testGetOrdersByQuoteId();
    }

    @Test
    @Override
    public void testGetOrdersByStatus()
    {
        super.testGetOrdersByStatus();
    }

    @Test
    @Override
    public void testGetOrdersByDealerName()
    {
        super.testGetOrdersByDealerName();
    }

    @Test
    @Override
    public void testCreateOrder() throws Exception
    {
        super.testCreateOrder();
    }

    @Test
    @Override
    public void testUpdateOrder() throws Exception
    {
        super.testUpdateOrder();
    }

    @Test
    @Override
    public void testUpdateOrder1() throws Exception
    {
        super.testUpdateOrder1();
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mongodb/test/MongoQuoteRepositoryTest.java
================================================
package smpl.ordering.repositories.mongodb.test;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import smpl.ordering.ConfigurationRule;
import smpl.ordering.repositories.QuoteRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;

@SuppressWarnings("EmptyMethod")
@Category(IntegrationTests.class)
public class MongoQuoteRepositoryTest
        extends QuoteRepositoryTest
{
    @Rule
    public ConfigurationRule rule = new ConfigurationRule();

    @Before
    @Override
    public void setUp() throws Exception
    {
        // Make sure we're using a clean repository.
        RepositoryFactory.reset("mongodb");
        super.setUp();
    }

    @Test
    @Override
    public void testGetQuote()
    {
        super.testGetQuote();
    }

    @Test
    @Override
    public void testGetQuotesByCustomerName()
    {
        super.testGetQuotesByCustomerName();
    }

    @Test
    @Override
    public void testCreateQuote() throws Exception
    {
        super.testCreateQuote();
    }

    @Test
    @Override
    public void testUpdateQuote()
    {
        super.testUpdateQuote();
    }

    @Test
    @Override
    public void testRemoveQuote()
    {
        super.testRemoveQuote();
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mongodb/test/MongoShipmentRepositoryTest.java
================================================
package smpl.ordering.repositories.mongodb.test;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import smpl.ordering.BadRequestException;
import smpl.ordering.ConfigurationRule;
import smpl.ordering.repositories.RepositoryFactory;
import smpl.ordering.repositories.ShipmentRepositoryTest;

@SuppressWarnings("EmptyMethod")
@Category(IntegrationTests.class)
public class MongoShipmentRepositoryTest extends ShipmentRepositoryTest
{
    @Rule
    public ConfigurationRule rule = new ConfigurationRule();

    @Before
    @Override
    public void setUp() throws Exception
    {
        // Make sure we're using a clean repository.
        RepositoryFactory.reset("mongodb");
        super.setUp();
    }

    @Override
    @Test
    public void testGetShipmentById()
    {
        super.testGetShipmentById();
    }

    @Override
    @Test
    public void testGetShipments()
    {
        super.testGetShipments();
    }

    @Override
    @Test
    public void testCreateShipment() throws BadRequestException
    {
        super.testCreateShipment();
    }

    @Override
    @Test
    public void testUpdateShipment()
    {
        super.testUpdateShipment();
    }

    @Override
    @Test
    public void testAddEvent()
    {
        super.testAddEvent();
    }

}



================================================
FILE: src/Backend/OrderService/src/test/resources/application.properties
================================================
###########
# This properties file is intended to be used for running unit tests.
###########

#
# Service configuration, applies to Spring Boot, not when deploying under
# an application server, for which configuration is done separately.
#
server.port: 8080
management.port: 8081
management.address: 127.0.0.1

#
# Configuration elements specific to the Fabrikant ordering service.
# Test against in-memory repositories except for those tests that are explicitly testing
# persistent store-based repositories.
#
ordering.storage: memory
ordering.pingMessage: Testing
ordering.validationMessage: Testing

# MongoDB server used for unit tests.
mongodb.host: localhost
# Use a database separate from the production database.
mongodb.database: orderingtest




================================================
FILE: src/Clients/README.md
================================================
# Building the Client #

The MRP client is a static website.  The build process here creates a single archive (war) file that is used by the Tomcat host for the site.

## Windows ##

Building on Windows the following command is used to build the client WAR file.

```
.\gradlew.bat build

```
This creates the ```mrp.war``` in the ```./build/libs``` directory.

## Linux ##

Building on Linux the following command is used to build the client WAR file.

```
# ensure the 'gradlew' is executable
chmod +x gradlew

# now build
./gradlew build

```

## Cleaning all builds ##

### Windows ###

Run ```removeBuild.bat``` to remove the ```./build``` directory.

### Linux ###

On Linux remove the ```./build``` with the following command to 'clean'

```
rm -rf ./build
```

## MRP.war file ##

Ensure you copy or move the ```./build/libs/mrp.war``` file to your location needed to run.




================================================
FILE: src/Clients/gradlew
================================================
#!/usr/bin/env bash

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn ( ) {
    echo "$*"
}

die ( ) {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
esac

# For Cygwin, ensure paths are in UNIX format before anything is touched.
if $cygwin ; then
    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
fi

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >&-
APP_HOME="`pwd -P`"
cd "$SAVED" >&-

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=$((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$args0" ;;
        (2) set -- "$args0" "$args1" ;;
        (3) set -- "$args0" "$args1" "$args2" ;;
        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
function splitJvmOpts() {
    JVM_OPTS=("$@")
}
eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"

exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"



================================================
FILE: src/Clients/gradlew.bat
================================================
@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS=

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto init

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto init

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:init
@rem Get command-line arguments, handling Windowz variants

if not "%OS%" == "Windows_NT" goto win9xME_args
if "%@eval[2+2]" == "4" goto 4NT_args

:win9xME_args
@rem Slurp the command line arguments.
set CMD_LINE_ARGS=
set _SKIP=2

:win9xME_args_slurp
if "x%~1" == "x" goto execute

set CMD_LINE_ARGS=%*
goto execute

:4NT_args
@rem Get arguments from the 4NT Shell from JP Software
set CMD_LINE_ARGS=%$

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar

@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega



================================================
FILE: src/Clients/removeBuild.bat
================================================
rd /S /Q build > NUL 2>&1



================================================
FILE: src/Clients/gradle/wrapper/gradle-wrapper.properties
================================================
#Wed Jan 28 14:56:44 PST 2015
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=http\://services.gradle.org/distributions/gradle-2.1-bin.zip



================================================
FILE: src/Clients/Web/default.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Parts Unlimited</title>

    <!-- WinJS references -->
    <link href="winjs/css/ui-light.css" rel="stylesheet" />
    <script src="winjs/js/winjs.js"></script>

    <!-- Fabrikam references -->
    <link href="css/default.css" rel="stylesheet" />
    <script src="js/serverconfig.js"></script>
    <script src="js/data.js"></script>
    <script src="js/navigator.js"></script>
    <script src="js/date.js"></script>
    <script src="js/default.js"></script>
    <script src="controls/edittools/edittools.js"></script>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places"></script>
</head>
<body>
    <ul class="navigation">
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Home', icon: 'url(images/FabrikamIcon.png)', page:'main' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Dealers', icon: 'url(images/DealersIcon.png)', page:'dealers' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Quotes', icon: 'url(images/QuoteIcon.png)', page:'quotes' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Orders', icon: 'url(images/OrderIcon.png)', page:'orders' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Deliveries', icon: 'url(images/DeliveryIcon.png)', page:'deliveries' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Catalog', icon: 'url(images/CatalogIcon.png)', page:'catalog' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Settings', icon: 'url(images/SettingsIcon.png)', page:'settings' }"></div>
    </ul>

    <div id="progressUnderlay" class="progressUnderlay"></div>
    <div id="progressContainer" class="progressContainer">
        <div class="progressMessageContainer win-type-x-large">
            <h2 id="progressMessage">Starting...</h2>
        </div>
        <progress id="progressRing" style="color: #09F;" class="win-large win-ring progressLocation"></progress>
    </div>

    <input type="checkbox" id="nav-trigger" class="nav-trigger" />
    <label for="nav-trigger"></label>
    <div id="contenthost" data-win-control="Application.PageControlNavigator" data-win-options="{home: 'pages/main/main.html'}"></div>
    <div id="confirmdialog">
        <div data-win-control="WinJS.UI.ContentDialog" data-win-options="{
             title: 'The title',
             primaryCommandText: 'Yes',
             secondaryCommandText: 'No'
        }">
        </div>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/index.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Parts Unlimited MRP - Demo</title>

    <!-- WinJS references -->
    <link href="winjs/css/ui-light.css" rel="stylesheet" />
    <script src="winjs/js/winjs.js"></script>

    <!-- Parts Unlimited references -->
    <link href="css/default.css" rel="stylesheet" />
    <script src="js/serverconfig.js"></script>
    <script src="js/data.js"></script>
    <script src="js/navigator.js"></script>
    <script src="js/date.js"></script>
    <script src="js/default.js"></script>
    <script src="controls/edittools/edittools.js"></script>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places"></script>
</head>
<body>
    <ul class="navigation">
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Home', icon: 'url(images/FabrikamIcon.png)', page:'main' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Dealers', icon: 'url(images/DealersIcon.png)', page:'dealers' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Quotes', icon: 'url(images/QuoteIcon.png)', page:'quotes' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Orders', icon: 'url(images/OrderIcon.png)', page:'orders' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Deliveries', icon: 'url(images/DeliveryIcon.png)', page:'deliveries' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Catalog', icon: 'url(images/CatalogIcon.png)', page:'catalog' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Settings', icon: 'url(images/SettingsIcon.png)', page:'settings' }"></div>
    </ul>

    <div id="progressUnderlay" class="progressUnderlay"></div>
    <div id="progressContainer" class="progressContainer">
        <div class="progressMessageContainer win-type-x-large">
            <h2 id="progressMessage">Starting...</h2>
        </div>
        <progress id="progressRing" style="color: #09F;" class="win-large win-ring progressLocation"></progress>
    </div>

    <input type="checkbox" id="nav-trigger" class="nav-trigger" />
    <label for="nav-trigger"></label>
    <div id="contenthost" data-win-control="Application.PageControlNavigator" data-win-options="{home: 'pages/main/main.html'}"></div>
    <div id="confirmdialog">
        <div data-win-control="WinJS.UI.ContentDialog" data-win-options="{
             title: 'The title',
             primaryCommandText: 'Yes',
             secondaryCommandText: 'No'
        }">
        </div>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/controls/edittools/edittools.css
================================================
﻿.edittools {
    display: block;
    height: 40px;
}

.edit-tools-button {
    min-width: 60px;
    min-height: 40px;
    width: 60px;
    margin: 0px;
    padding: 0px;
    height: 40px;
    background-color: transparent;
    border: none;
    font-family: "Segoe UI Symbol", "Symbols";
    font-size: 18pt;
}



================================================
FILE: src/Clients/Web/controls/edittools/edittools.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>edittools</title>

    <link href="edittools.css" rel="stylesheet" />
    <script src="edittools.js"></script>
</head>
<body>
    <div id="edittools-template" class="edittools win-disposable">
        <button id="edit-tools-delete" class="edit-tools-button" type="button" title="Delete">
            <label class="edit-tools-button-label" data-label="delete"></label>
        </button>
        <button id="edit-tools-save" class="edit-tools-button" type="button" title="Save">
            <label class="edit-tools-button-label" data-label="save"></label>
        </button>
        <button id="edit-tools-edit" class="edit-tools-button" type="button" title="Add">
            <label class="edit-tools-button-label" data-label="add"></label>
        </button>
        <button id="edit-tools-edit" class="edit-tools-button" type="button" title="Order">
            <label class="edit-tools-button-label" data-label="edit"></label>
        </button>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/controls/edittools/edittools.js
================================================
﻿(function () {
    "use strict";

    var controlTemplate = null;
    var templateInitPromise = null;

    // This will load and cache the control's template.
    // This happens the first time an instance of the control is created, or when you call Controls.EditTools.cacheControlTemplate
    function loadControlTemplate() {
        if (!templateInitPromise) {
            var controlFragment = document.createElement("div");
            templateInitPromise = WinJS.UI.Fragments.render("controls/edittools/edittools.html", controlFragment).then(function () {
                controlTemplate = new WinJS.Binding.Template(controlFragment.querySelector("#edittools-template"));
                controlTemplate._renderImpl = controlTemplate._compileTemplate({ target: "render" });
            });
        }
        return templateInitPromise;
    }

    var EditTools = WinJS.Class.define(function (element, options) {
        var options = options || {};
        this.element = element || document.createElement("div");
        this.element.winControl = this;
        WinJS.UI.setOptions(this, options);

        this.controlInitialized = false;
        var that = this;
        this.initPromise = loadControlTemplate().then(function () {
            that.element.className = controlTemplate.element.className;
            return controlTemplate.render(options.dataSource, that.element).then(
                function (element) {
                    that._initialize();
                    that.controlInitialized = true;
                });
        });
    }
    , {
        _initialize: function () {
            var that = this;
            var labels = this.element.querySelectorAll(".edit-tools-button-label");
            for (var n = 0; n < labels.length; n++) {
                var label = labels[n];
                if (WinJS.UI.AppBarIcon[label.dataset.label]) {
                    label.textContent = WinJS.UI.AppBarIcon[label.dataset.label];
                }
                else {
                    label.textContent = label.dataset.label;
                }
                label.parentElement.dataset.label = label.dataset.label;
            }

            var buttons = this.getButtons();
            Object.keys(buttons).forEach(function (buttonKey) {
                var button = buttons[buttonKey];
                button.addEventListener("click", function () {
                    that.dispatchEvent("click", {
                        sender: button,
                        label: this.dataset.label
                    });
                });
            });
        },

        ensureInitialized: function () {
            return this.initPromise;
        },

        dispose: function () {
            // TODO: Control clean-up
            this._disposed = true;
        },

        getButtons: function () {
            var buttons = {};
            var buttonElements = this.element.querySelectorAll(".edit-tools-button");
            for (var n = 0; n < buttonElements.length; n++) {
                var buttonElement = buttonElements[n];
                buttons[buttonElement.dataset.label] = buttonElement;
            }
            return buttons;
        }
    },
    {
        cacheControlTemplate: function () {
            return loadControlTemplate();
        },
    });

    WinJS.Namespace.define("Controls", {
        EditTools: EditTools,
    });
})();

WinJS.Class.mix(Controls.EditTools,
    WinJS.Utilities.createEventProperties("click"),
    WinJS.UI.DOMEventMixin);


================================================
FILE: src/Clients/Web/css/default.css
================================================
﻿body {
    overflow-x: hidden;
    font-weight: 400;
}

input[type=text] {
    font-size: 9pt;
}

select {
    font-size: 9pt;
    padding: 2px 10px 5px 6px;
    min-height: 28px;
    margin-bottom: 8px;
    margin-top: 8px;
    height: 28px;
}

/*
Weight and size definitions for typographic classes and elements.
*/
h1, .win-type-xx-large {
    font-size: 42pt;
    font-weight: 200;
    letter-spacing: 0;
    line-height: 1.1429; /* 64px when font-size is 42pt */
}

h2, .win-type-x-large {
    font-size: 20pt;
    font-weight: 200;
    line-height: 1.2; /* 32px when font-size is 20pt */
}

h3, .win-type-large {
    font-size: 11pt;
    font-weight: 600;
    line-height: 1.3636; /* 20px when font-size is 11pt */
}

h4, .win-type-medium, code, pre, samp {
    font-size: 11pt;
    font-weight: 400;
    line-height: 1.3636; /* 20px when font-size is 11pt */
}

body, h5, .win-type-small, legend {
    font-size: 11pt;
    font-weight: 300;
    line-height: 1.3636; /* 20px when font-size is 11pt */
}

.win-type-x-small {
    font-size: 11pt;
    font-weight: 300;
    line-height: 1.3636; /* 20px when font-size is 11pt */
}

h6, caption, figcaption, small, .win-type-xx-small {
    font-size: 9pt;
    font-weight: 400;
    line-height: 1.6667; /* 20px when font-size is 9pt */
}

h1, h2, h3, h4, h5, h6 {
    margin-top: 0;
    margin-bottom: 0;
}

#launchpad {
    height: 300px;
    width: 640px;
    margin-left: auto;
    margin-right: auto;
    margin-top: 100px;
}

#companylogo {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

#launchtiles {
    display: flex;
    margin-top: 100px;
}

.launchtile {
    width: 140px;
    height: 85px;
    background-color: #E0E0E0;
    margin: 10px;
}

.launchtilelogo {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

.launchtiletitle {
    text-align: center;
}

.launchtileinner {
}

#contenthost {
    min-width: 100%;
    min-height: 100%;
    background-color: #fff;
    position: absolute;
    top: 0;
    bottom: 100%;
    left: 0;
    z-index: 1;
}

.titlearea {
    float: left;
    height: 40px;
    margin-top: 3px;
}

.fragment {
    height: 100%;
    width: 100%;
}

    .fragment section[role=main] {
        margin: auto 40px;
        height: calc(100% - 60px);
    }

.navigation {
    margin: 0px;
    padding: 52px 0px 0px 10px;
    list-style: none;
    background: #E0E0E0;
    width: 400px;
    height: 100%;
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 0;
}

.header-cover {
    position: fixed;
    top: 0px;
    left: 0px;
    height: 44px;
    width: 100%;
    background-color: #E0E0E0;
    z-index: 1;
}

.nav-cover {
    position: fixed;
    top: 0px;
    left: 0px;
    height: 44px;
    width: 70px;
    background-color: #E0E0E0;
    z-index: 2;
}

.nav-trigger {
    position: absolute;
    clip: rect(0, 0, 0, 0);
}

label[for="nav-trigger"] {
    position: fixed;
    top: 0px;
    left: 0px;
    z-index: 2;
    width: 52px;
    height: 44px;
    cursor: pointer;
    background-image: url('../images/hamburger.png');
    background-size: 30px;
    background-repeat: no-repeat;
    background-position-x: 12px;
    background-position-y: 10px;
    background-color: #C0C0C0;
}

.nav-trigger:checked + label {
    left: 200px;
}

.nav-trigger:checked ~ #contenthost {
    left: 200px;
    box-shadow: 0 0 5px 5px rgba(0,0,0,0.5);
}

.nav-trigger + label, #contenthost {
    transition: ease-in-out left 0.3s;
}

.navigationButton {
}

.win-navbarcommand-button,
.win-navbarcommand-splitbutton {
    background-color: transparent;
    color: #000000;
}

h2 {
    font-size: 28px;
    font-weight: 100;
    font-family: arial;
}

.progressUnderlay {
    position: absolute;
    left: 0px;
    top: 44px;
    width: 100%;
    height: 100%;
    z-index: 90;
    background-color: black;
    opacity: 0.0;
    transition-property: opacity;
    transition-timing-function: ease;
    transition-duration: 0.3s;
}

.progressContainer {
    display: flex;
    justify-content: center;
    align-content: center;
    flex-direction: column;
    width: 350px;
    height: 240px;
    position: absolute;
    top: calc(50% - 125px);
    left: calc(50% - 175px);
    z-index: 100;
    color: black;
    margin-left: 12px;
    margin-top: 0px;
    background-color: black;
    opacity: 0.75;
}

.progressMessageContainer {
    color: #09F;
    margin-bottom: 10px;
}

#progressMessage {
    display: flex;
    justify-content: center;
    align-content: center;
    flex-direction: row;
    margin-bottom: 10px;
}

.progressLocation {
    display: block;
    margin-left: auto;
    margin-right: auto;
    color: #09F;
}

.page-header {
    background-color: #E0E0E0;
    height: 44px;
}

.page-header-home {
    float: left;
    margin-left: 60px;
    margin-right: 10px;
    padding: 0px;
    display: inline;
    background-color: transparent;
    border-style: none;
    height: 44px;
    min-width: 60px;
}

    .page-header-home img {
        margin-top: 2px;
        height: 40px;
    }

.edittools {
    margin-left: 10px;
    margin-top: 10px;
}

.itemListView {
    float: left;
    margin-top: 10px;
    width: 320px;
    height: calc(100% - 100px);
}

.listItem {
    margin: 14px;
}

.list-item-entry-small {
    font-size: 12px;
    font-weight: 400;
}

.editDetail {
    float: left;
    margin-top: 10px;
    margin-left: 20px;
    width: 50%;
    background: #F0F0F0;
    padding: 10px;
    max-height: calc(100% - 120px);
    overflow-y: auto;
}

    .editDetail .horizontalDetail {
        display: inline-block;
        width: 100%;
    }

        .editDetail .horizontalDetail .horizontalDetailCol {
            display: inline-block;
            width: 32%;
        }

    .editDetail input[type=text] {
        float: left;
        width: calc(100% - 20px);
    }

    .editDetail .selectinput {
        float: left;
        width: calc(100% - 20px);
    }

    .editDetail .inputlabel {
        float: left;
        width: 30%;
        font-size: 11pt;
        font-weight: 600;
        line-height: 1.3636;
    }

    .editDetail .horizontalDetail .inputlabel {
        height: 24px;
        margin-top: 12px;
        width: 46%;
    }

    .editDetail .buttonlabel {
        margin-right: 8px;
        font-weight: 400;
    }

    .editDetail .horizontalDetail input {
        height: 24px;
        margin-right: 0px;
        width: 50%;
    }

.detailExpander {
    display: inline-block;
    width: 100%;
}

.pagePopup .win-contentdialog .win-contentdialog-dialog {
    max-width: 768px;
    max-height: 640px;
}

.pagePopup .win-contentdialog .win-contentdialog-scroller {
    height: 380px;
    overflow: hidden;
}

.pagePopup .fragment {
    height: 360px;
    overflow: hidden;
}

    .pagePopup .fragment section[role=main] {
        margin: auto 0px;
        height: 100%;
    }

.pagePopup .itemListView {
    height: calc(100% - 50px);
    max-height: calc(100% - 50px);
    width: calc(50% - 22px);
    margin-top: 0px;
}

.pagePopup .editDetail {
    float: right;
    max-height: calc(100% - 60px);
    margin-left: 10px;
    width: calc(50% - 22px);
    margin-top: 0px;
}

    .pagePopup .editDetail input[type=text] {
        width: 100%;
    }

.pagePopup .edittools {
}

#confirmdialog {
    z-index: 1000;
}

.textinput-multiline {
}

.win-container.win-selected .win-selectionborder {
    border-width: 2px;
    border-style: solid;
}

html.win-hoverable .win-container.win-selected:hover .win-selectionborder {
    border-width: 2px;
    border-style: solid;
}

.win-selectioncheckmarkbackground {
    display: none;
}



================================================
FILE: src/Clients/Web/js/data.js
================================================
﻿(function () {
    "use strict";

    var rest_headers = { "Content-type": "application/json", "Pragma": "no-cache", "Cache-Control": "no-cache", "If-Modified-Since": new Date(0).toUTCString() };

    var dealers = new WinJS.Binding.List().createSorted(function (l, r) {
        return l.name < r.name ? -1 : l.name === r.name ? 0 : 1;
    });

    var catalog = new WinJS.Binding.List().createSorted(function (l, r) {
        return l.skuNumber < r.skuNumber ? -1 : l.skuNumber === r.skuNumber ? 0 : 1;
    });

    var quotes = new WinJS.Binding.List().createSorted(function (l, r) {
        return l.validUntil < r.validUntil ? -1 : l.validUntil === r.validUntil ? 0 : 1;
    });

    var orders = new WinJS.Binding.List().createSorted(function (l, r) {
        return l.orderDate < r.orderDate ? -1 : l.orderDate === r.orderDate ? 0 : 1;
    });

    var deliveries = new WinJS.Binding.List().createSorted(function (l, r) {
        return l.deliveryDate > r.deliveryDate ? -1 : l.deliveryDate === r.deliveryDate ? 0 : 1;
    });

    WinJS.Namespace.define("Data", {
        dealers: dealers,
        dealersGet: dealersGet,
        dealerSave: dealerSave,
        dealerDelete: dealerDelete,
        dealerCreate: dealerCreate,
        catalog: catalog,
        catalogGet: catalogGet,
        catalogSave: catalogSave,
        catalogDelete: catalogDelete,
        catalogCreate: catalogCreate,
        catalogFindSku: catalogFindSku,
        quotes: quotes,
        quotesGet: quotesGet,
        quoteGetById: quoteGetById,
        quoteSave: quoteSave,
        quoteDelete: quoteDelete,
        quoteCreate: quoteCreate,
        orders: orders,
        ordersGet: ordersGet,
        orderGetById: orderGetById,
        orderSave: orderSave,
        orderDelete: orderDelete,
        orderCreateFromQuote: orderCreateFromQuote,
        orderFindById: orderFindById,
        deliveries: deliveries,
        deliveriesGet: deliveriesGet,
        deliverySave: deliverySave,
        deliveryDelete: deliveryDelete,
        deliveryCreateFromOrder: deliveryCreateFromOrder,
        deliveryFindById: deliveryFindById
    });

    function deliveriesGet() {

        return WinJS.xhr({ url: baseAddress + "/shipments", headers: rest_headers }).then(function (response) {
            if (response.status == 0) {
                reporterror("Could not retrieve deliveries", "Unfortunately, the server could not be contacted in order to retrieve delivery details.", "");
                return false;
            }
            Data.deliveries.splice(0, Data.deliveries.length);
            var theDeliveries = JSON.parse(response.responseText);
            theDeliveries.forEach(function processDealerData(deliveryData) {
                if (!deliveryData.deliveryDate) {
                    deliveryData.deliveryDate = Date.today().addMonths(2).toString("M/d/yyyy");
                }
                Data.deliveries.push(WinJS.Binding.as(deliveryData));
            });
            return WinJS.Promise.wrap(Data.deliveries);
        }, function (err) {
            reporterror("Could not retrieve deliveries", "Unfortunately, the server could not be contacted in order to retrieve delivery details.", err);
            return WinJS.Promise.wrap(null);
        });
    }

    function deliverySaveEdits(delivery) {
        var rawdelivery = delivery;
        if (delivery.backingData) {
            rawdelivery = delivery.backingData;
        }
        return WinJS.xhr({
            type: 'put',
            url: baseAddress + "/shipments/" + encodeURIComponent(delivery.orderId),
            headers: rest_headers,
            data: JSON.stringify(rawdelivery),
        }).then(function (response) {
            return WinJS.Promise.wrap(delivery);
        }, function (response) {
            return WinJS.Promise.wrap(null);
        });
    }

    function deliverySaveNew(delivery) {
        var rawdelivery = delivery;
        if (delivery.backingData) {
            rawdelivery = delivery.backingData;
        }
        return WinJS.xhr({
            type: 'post',
            url: baseAddress + "/shipments",
            headers: rest_headers,
            data: JSON.stringify(rawdelivery),
        }).then(function (response) {
            return WinJS.Promise.wrap(delivery);
        }, function (response) {
            return WinJS.Promise.wrap(null);
        });
    }

    function deliverySave(delivery, original) {
        if (delivery.__new) {
            return deliverySaveNew(delivery).then(function (saveddelivery) {
                return orderSave(delivery.__order, original.__order).then(function () {
                    return saveddelivery;
                });
            });
        }
        else {
            return deliverySaveEdits(delivery, original).then(function (saveddelivery) {
                return orderSave(delivery.__order, original.__order).then(function () {
                    return saveddelivery;
                });
            });
        }
    }

    function deliveryDelete(delivery) {
        return WinJS.xhr({
            type: 'delete',
            url: baseAddress + "/shipments/" + encodeURIComponent(delivery.orderId)
        }).then(function (response) {
            if (response.status == 204) {
                var index = deliveries.indexOf(delivery);
                if (index > -1) {
                    deliveries.splice(index, 1);
                }
            }
            else if (response.status == 0) {
                reporterror("Could not delete delivery", "Unfortunately, the server could not be contacted in order to retrieve delivery details.", "");
                return false;
            }
            return WinJS.Promise.wrap(true);
        }, function (response) {
            return WinJS.Promise.wrap(false);
        });
    }


    function deliveryCreateFromOrder(order) {
        return WinJS.Promise.as(WinJS.Binding.as({
            "orderId": order.orderId,
            "deliveryDate": Date.today().addMonths(1).toString("M/d/yyyy"),
            "events": [],
            "deliveryAddress": {
                "street": "",
                "city": order.__quote.city,
                "state": "",
                "postalCode": order.__quote.postalCode,
                "specialInstructions": ""
            },
            "contactName": order.__quote.customerName,
            "primaryContactPhone": {
                "phoneNumber": "",
                "kind": "Mobile"
            },
            "alternateContactPhone": {
                "phoneNumber": "",
                "kind": "Work"
            }
        })).then(function (delivery) {
            delivery.__new = true;
            Data.deliveries.push(delivery);
            return delivery;
        });
    }

    function deliveryFindById(orderId) {
        for (var n = 0; n < deliveries.length; n++) {
            if (deliveries.getAt(n).orderId == orderId) {
                return n;
            }
        }
        return -1;
    }


    function orderFindById(orderId) {
        for (var n = 0; n < orders.length; n++) {
            if (orders.getAt(n).orderId == orderId) {
                return n;
            }
        }
        return -1;
    }

    function ordersGet(dealer, status) {

        if (!dealer) {
            dealer = "";
        }

        if (!status) {
            status = "None";
        }

        return WinJS.xhr({ url: baseAddress + "/orders?dealer=" + encodeURIComponent(dealer) + "&status=" + encodeURIComponent(status), headers: rest_headers }).then(function (response) {
            Data.orders.splice(0, Data.orders.length);
            var theDealers = JSON.parse(response.responseText);
            theDealers.forEach(function processDealerData(orderData) {
                orders.push(WinJS.Binding.as(orderData));
            });
            return WinJS.Promise.wrap(orders);
        }, function (err) {
            reporterror("Could not retrieve orders", "Unfortunately, the server could not be contacted in order to retrieve order details.", err);
            return WinJS.Promise.wrap(null);
        });
    }

    function orderDelete(order) {
        return WinJS.xhr({
            type: 'delete',
            url: baseAddress + "/orders/" + encodeURIComponent(order.orderId)
        }).then(function (response) {
            if (response.status == 204) {
                var index = orders.indexOf(order);
                if (index > -1) {
                    orders.splice(index, 1);
                }
            }
            else if (response.status == 0) {
                reporterror("Could not delete order", "Unfortunately, the server could not be contacted in order to retrieve order details.", "");
                return false;
            }
            return WinJS.Promise.wrap(true);
        }, function (response) {
            return WinJS.Promise.wrap(false);
        });
    }

    function orderGetById(orderId) {

        return WinJS.xhr({ url: baseAddress + "/orders/" + encodeURIComponent(orderId) + "?unique=" + Date.now(), headers: rest_headers }).then(function (response) {
            Data.orders.splice(0, Data.orders.length);
            var orderData = JSON.parse(response.responseText);

            var order = WinJS.Binding.as(orderData);

            return Data.quoteGetById(order.quoteId).then(function (quote) {
                order.__quote = quote;
                return order;
            });
        });
    }

    function orderAddEvent(orderId, event) {
        return WinJS.xhr({
            type: 'post',
            url: baseAddress + "/orders/" + encodeURIComponent(orderId) + "/events",
            headers: rest_headers,
            data: JSON.stringify(event),
        }).then(function (response) {
            return WinJS.Promise.wrap(event);
        }, function (response) {
            return WinJS.Promise.wrap(null);
        });
    }

    function orderSave(order, original) {
        if (order.__new) {
            return orderSaveNew(order).then(function (savedorder) {
                return quoteSave(order.__quote).then(function () {
                    return savedorder;
                });
            });
        }
        else {
            return orderSaveEdits(order, original).then(function (savedorder) {
                return quoteSave(order.__quote).then(function () {
                    return savedorder;
                });
            });
        }
    }

    function orderSaveEdits(order, original) {

        return orderSaveEditsToStatus(order, original).then(function () {
            var raworder = order;
            if (order.backingData) {
                raworder = order.backingData;
            }
            return WinJS.xhr({
                type: 'put',
                url: baseAddress + "/orders/" + encodeURIComponent(raworder.orderId),
                headers: rest_headers,
                data: JSON.stringify(raworder),
            }).then(function (response) {
                return WinJS.Promise.wrap(order);
            }, function (response) {
                return WinJS.Promise.wrap(null);
            });
        });
    }

    function orderSaveEditsToStatus(order, original) {
        var statusSave = WinJS.Promise.as(order);
        var statusChangeEvent = { date: Date.now().toString("M/d/yyyy hh:mm:ss tt"), comments: "Status change: " + order.status };

        if (order.status != original.status) {
            statusSave = WinJS.xhr({
                type: 'put',
                url: baseAddress + "/orders/" + encodeURIComponent(order.orderId) + "/status",
                headers: rest_headers,
                data: JSON.stringify({ status: order.status, eventInfo: statusChangeEvent }),
            }).then(function (response) {
                order.events.push(statusChangeEvent);
                return WinJS.Promise.wrap(order);
            }, function (response) {
                return WinJS.Promise.wrap(null);
            });
        }

        return statusSave;
    }

    function orderSaveEditsIndividually(order, original) {
        var raworder = order;
        if (order.backingData) {
            raworder = order.backingData;
        }

        var statusSave = orderSaveEditsToStatus(order, original);
        var eventSave = WinJS.Promise.as(order.events);

        if (order.events.length != original.events.length || JSON.stringify(order.events) != JSON.stringify(original.events)) {
            var toAdd = [];

            var eventMap = {};
            var originalEventMap = {};

            for (var n = 0; n < order.events.length; n++) {
                var theDate = new Date(order.events[n].date).toString("M/d/yyyy hh:mm:ss tt");
                eventMap[theDate + order.events[n].comments] = order.events[n];
            }

            for (var n = 0; n < original.events.length; n++) {
                var theDate = new Date(original.events[n].date).toString("M/d/yyyy hh:mm:ss tt");
                originalEventMap[theDate + original.events[n].comments] = original.events[n];
            }

            Object.keys(eventMap).forEach(function (extraKey) {
                if (!originalEventMap[extraKey]) {
                    toAdd.push(eventMap[extraKey]);
                }
            });

            var a = 1;
        }

        var promises = [];

        promises.push(statusSave);

        for (var n = 0; n < toAdd.length; n++) {
            promises.push(orderAddEvent(order.orderId, toAdd[n]));
        }

        return WinJS.Promise.join(promises).then(function (results) {
            return results;
        });
    }

    function orderSaveNew(order) {
        return WinJS.xhr({
            type: 'post',
            url: baseAddress + "/orders",
            headers: rest_headers,
            data: JSON.stringify({ fromQuote: order.__quote.quoteId }),
        }).then(function (response) {
            if (response.status == 201) {
                //orders.push(order);
                return orderGetById("order-" + order.__quote.quoteId);
            }
            return WinJS.Promise.wrap(order);
        }, function (response) {
            return WinJS.Promise.wrap(null);
        });
    }

    function orderCreateFromQuote(quote) {
        return WinJS.xhr({
            type: 'post',
            url: baseAddress + "/orders?fromQuote=" + encodeURIComponent(quote.quoteId),
            headers: rest_headers,
            data: JSON.stringify({}),
        }).then(function (response) {
            if (response.status == 201) {
                var orderData = JSON.parse(response.responseText);
                var order = WinJS.Binding.as(orderData);
                return order;
            }
            else {
                return null;
            }
        }, function (response) {
            if (response.status == 409) {
                return orderGetById("order-" + quote.quoteId);
            }
            return WinJS.Promise.wrap(null);
        });
    }

    function quotesGet(search) {

        return WinJS.xhr({ url: baseAddress + "/quotes?name=" + encodeURIComponent(search) + "&unique=" + Date.now(), headers: rest_headers }).then(function (response) {
            if (response.status == 0) {
                reporterror("Could not retrieve quotes", "Unfortunately, the server could not be contacted in order to retrieve quote details.", "");
                return false;
            }
            Data.quotes.splice(0, Data.quotes.length);
            var theDealers = JSON.parse(response.responseText);
            theDealers.forEach(function processDealerData(quoteData) {
                quotes.push(WinJS.Binding.as(quoteData));
            });
            return WinJS.Promise.wrap(quotes);
        }, function (err) {
            reporterror("Could not retrieve quotes", "Unfortunately, the server could not be contacted in order to retrieve quote details.", err);
            return WinJS.Promise.wrap(null);
        });
    }
    function quoteDelete(quote) {
        return WinJS.xhr({
            type: 'delete',
            url: baseAddress + "/quotes/" + encodeURIComponent(quote.quoteId)
        }).then(function (response) {
            if (response.status == 204) {
                var index = quotes.indexOf(quote);
                if (index > -1) {
                    quotes.splice(index, 1);
                }
            }
            return WinJS.Promise.wrap(true);
        }, function (response) {
            return WinJS.Promise.wrap(false);
        });
    }

    function quoteGetById(quoteId) {

        return WinJS.xhr({ url: baseAddress + "/quotes/" + encodeURIComponent(quoteId) + "?unique=" + Date.now(), headers: rest_headers }).then(function (response) {
            var quoteData = JSON.parse(response.responseText);
            return WinJS.Binding.as(quoteData);
        });
    }

    function quoteSave(quote) {
        if (quote.__new) {
            return quoteSaveNew(quote);
        }
        else {
            return quoteSaveEdits(quote);
        }
    }

    function quoteSaveEdits(quote) {
        var rawquote = quote;
        if (quote.backingData) {
            rawquote = quote.backingData;
        }
        return WinJS.xhr({
            type: 'put',
            url: baseAddress + "/quotes/" + encodeURIComponent(quote.quoteId),
            headers: rest_headers,
            data: JSON.stringify(rawquote),
        }).then(function (response) {
            return WinJS.Promise.wrap(quote);
        }, function (response) {
            return WinJS.Promise.wrap(null);
        });
    }

    function quoteSaveNew(quote) {
        var rawquote = quote;
        if (quote.backingData) {
            rawquote = quote.backingData;
        }
        return WinJS.xhr({
            type: 'post',
            url: baseAddress + "/quotes",
            headers: rest_headers,
            data: JSON.stringify(rawquote),
        }).then(function (response) {
            if (response.status == 201) {
                quotes.push(quote);
            }
            return WinJS.Promise.wrap(quote);
        }, function (response) {
            return WinJS.Promise.wrap(null);
        });
    }

    function quoteCreate() {
        var newquote = WinJS.Binding.as({
            "quoteId": "",
            "validUntil": Date.today().addMonths(1).toString("M/d/yyyy"),
            "customerName": "",
            "dealerName": "",
            "comments": "",
            "terms": "60 days",
            "unitDescription": "",
            "unitCost": 0,
            "additionalItems": [],
            "totalCost": 0,
            "discount": 0,
            "height": 2.5,
            "width": 0,
            "depth": 0,
            "unit": "",
            "purpose": "Refrigerator",
            "ambientPeak": 30,
            "ambientAverage": 20,
            "buildOnSite": true,
            "city": "",
            "postalCode": "",
            "state": ""
        });
        newquote.__new = true;
        return newquote;
    }

    function catalogFindSku(sku) {
        var result = null;

        for (var n = 0; n < catalog.length; n++) {
            if (catalog.getAt(n).skuNumber == sku) {
                result = catalog.getAt(n);
                break;
            }
        }

        return result;
    }

    function catalogGet() {

        return WinJS.xhr({ url: baseAddress + "/catalog?unique=" + Date.now(), headers: rest_headers }).then(function (response) {
            if (response.status == 0) {
                reporterror("Could not retrieve datalog", "Unfortunately, the server could not be contacted in order to retrieve datalog details.", "");
                return null;
            }
            Data.catalog.splice(0, Data.catalog.length);
            var theCatalog = JSON.parse(response.responseText);
            theCatalog.forEach(function processCatalogData(catalogData) {
                catalog.push(WinJS.Binding.as(catalogData));
            });
            return WinJS.Promise.wrap(catalog);
        }, function (err) {
            reporterror("Could not retrieve catalog", "Unfortunately, the server could not be contacted in order to retrieve catalog details.", err);
            return WinJS.Promise.wrap(null);
        });
    }

    function catalogDelete(product) {
        return WinJS.xhr({
            type: 'delete',
            url: baseAddress + "/catalog/" + encodeURIComponent(product.skuNumber)
        }).then(function (response) {
            if (response.status == 204) {
                var index = catalog.indexOf(product);
                if (index > -1) {
                    catalog.splice(index, 1);
                }
            }
            return WinJS.Promise.wrap(true);
        }, function (response) {
            return WinJS.Promise.wrap(false);
        });
    }

    function catalogSave(catalog) {
        if (catalog.__new) {
            return catalogSaveNew(catalog);
        }
        else {
            return catalogSaveEdits(catalog);
        }
    }

    function catalogSaveEdits(product) {
        var rawProduct = product;
        if (product.backingData) {
            rawProduct = product.backingData;
        }
        return WinJS.xhr({
            type: 'put',
            url: baseAddress + "/catalog/" + encodeURIComponent(product.skuNumber),
            headers: rest_headers,
            data: JSON.stringify(rawProduct),
        }).then(function (response) {
            return WinJS.Promise.wrap(product);
        }, function (response) {
            return WinJS.Promise.wrap(null);
        });
    }

    function catalogSaveNew(product) {
        var rawProduct = product;
        if (product.backingData) {
            rawProduct = product.backingData;
        }
        return WinJS.xhr({
            type: 'post',
            url: baseAddress + "/catalog",
            headers: rest_headers,
            data: JSON.stringify(rawProduct),
        }).then(function (response) {
            if (response.status == 201) {
                catalog.push(product);
            }
            return WinJS.Promise.wrap(product);
        }, function (response) {
            if (response.status == 409) { // already exists (conflict)
                return catalogSaveEdits(product);
            }
            else {
                return WinJS.Promise.wrap(null);
            }
        });
    }


    function catalogCreate() {
        var newCatalog = WinJS.Binding.as({
            skuNumber: '',
            description: '',
            unit: '',
            unitPrice: ''
        });
        newCatalog.__new = true;
        return newCatalog;
    }

    function dealersGet() {

        return WinJS.xhr({ url: baseAddress + "/dealers?unique=" + Date.now(), headers: rest_headers }).then(function (response) {
            if (response.status == 0) {
                reporterror("Could not retrieve dealers", "Unfortunately, the server could not be contacted in order to retrieve dealer details.", "");
                return null;
            }
            Data.dealers.splice(0, Data.dealers.length);
            var theDealers = JSON.parse(response.responseText);
            theDealers.forEach(function processDealerData(dealerData) {
                dealers.push(WinJS.Binding.as(dealerData));
            });
            return WinJS.Promise.wrap(dealers);
        }, function (err) {
            reporterror("Could not retrieve dealers", "Unfortunately, the server could not be contacted in order to retrieve dealer details.", err);
            return WinJS.Promise.wrap(null);
        });
    }

    function dealerDelete(dealer) {
        return WinJS.xhr({
            type: 'delete',
            url: baseAddress + "/dealers/" + encodeURIComponent(dealer.name)
        }).then(function (response) {
            if (response.status == 204) {
                var index = dealers.indexOf(dealer);
                if (index > -1) {
                    dealers.splice(index, 1);
                }
            }
            return WinJS.Promise.wrap(true);
        }, function (response) {
            return WinJS.Promise.wrap(false);
        });
    }

    function dealerSave(dealer) {
        if (dealer.__new) {
            return dealerSaveNew(dealer);
        }
        else {
            return dealerSaveEdits(dealer);
        }
    }

    function dealerSaveEdits(dealer) {
        var rawDealer = dealer;
        if (dealer.backingData) {
            rawDealer = dealer.backingData;
        }
        return WinJS.xhr({
            type: 'put',
            url: baseAddress + "/dealers/" + encodeURIComponent(dealer.name),
            headers: rest_headers,
            data: JSON.stringify(rawDealer),
        }).then(function (response) {
            return WinJS.Promise.wrap(dealer);
        }, function (response) {
            return WinJS.Promise.wrap(null);
        });
    }

    function dealerSaveNew(dealer) {
        var rawDealer = dealer;
        if (dealer.backingData) {
            rawDealer = dealer.backingData;
        }
        return WinJS.xhr({
            type: 'post',
            url: baseAddress + "/dealers",
            headers: rest_headers,
            data: JSON.stringify(rawDealer),
        }).then(function (response) {
            if (response.status == 201) {
                dealers.push(dealer);
            }
            return WinJS.Promise.wrap(dealer);
        }, function (response) {
            return WinJS.Promise.wrap(null);
        });
    }

    function dealerCreate() {
        var newDealer = WinJS.Binding.as({
            name: '',
            contact: '',
            address: '',
            email: '',
            phone: ''
        });
        newDealer.__new = true;
        return newDealer;
    }

})();




================================================
FILE: src/Clients/Web/js/date.js
================================================
/**
 * Version: 1.0 Alpha-1 
 * Build Date: 13-Nov-2007
 * Copyright (c) 2006-2007, Coolite Inc. (http://www.coolite.com/). All rights reserved.
 * License: Licensed under The MIT License. See license.txt and http://www.datejs.com/license/. 
 * Website: http://www.datejs.com/ or http://www.coolite.com/datejs/
 */
Date.CultureInfo={name:"en-US",englishName:"English (United States)",nativeName:"English (United States)",dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],abbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],shortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],firstLetterDayNames:["S","M","T","W","T","F","S"],monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],abbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],amDesignator:"AM",pmDesignator:"PM",firstDayOfWeek:0,twoDigitYearMax:2029,dateElementOrder:"mdy",formatPatterns:{shortDate:"M/d/yyyy",longDate:"dddd, MMMM dd, yyyy",shortTime:"h:mm tt",longTime:"h:mm:ss tt",fullDateTime:"dddd, MMMM dd, yyyy h:mm:ss tt",sortableDateTime:"yyyy-MM-ddTHH:mm:ss",universalSortableDateTime:"yyyy-MM-dd HH:mm:ssZ",rfc1123:"ddd, dd MMM yyyy HH:mm:ss GMT",monthDay:"MMMM dd",yearMonth:"MMMM, yyyy"},regexPatterns:{jan:/^jan(uary)?/i,feb:/^feb(ruary)?/i,mar:/^mar(ch)?/i,apr:/^apr(il)?/i,may:/^may/i,jun:/^jun(e)?/i,jul:/^jul(y)?/i,aug:/^aug(ust)?/i,sep:/^sep(t(ember)?)?/i,oct:/^oct(ober)?/i,nov:/^nov(ember)?/i,dec:/^dec(ember)?/i,sun:/^su(n(day)?)?/i,mon:/^mo(n(day)?)?/i,tue:/^tu(e(s(day)?)?)?/i,wed:/^we(d(nesday)?)?/i,thu:/^th(u(r(s(day)?)?)?)?/i,fri:/^fr(i(day)?)?/i,sat:/^sa(t(urday)?)?/i,future:/^next/i,past:/^last|past|prev(ious)?/i,add:/^(\+|after|from)/i,subtract:/^(\-|before|ago)/i,yesterday:/^yesterday/i,today:/^t(oday)?/i,tomorrow:/^tomorrow/i,now:/^n(ow)?/i,millisecond:/^ms|milli(second)?s?/i,second:/^sec(ond)?s?/i,minute:/^min(ute)?s?/i,hour:/^h(ou)?rs?/i,week:/^w(ee)?k/i,month:/^m(o(nth)?s?)?/i,day:/^d(ays?)?/i,year:/^y((ea)?rs?)?/i,shortMeridian:/^(a|p)/i,longMeridian:/^(a\.?m?\.?|p\.?m?\.?)/i,timezone:/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt)/i,ordinalSuffix:/^\s*(st|nd|rd|th)/i,timeContext:/^\s*(\:|a|p)/i},abbreviatedTimeZoneStandard:{GMT:"-000",EST:"-0400",CST:"-0500",MST:"-0600",PST:"-0700"},abbreviatedTimeZoneDST:{GMT:"-000",EDT:"-0500",CDT:"-0600",MDT:"-0700",PDT:"-0800"}};
Date.getMonthNumberFromName=function(name){var n=Date.CultureInfo.monthNames,m=Date.CultureInfo.abbreviatedMonthNames,s=name.toLowerCase();for(var i=0;i<n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){return i;}}
return-1;};Date.getDayNumberFromName=function(name){var n=Date.CultureInfo.dayNames,m=Date.CultureInfo.abbreviatedDayNames,o=Date.CultureInfo.shortestDayNames,s=name.toLowerCase();for(var i=0;i<n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){return i;}}
return-1;};Date.isLeapYear=function(year){return(((year%4===0)&&(year%100!==0))||(year%400===0));};Date.getDaysInMonth=function(year,month){return[31,(Date.isLeapYear(year)?29:28),31,30,31,30,31,31,30,31,30,31][month];};Date.getTimezoneOffset=function(s,dst){return(dst||false)?Date.CultureInfo.abbreviatedTimeZoneDST[s.toUpperCase()]:Date.CultureInfo.abbreviatedTimeZoneStandard[s.toUpperCase()];};Date.getTimezoneAbbreviation=function(offset,dst){var n=(dst||false)?Date.CultureInfo.abbreviatedTimeZoneDST:Date.CultureInfo.abbreviatedTimeZoneStandard,p;for(p in n){if(n[p]===offset){return p;}}
return null;};Date.prototype.clone=function(){return new Date(this.getTime());};Date.prototype.compareTo=function(date){if(isNaN(this)){throw new Error(this);}
if(date instanceof Date&&!isNaN(date)){return(this>date)?1:(this<date)?-1:0;}else{throw new TypeError(date);}};Date.prototype.equals=function(date){return(this.compareTo(date)===0);};Date.prototype.between=function(start,end){var t=this.getTime();return t>=start.getTime()&&t<=end.getTime();};Date.prototype.addMilliseconds=function(value){this.setMilliseconds(this.getMilliseconds()+value);return this;};Date.prototype.addSeconds=function(value){return this.addMilliseconds(value*1000);};Date.prototype.addMinutes=function(value){return this.addMilliseconds(value*60000);};Date.prototype.addHours=function(value){return this.addMilliseconds(value*3600000);};Date.prototype.addDays=function(value){return this.addMilliseconds(value*86400000);};Date.prototype.addWeeks=function(value){return this.addMilliseconds(value*604800000);};Date.prototype.addMonths=function(value){var n=this.getDate();this.setDate(1);this.setMonth(this.getMonth()+value);this.setDate(Math.min(n,this.getDaysInMonth()));return this;};Date.prototype.addYears=function(value){return this.addMonths(value*12);};Date.prototype.add=function(config){if(typeof config=="number"){this._orient=config;return this;}
var x=config;if(x.millisecond||x.milliseconds){this.addMilliseconds(x.millisecond||x.milliseconds);}
if(x.second||x.seconds){this.addSeconds(x.second||x.seconds);}
if(x.minute||x.minutes){this.addMinutes(x.minute||x.minutes);}
if(x.hour||x.hours){this.addHours(x.hour||x.hours);}
if(x.month||x.months){this.addMonths(x.month||x.months);}
if(x.year||x.years){this.addYears(x.year||x.years);}
if(x.day||x.days){this.addDays(x.day||x.days);}
return this;};Date._validate=function(value,min,max,name){if(typeof value!="number"){throw new TypeError(value+" is not a Number.");}else if(value<min||value>max){throw new RangeError(value+" is not a valid value for "+name+".");}
return true;};Date.validateMillisecond=function(n){return Date._validate(n,0,999,"milliseconds");};Date.validateSecond=function(n){return Date._validate(n,0,59,"seconds");};Date.validateMinute=function(n){return Date._validate(n,0,59,"minutes");};Date.validateHour=function(n){return Date._validate(n,0,23,"hours");};Date.validateDay=function(n,year,month){return Date._validate(n,1,Date.getDaysInMonth(year,month),"days");};Date.validateMonth=function(n){return Date._validate(n,0,11,"months");};Date.validateYear=function(n){return Date._validate(n,1,9999,"seconds");};Date.prototype.set=function(config){var x=config;if(!x.millisecond&&x.millisecond!==0){x.millisecond=-1;}
if(!x.second&&x.second!==0){x.second=-1;}
if(!x.minute&&x.minute!==0){x.minute=-1;}
if(!x.hour&&x.hour!==0){x.hour=-1;}
if(!x.day&&x.day!==0){x.day=-1;}
if(!x.month&&x.month!==0){x.month=-1;}
if(!x.year&&x.year!==0){x.year=-1;}
if(x.millisecond!=-1&&Date.validateMillisecond(x.millisecond)){this.addMilliseconds(x.millisecond-this.getMilliseconds());}
if(x.second!=-1&&Date.validateSecond(x.second)){this.addSeconds(x.second-this.getSeconds());}
if(x.minute!=-1&&Date.validateMinute(x.minute)){this.addMinutes(x.minute-this.getMinutes());}
if(x.hour!=-1&&Date.validateHour(x.hour)){this.addHours(x.hour-this.getHours());}
if(x.month!==-1&&Date.validateMonth(x.month)){this.addMonths(x.month-this.getMonth());}
if(x.year!=-1&&Date.validateYear(x.year)){this.addYears(x.year-this.getFullYear());}
if(x.day!=-1&&Date.validateDay(x.day,this.getFullYear(),this.getMonth())){this.addDays(x.day-this.getDate());}
if(x.timezone){this.setTimezone(x.timezone);}
if(x.timezoneOffset){this.setTimezoneOffset(x.timezoneOffset);}
return this;};Date.prototype.clearTime=function(){this.setHours(0);this.setMinutes(0);this.setSeconds(0);this.setMilliseconds(0);return this;};Date.prototype.isLeapYear=function(){var y=this.getFullYear();return(((y%4===0)&&(y%100!==0))||(y%400===0));};Date.prototype.isWeekday=function(){return!(this.is().sat()||this.is().sun());};Date.prototype.getDaysInMonth=function(){return Date.getDaysInMonth(this.getFullYear(),this.getMonth());};Date.prototype.moveToFirstDayOfMonth=function(){return this.set({day:1});};Date.prototype.moveToLastDayOfMonth=function(){return this.set({day:this.getDaysInMonth()});};Date.prototype.moveToDayOfWeek=function(day,orient){var diff=(day-this.getDay()+7*(orient||+1))%7;return this.addDays((diff===0)?diff+=7*(orient||+1):diff);};Date.prototype.moveToMonth=function(month,orient){var diff=(month-this.getMonth()+12*(orient||+1))%12;return this.addMonths((diff===0)?diff+=12*(orient||+1):diff);};Date.prototype.getDayOfYear=function(){return Math.floor((this-new Date(this.getFullYear(),0,1))/86400000);};Date.prototype.getWeekOfYear=function(firstDayOfWeek){var y=this.getFullYear(),m=this.getMonth(),d=this.getDate();var dow=firstDayOfWeek||Date.CultureInfo.firstDayOfWeek;var offset=7+1-new Date(y,0,1).getDay();if(offset==8){offset=1;}
var daynum=((Date.UTC(y,m,d,0,0,0)-Date.UTC(y,0,1,0,0,0))/86400000)+1;var w=Math.floor((daynum-offset+7)/7);if(w===dow){y--;var prevOffset=7+1-new Date(y,0,1).getDay();if(prevOffset==2||prevOffset==8){w=53;}else{w=52;}}
return w;};Date.prototype.isDST=function(){console.log('isDST');return this.toString().match(/(E|C|M|P)(S|D)T/)[2]=="D";};Date.prototype.getTimezone=function(){return Date.getTimezoneAbbreviation(this.getUTCOffset,this.isDST());};Date.prototype.setTimezoneOffset=function(s){var here=this.getTimezoneOffset(),there=Number(s)*-6/10;this.addMinutes(there-here);return this;};Date.prototype.setTimezone=function(s){return this.setTimezoneOffset(Date.getTimezoneOffset(s));};Date.prototype.getUTCOffset=function(){var n=this.getTimezoneOffset()*-10/6,r;if(n<0){r=(n-10000).toString();return r[0]+r.substr(2);}else{r=(n+10000).toString();return"+"+r.substr(1);}};Date.prototype.getDayName=function(abbrev){return abbrev?Date.CultureInfo.abbreviatedDayNames[this.getDay()]:Date.CultureInfo.dayNames[this.getDay()];};Date.prototype.getMonthName=function(abbrev){return abbrev?Date.CultureInfo.abbreviatedMonthNames[this.getMonth()]:Date.CultureInfo.monthNames[this.getMonth()];};Date.prototype._toString=Date.prototype.toString;Date.prototype.toString=function(format){var self=this;var p=function p(s){return(s.toString().length==1)?"0"+s:s;};return format?format.replace(/dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?/g,function(format){switch(format){case"hh":return p(self.getHours()<13?self.getHours():(self.getHours()-12));case"h":return self.getHours()<13?self.getHours():(self.getHours()-12);case"HH":return p(self.getHours());case"H":return self.getHours();case"mm":return p(self.getMinutes());case"m":return self.getMinutes();case"ss":return p(self.getSeconds());case"s":return self.getSeconds();case"yyyy":return self.getFullYear();case"yy":return self.getFullYear().toString().substring(2,4);case"dddd":return self.getDayName();case"ddd":return self.getDayName(true);case"dd":return p(self.getDate());case"d":return self.getDate().toString();case"MMMM":return self.getMonthName();case"MMM":return self.getMonthName(true);case"MM":return p((self.getMonth()+1));case"M":return self.getMonth()+1;case"t":return self.getHours()<12?Date.CultureInfo.amDesignator.substring(0,1):Date.CultureInfo.pmDesignator.substring(0,1);case"tt":return self.getHours()<12?Date.CultureInfo.amDesignator:Date.CultureInfo.pmDesignator;case"zzz":case"zz":case"z":return"";}}):this._toString();};
Date.now=function(){return new Date();};Date.today=function(){return Date.now().clearTime();};Date.prototype._orient=+1;Date.prototype.next=function(){this._orient=+1;return this;};Date.prototype.last=Date.prototype.prev=Date.prototype.previous=function(){this._orient=-1;return this;};Date.prototype._is=false;Date.prototype.is=function(){this._is=true;return this;};Number.prototype._dateElement="day";Number.prototype.fromNow=function(){var c={};c[this._dateElement]=this;return Date.now().add(c);};Number.prototype.ago=function(){var c={};c[this._dateElement]=this*-1;return Date.now().add(c);};(function(){var $D=Date.prototype,$N=Number.prototype;var dx=("sunday monday tuesday wednesday thursday friday saturday").split(/\s/),mx=("january february march april may june july august september october november december").split(/\s/),px=("Millisecond Second Minute Hour Day Week Month Year").split(/\s/),de;var df=function(n){return function(){if(this._is){this._is=false;return this.getDay()==n;}
return this.moveToDayOfWeek(n,this._orient);};};for(var i=0;i<dx.length;i++){$D[dx[i]]=$D[dx[i].substring(0,3)]=df(i);}
var mf=function(n){return function(){if(this._is){this._is=false;return this.getMonth()===n;}
return this.moveToMonth(n,this._orient);};};for(var j=0;j<mx.length;j++){$D[mx[j]]=$D[mx[j].substring(0,3)]=mf(j);}
var ef=function(j){return function(){if(j.substring(j.length-1)!="s"){j+="s";}
return this["add"+j](this._orient);};};var nf=function(n){return function(){this._dateElement=n;return this;};};for(var k=0;k<px.length;k++){de=px[k].toLowerCase();$D[de]=$D[de+"s"]=ef(px[k]);$N[de]=$N[de+"s"]=nf(de);}}());Date.prototype.toJSONString=function(){return this.toString("yyyy-MM-ddThh:mm:ssZ");};Date.prototype.toShortDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortDatePattern);};Date.prototype.toLongDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.longDatePattern);};Date.prototype.toShortTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortTimePattern);};Date.prototype.toLongTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.longTimePattern);};Date.prototype.getOrdinal=function(){switch(this.getDate()){case 1:case 21:case 31:return"st";case 2:case 22:return"nd";case 3:case 23:return"rd";default:return"th";}};
(function(){Date.Parsing={Exception:function(s){this.message="Parse error at '"+s.substring(0,10)+" ...'";}};var $P=Date.Parsing;var _=$P.Operators={rtoken:function(r){return function(s){var mx=s.match(r);if(mx){return([mx[0],s.substring(mx[0].length)]);}else{throw new $P.Exception(s);}};},token:function(s){return function(s){return _.rtoken(new RegExp("^\s*"+s+"\s*"))(s);};},stoken:function(s){return _.rtoken(new RegExp("^"+s));},until:function(p){return function(s){var qx=[],rx=null;while(s.length){try{rx=p.call(this,s);}catch(e){qx.push(rx[0]);s=rx[1];continue;}
break;}
return[qx,s];};},many:function(p){return function(s){var rx=[],r=null;while(s.length){try{r=p.call(this,s);}catch(e){return[rx,s];}
rx.push(r[0]);s=r[1];}
return[rx,s];};},optional:function(p){return function(s){var r=null;try{r=p.call(this,s);}catch(e){return[null,s];}
return[r[0],r[1]];};},not:function(p){return function(s){try{p.call(this,s);}catch(e){return[null,s];}
throw new $P.Exception(s);};},ignore:function(p){return p?function(s){var r=null;r=p.call(this,s);return[null,r[1]];}:null;},product:function(){var px=arguments[0],qx=Array.prototype.slice.call(arguments,1),rx=[];for(var i=0;i<px.length;i++){rx.push(_.each(px[i],qx));}
return rx;},cache:function(rule){var cache={},r=null;return function(s){try{r=cache[s]=(cache[s]||rule.call(this,s));}catch(e){r=cache[s]=e;}
if(r instanceof $P.Exception){throw r;}else{return r;}};},any:function(){var px=arguments;return function(s){var r=null;for(var i=0;i<px.length;i++){if(px[i]==null){continue;}
try{r=(px[i].call(this,s));}catch(e){r=null;}
if(r){return r;}}
throw new $P.Exception(s);};},each:function(){var px=arguments;return function(s){var rx=[],r=null;for(var i=0;i<px.length;i++){if(px[i]==null){continue;}
try{r=(px[i].call(this,s));}catch(e){throw new $P.Exception(s);}
rx.push(r[0]);s=r[1];}
return[rx,s];};},all:function(){var px=arguments,_=_;return _.each(_.optional(px));},sequence:function(px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;if(px.length==1){return px[0];}
return function(s){var r=null,q=null;var rx=[];for(var i=0;i<px.length;i++){try{r=px[i].call(this,s);}catch(e){break;}
rx.push(r[0]);try{q=d.call(this,r[1]);}catch(ex){q=null;break;}
s=q[1];}
if(!r){throw new $P.Exception(s);}
if(q){throw new $P.Exception(q[1]);}
if(c){try{r=c.call(this,r[1]);}catch(ey){throw new $P.Exception(r[1]);}}
return[rx,(r?r[1]:s)];};},between:function(d1,p,d2){d2=d2||d1;var _fn=_.each(_.ignore(d1),p,_.ignore(d2));return function(s){var rx=_fn.call(this,s);return[[rx[0][0],r[0][2]],rx[1]];};},list:function(p,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return(p instanceof Array?_.each(_.product(p.slice(0,-1),_.ignore(d)),p.slice(-1),_.ignore(c)):_.each(_.many(_.each(p,_.ignore(d))),px,_.ignore(c)));},set:function(px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return function(s){var r=null,p=null,q=null,rx=null,best=[[],s],last=false;for(var i=0;i<px.length;i++){q=null;p=null;r=null;last=(px.length==1);try{r=px[i].call(this,s);}catch(e){continue;}
rx=[[r[0]],r[1]];if(r[1].length>0&&!last){try{q=d.call(this,r[1]);}catch(ex){last=true;}}else{last=true;}
if(!last&&q[1].length===0){last=true;}
if(!last){var qx=[];for(var j=0;j<px.length;j++){if(i!=j){qx.push(px[j]);}}
p=_.set(qx,d).call(this,q[1]);if(p[0].length>0){rx[0]=rx[0].concat(p[0]);rx[1]=p[1];}}
if(rx[1].length<best[1].length){best=rx;}
if(best[1].length===0){break;}}
if(best[0].length===0){return best;}
if(c){try{q=c.call(this,best[1]);}catch(ey){throw new $P.Exception(best[1]);}
best[1]=q[1];}
return best;};},forward:function(gr,fname){return function(s){return gr[fname].call(this,s);};},replace:function(rule,repl){return function(s){var r=rule.call(this,s);return[repl,r[1]];};},process:function(rule,fn){return function(s){var r=rule.call(this,s);return[fn.call(this,r[0]),r[1]];};},min:function(min,rule){return function(s){var rx=rule.call(this,s);if(rx[0].length<min){throw new $P.Exception(s);}
return rx;};}};var _generator=function(op){return function(){var args=null,rx=[];if(arguments.length>1){args=Array.prototype.slice.call(arguments);}else if(arguments[0]instanceof Array){args=arguments[0];}
if(args){for(var i=0,px=args.shift();i<px.length;i++){args.unshift(px[i]);rx.push(op.apply(null,args));args.shift();return rx;}}else{return op.apply(null,arguments);}};};var gx="optional not ignore cache".split(/\s/);for(var i=0;i<gx.length;i++){_[gx[i]]=_generator(_[gx[i]]);}
var _vector=function(op){return function(){if(arguments[0]instanceof Array){return op.apply(null,arguments[0]);}else{return op.apply(null,arguments);}};};var vx="each any all".split(/\s/);for(var j=0;j<vx.length;j++){_[vx[j]]=_vector(_[vx[j]]);}}());(function(){var flattenAndCompact=function(ax){var rx=[];for(var i=0;i<ax.length;i++){if(ax[i]instanceof Array){rx=rx.concat(flattenAndCompact(ax[i]));}else{if(ax[i]){rx.push(ax[i]);}}}
return rx;};Date.Grammar={};Date.Translator={hour:function(s){return function(){this.hour=Number(s);};},minute:function(s){return function(){this.minute=Number(s);};},second:function(s){return function(){this.second=Number(s);};},meridian:function(s){return function(){this.meridian=s.slice(0,1).toLowerCase();};},timezone:function(s){return function(){var n=s.replace(/[^\d\+\-]/g,"");if(n.length){this.timezoneOffset=Number(n);}else{this.timezone=s.toLowerCase();}};},day:function(x){var s=x[0];return function(){this.day=Number(s.match(/\d+/)[0]);};},month:function(s){return function(){this.month=((s.length==3)?Date.getMonthNumberFromName(s):(Number(s)-1));};},year:function(s){return function(){var n=Number(s);this.year=((s.length>2)?n:(n+(((n+2000)<Date.CultureInfo.twoDigitYearMax)?2000:1900)));};},rday:function(s){return function(){switch(s){case"yesterday":this.days=-1;break;case"tomorrow":this.days=1;break;case"today":this.days=0;break;case"now":this.days=0;this.now=true;break;}};},finishExact:function(x){x=(x instanceof Array)?x:[x];var now=new Date();this.year=now.getFullYear();this.month=now.getMonth();this.day=1;this.hour=0;this.minute=0;this.second=0;for(var i=0;i<x.length;i++){if(x[i]){x[i].call(this);}}
this.hour=(this.meridian=="p"&&this.hour<13)?this.hour+12:this.hour;if(this.day>Date.getDaysInMonth(this.year,this.month)){throw new RangeError(this.day+" is not a valid value for days.");}
var r=new Date(this.year,this.month,this.day,this.hour,this.minute,this.second);if(this.timezone){r.set({timezone:this.timezone});}else if(this.timezoneOffset){r.set({timezoneOffset:this.timezoneOffset});}
return r;},finish:function(x){x=(x instanceof Array)?flattenAndCompact(x):[x];if(x.length===0){return null;}
for(var i=0;i<x.length;i++){if(typeof x[i]=="function"){x[i].call(this);}}
if(this.now){return new Date();}
var today=Date.today();var method=null;var expression=!!(this.days!=null||this.orient||this.operator);if(expression){var gap,mod,orient;orient=((this.orient=="past"||this.operator=="subtract")?-1:1);if(this.weekday){this.unit="day";gap=(Date.getDayNumberFromName(this.weekday)-today.getDay());mod=7;this.days=gap?((gap+(orient*mod))%mod):(orient*mod);}
if(this.month){this.unit="month";gap=(this.month-today.getMonth());mod=12;this.months=gap?((gap+(orient*mod))%mod):(orient*mod);this.month=null;}
if(!this.unit){this.unit="day";}
if(this[this.unit+"s"]==null||this.operator!=null){if(!this.value){this.value=1;}
if(this.unit=="week"){this.unit="day";this.value=this.value*7;}
this[this.unit+"s"]=this.value*orient;}
return today.add(this);}else{if(this.meridian&&this.hour){this.hour=(this.hour<13&&this.meridian=="p")?this.hour+12:this.hour;}
if(this.weekday&&!this.day){this.day=(today.addDays((Date.getDayNumberFromName(this.weekday)-today.getDay()))).getDate();}
if(this.month&&!this.day){this.day=1;}
return today.set(this);}}};var _=Date.Parsing.Operators,g=Date.Grammar,t=Date.Translator,_fn;g.datePartDelimiter=_.rtoken(/^([\s\-\.\,\/\x27]+)/);g.timePartDelimiter=_.stoken(":");g.whiteSpace=_.rtoken(/^\s*/);g.generalDelimiter=_.rtoken(/^(([\s\,]|at|on)+)/);var _C={};g.ctoken=function(keys){var fn=_C[keys];if(!fn){var c=Date.CultureInfo.regexPatterns;var kx=keys.split(/\s+/),px=[];for(var i=0;i<kx.length;i++){px.push(_.replace(_.rtoken(c[kx[i]]),kx[i]));}
fn=_C[keys]=_.any.apply(null,px);}
return fn;};g.ctoken2=function(key){return _.rtoken(Date.CultureInfo.regexPatterns[key]);};g.h=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2]|[1-9])/),t.hour));g.hh=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2])/),t.hour));g.H=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3]|[0-9])/),t.hour));g.HH=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3])/),t.hour));g.m=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.minute));g.mm=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.minute));g.s=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.second));g.ss=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.second));g.hms=_.cache(_.sequence([g.H,g.mm,g.ss],g.timePartDelimiter));g.t=_.cache(_.process(g.ctoken2("shortMeridian"),t.meridian));g.tt=_.cache(_.process(g.ctoken2("longMeridian"),t.meridian));g.z=_.cache(_.process(_.rtoken(/^(\+|\-)?\s*\d\d\d\d?/),t.timezone));g.zz=_.cache(_.process(_.rtoken(/^(\+|\-)\s*\d\d\d\d/),t.timezone));g.zzz=_.cache(_.process(g.ctoken2("timezone"),t.timezone));g.timeSuffix=_.each(_.ignore(g.whiteSpace),_.set([g.tt,g.zzz]));g.time=_.each(_.optional(_.ignore(_.stoken("T"))),g.hms,g.timeSuffix);g.d=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1]|\d)/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));g.dd=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1])/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));g.ddd=g.dddd=_.cache(_.process(g.ctoken("sun mon tue wed thu fri sat"),function(s){return function(){this.weekday=s;};}));g.M=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d|\d)/),t.month));g.MM=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d)/),t.month));g.MMM=g.MMMM=_.cache(_.process(g.ctoken("jan feb mar apr may jun jul aug sep oct nov dec"),t.month));g.y=_.cache(_.process(_.rtoken(/^(\d\d?)/),t.year));g.yy=_.cache(_.process(_.rtoken(/^(\d\d)/),t.year));g.yyy=_.cache(_.process(_.rtoken(/^(\d\d?\d?\d?)/),t.year));g.yyyy=_.cache(_.process(_.rtoken(/^(\d\d\d\d)/),t.year));_fn=function(){return _.each(_.any.apply(null,arguments),_.not(g.ctoken2("timeContext")));};g.day=_fn(g.d,g.dd);g.month=_fn(g.M,g.MMM);g.year=_fn(g.yyyy,g.yy);g.orientation=_.process(g.ctoken("past future"),function(s){return function(){this.orient=s;};});g.operator=_.process(g.ctoken("add subtract"),function(s){return function(){this.operator=s;};});g.rday=_.process(g.ctoken("yesterday tomorrow today now"),t.rday);g.unit=_.process(g.ctoken("minute hour day week month year"),function(s){return function(){this.unit=s;};});g.value=_.process(_.rtoken(/^\d\d?(st|nd|rd|th)?/),function(s){return function(){this.value=s.replace(/\D/g,"");};});g.expression=_.set([g.rday,g.operator,g.value,g.unit,g.orientation,g.ddd,g.MMM]);_fn=function(){return _.set(arguments,g.datePartDelimiter);};g.mdy=_fn(g.ddd,g.month,g.day,g.year);g.ymd=_fn(g.ddd,g.year,g.month,g.day);g.dmy=_fn(g.ddd,g.day,g.month,g.year);g.date=function(s){return((g[Date.CultureInfo.dateElementOrder]||g.mdy).call(this,s));};g.format=_.process(_.many(_.any(_.process(_.rtoken(/^(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/),function(fmt){if(g[fmt]){return g[fmt];}else{throw Date.Parsing.Exception(fmt);}}),_.process(_.rtoken(/^[^dMyhHmstz]+/),function(s){return _.ignore(_.stoken(s));}))),function(rules){return _.process(_.each.apply(null,rules),t.finishExact);});var _F={};var _get=function(f){return _F[f]=(_F[f]||g.format(f)[0]);};g.formats=function(fx){if(fx instanceof Array){var rx=[];for(var i=0;i<fx.length;i++){rx.push(_get(fx[i]));}
return _.any.apply(null,rx);}else{return _get(fx);}};g._formats=g.formats(["yyyy-MM-ddTHH:mm:ss","ddd, MMM dd, yyyy H:mm:ss tt","ddd MMM d yyyy HH:mm:ss zzz","d"]);g._start=_.process(_.set([g.date,g.time,g.expression],g.generalDelimiter,g.whiteSpace),t.finish);g.start=function(s){try{var r=g._formats.call({},s);if(r[1].length===0){return r;}}catch(e){}
return g._start.call({},s);};}());Date._parse=Date.parse;Date.parse=function(s){var r=null;if(!s){return null;}
try{r=Date.Grammar.start.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};Date.getParseFunction=function(fx){var fn=Date.Grammar.formats(fx);return function(s){var r=null;try{r=fn.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};};Date.parseExact=function(s,fx){return Date.getParseFunction(fx)(s);};



================================================
FILE: src/Clients/Web/js/default.js
================================================
﻿// For an introduction to the Grid template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkID=232446
(function () {
    "use strict";

    var activation = null;
    var app = WinJS.Application;
    var nav = WinJS.Navigation;
    var sched = WinJS.Utilities.Scheduler;
    var ui = WinJS.UI;

    app.addEventListener("activated", function (args) {
        try {
            activation = Windows.ApplicationModel.Activation;
            if (args.detail.kind === activation.ActivationKind.launch) {
                if (args.detail.previousExecutionState !== activation.ApplicationExecutionState.terminated) {
                    // TODO: This application has been newly launched. Initialize
                    // your application here.
                } else {
                    // TODO: This application has been reactivated from suspension.
                    // Restore application state here.
                }
            }
        }
        catch (e) { }
        showProgress("Starting...");
        nav.history = app.sessionState.history || {};
        nav.history.current.initialPlaceholder = true;

        // Optimize the load of the application and while the splash screen is shown, execute high priority scheduled work.
        ui.disableAnimations();
        var p = ui.processAll().then(function () {
            Controls.EditTools.cacheControlTemplate();
            var navigationCommands = document.querySelectorAll('.navigationButton');
            for (var n = 0; n < navigationCommands.length; n++) {
                var navigationCommand = navigationCommands[n];
                navigationCommand.addEventListener('click', app.navbarInvoked);
            }
            hideProgress();
            return nav.navigate(nav.location || Application.navigator.home, nav.state);
        }).then(function () {
            return sched.requestDrain(sched.Priority.aboveNormal + 1);
        }).then(function () {
            ui.enableAnimations();
        });

        args.setPromise(p);
    });

    app.navbarInvoked = function (ev) {
        var navbarCommand = ev.currentTarget.winControl;
        if (navbarCommand.page == "main") {
            nav.back(nav.history.backStack.length);
        }
        else {
            var location = "pages/" + navbarCommand.page + "/" + navbarCommand.page + ".html";
            nav.navigate(location);
        }
        var trigger = document.querySelector(".nav-trigger");
        trigger.checked = false;
    }

    app.oncheckpoint = function (args) {
        // TODO: This application is about to be suspended. Save any state
        // that needs to persist across suspensions here. If you need to 
        // complete an asynchronous operation before your application is 
        // suspended, call args.setPromise().
        app.sessionState.history = nav.history;
    };

    app.start();
})();

logmessage = function (msg) {
    console.log(msg);
}

var _progressNeeded = false;

function showProgress(message) {
    _progressNeeded = true;
    WinJS.Promise.timeout(500).then(function () {
        if (!_progressNeeded) {
            return;
        }
        var progress = document.querySelector("#progressContainer");
        if (progress) {
            progress.style.display = "flex";
            var underlay = document.querySelector(".progressUnderlay");
            if (underlay) {
                underlay.style.display = "";
                WinJS.Promise.timeout(200).then(function () {
                    underlay.style.opacity = "0.45";
                });
            }

            var messageDiv = document.querySelector("#progressMessage");
            if (messageDiv) {
                messageDiv.textContent = message;
            }
        }
    });
}

function hideProgress() {
    _progressNeeded = false;
    var progress = document.querySelector("#progressContainer");
    if (progress) {
        progress.style.display = "none";
        var underlay = document.querySelector(".progressUnderlay");
        if (underlay) {
            underlay.style.display = "none";
            WinJS.Promise.timeout(200).then(function () {
                underlay.style.opacity = "0.0";
            });
        }
    }
}

function confirm(title, message, primary, secondary) {
    var contentDialogElement = document.querySelector("#confirmdialog");
    var contentDialog = contentDialogElement.firstElementChild.winControl;
    var messageElement = contentDialogElement.querySelector(".win-contentdialog-content");
    messageElement.textContent = message;
    messageElement.style.marginTop = "10px";
    contentDialog.title = title;
    contentDialog.primaryCommandText = primary;
    contentDialog.secondaryCommandText = secondary;

    WinJS.Promise.timeout(500).then(function () {
        contentDialogElement.querySelector(".win-contentdialog-secondarycommand").focus();
    });

    return contentDialog.show();
}

function reporterror(title, message, err) {
    var contentDialogElement = document.querySelector("#confirmdialog");
    var contentDialog = contentDialogElement.firstElementChild.winControl;
    var messageElement = contentDialogElement.querySelector(".win-contentdialog-content");
    messageElement.textContent = message;
    messageElement.style.marginTop = "10px";
    contentDialog.title = title;
    contentDialog.primaryCommandText = "OK";
    contentDialog.secondaryCommandText = undefined;

    WinJS.Promise.timeout(500).then(function () {
        contentDialogElement.querySelector(".win-contentdialog-secondarycommand").focus();
    });

    return contentDialog.show();
}

WinJS.Namespace.define("Binding.Mode", {
    twoway: WinJS.Binding.initializer(function (source, sourceProps, dest, destProps) {
        var destPath, event, sourcePath;
        WinJS.Binding.defaultBind(source, sourceProps, dest, destProps);
        switch (dest.nodeName) {
            case "INPUT":
                event = dest.type === "checkbox" ? "onclick" : "oninput";
                break;
            case "SELECT":
                event = "onchange";
        }
        if (event) {
            destPath = destProps.join(".");
            sourcePath = sourceProps.join(".");
            return dest[event] = function (event) {
                var d, property, s, sourceParent;
                d = WinJS.Utilities.getMember(destPath, dest);
                s = WinJS.Utilities.getMember(sourcePath, source);
                if (s !== d) {
                    if (sourceProps.length === 1) {
                        return source[sourcePath] = d;
                    } else {
                        property = sourceProps[sourceProps.length - 1];
                        sourceParent = sourceProps.slice(0, -1).join('.');
                        return WinJS.Utilities.getMember(sourceParent, source)[property] = d;
                    }
                }
            };
        }
    })
});


function popup(id, title, page, state) {
    var contentDialogElement = document.querySelector("#" + id);
    var contentDialog = contentDialogElement.firstElementChild.winControl;
    var messageElement = contentDialogElement.querySelector(".win-contentdialog-content");
    var popupContentPageControl = null;

    contentDialog.title = title;

    function cleanup(result) {
        if (popupContentPageControl && popupContentPageControl.unload) {
            popupContentPageControl.unload();
        }

        if (messageElement.childElementCount > 0) {
            var oldElement = messageElement.firstElementChild;
            // Cleanup and remove previous element 
            if (oldElement.winControl) {
                if (oldElement.winControl.unload) {
                    oldElement.winControl.unload();
                }
                oldElement.winControl.dispose();
            }
            oldElement.parentNode.removeChild(oldElement);
            oldElement.innerText = "";
        }

        return result;
    }

    return this._lastNavigationPromise = WinJS.Promise.as().then(function () {
        return WinJS.UI.Pages.render(page, messageElement, { popup: contentDialog, state: state });
    }).then(function (rendered) {
        popupContentPageControl = rendered;
        return contentDialog.show();
    }).then(cleanup, cleanup);

}

function addTextChangeEventHandler(element, handler) {
    /*
    onchange occurs only when you blur the textbox
    onkeyup & onkeypress doesn't always occur on text change
    onkeydown occurs on text change (but cannot track cut & paste with mouse click)
    onpaste & oncut occurs with keypress and even with the mouse right click.
    */

    element.onchange = handler;
    element.onkeyup = handler;
    element.onkeydown = handler;
    element.onpast = handler;
    element.oncut = handler;
}

function addAddressHandler(input, setDataItem) {
    try {
        var options = {
        };

        var autocomplete = new google.maps.places.Autocomplete(input, options);

        google.maps.event.addListener(autocomplete, 'place_changed', function () {
            var place = autocomplete.getPlace();
            if (place.geometry) {
                setDataItem(place);
            }
        });
    }
    catch (e) { }
}

function getPostCodeFromPlace(place) {
    var postcode = "";
    for (var i = 0; i < place.address_components.length; i++) {
        for (var j = 0; j < place.address_components[i].types.length; j++) {
            if (place.address_components[i].types[j] == "postal_code") {
                postcode = place.address_components[i].long_name;
                break;
            }
        }
    }
    return postcode;
}

function clone(obj) {
    return JSON.parse(JSON.stringify(obj));
};


================================================
FILE: src/Clients/Web/js/navigator.js
================================================
﻿(function () {
    "use strict";

    var nav = WinJS.Navigation;

    WinJS.Namespace.define("Application", {
        PageControlNavigator: WinJS.Class.define(
            // Define the constructor function for the PageControlNavigator.
            function PageControlNavigator(element, options) {
                this._element = element || document.createElement("div");
                this._element.appendChild(this._createPageElement());

                this.home = options.home;

                this._eventHandlerRemover = [];

                var that = this;
                function addRemovableEventListener(e, eventName, handler, capture) {
                    e.addEventListener(eventName, handler, capture);
                    that._eventHandlerRemover.push(function () {
                        e.removeEventListener(eventName, handler);
                    });
                };

                addRemovableEventListener(nav, 'navigating', this._navigating.bind(this), false);
                addRemovableEventListener(nav, 'navigated', this._navigated.bind(this), false);

                window.onresize = this._resized.bind(this);

                Application.navigator = this;
            }, {
                home: "",
                /// <field domElement="true" />
                _element: null,
                _lastNavigationPromise: WinJS.Promise.as(),
                _lastViewstate: 0,

                // This is the currently loaded Page object.
                pageControl: {
                    get: function () { return this.pageElement && this.pageElement.winControl; }
                },

                // This is the root element of the current page.
                pageElement: {
                    get: function () { return this._element.firstElementChild; }
                },

                // This function disposes the page navigator and its contents.
                dispose: function () {
                    if (this._disposed) {
                        return;
                    }

                    this._disposed = true;
                    WinJS.Utilities.disposeSubTree(this._element);
                    for (var i = 0; i < this._eventHandlerRemover.length; i++) {
                        this._eventHandlerRemover[i]();
                    }
                    this._eventHandlerRemover = null;
                },

                // Creates a container for a new page to be loaded into.
                _createPageElement: function () {
                    var element = document.createElement("div");
                    element.setAttribute("dir", window.getComputedStyle(this._element, null).direction);
                    element.style.position = "absolute";
                    element.style.visibility = "hidden";
                    element.style.width = "100%";
                    element.style.height = "100%";
                    return element;
                },

                // Retrieves a list of animation elements for the current page.
                // If the page does not define a list, animate the entire page.
                _getAnimationElements: function () {
                    if (this.pageControl && this.pageControl.getAnimationElements) {
                        return this.pageControl.getAnimationElements();
                    }
                    return this.pageElement;
                },

                _navigated: function () {
                    var homeButton = this.pageElement.querySelector(".page-header-home");
                    homeButton.addEventListener("click", function () {
                        nav.back(nav.history.backStack.length);
                    });
                    this.pageElement.style.visibility = "";
                    WinJS.UI.Animation.enterPage(this._getAnimationElements(), [{ top: "0px", left: "40px", rtlflip: true }]).done();
                },

                // Responds to navigation by adding new pages to the DOM. 
                _navigating: function (args) {
                    var newElement = this._createPageElement();
                    this._element.appendChild(newElement);

                    this._lastNavigationPromise.cancel();

                    var that = this;

                    function cleanup() {
                        if (that._element.childElementCount > 1) {
                            var oldElement = that._element.firstElementChild;
                            // Cleanup and remove previous element 
                            if (oldElement.winControl) {
                                if (oldElement.winControl.unload) {
                                    oldElement.winControl.unload();
                                }
                                oldElement.winControl.dispose();
                            }
                            oldElement.parentNode.removeChild(oldElement);
                            oldElement.innerText = "";
                        }
                    }

                    this._lastNavigationPromise = WinJS.Promise.as().then(function () {
                        return WinJS.UI.Pages.render(args.detail.location, newElement, args.detail.state);
                    }).then(cleanup, cleanup);

                    args.detail.setPromise(this._lastNavigationPromise);
                },

                // Responds to resize events and call the updateLayout function
                // on the currently loaded page.
                _resized: function (args) {
                    if (this.pageControl && this.pageControl.updateLayout) {
                        this.pageControl.updateLayout.call(this.pageControl, this.pageElement);
                    }
                },
            }
        )
    });
})();



================================================
FILE: src/Clients/Web/js/serverconfig.js
================================================
﻿// Release configuration
// Do not use the original (deleted that line), use the following one (OguzP)
var baseAddress = 'http://' + window.location.hostname + ':8080'


================================================
FILE: src/Clients/Web/pages/catalog/catalog.css
================================================
﻿.catalogDetail {
}



================================================
FILE: src/Clients/Web/pages/catalog/catalog.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>catalog</title>

    <link href="catalog.css" rel="stylesheet" />
    <script src="catalog.js"></script>
</head>
<body>
    <div class="catalog fragment">
        <header class="page-header" aria-label="Header content" role="banner">
            <button class="page-header-home">
                <img src="../../images/FabrikamIcon.png" />
            </button>
            <h2 class="titlearea win-type-ellipsis">
                <span class="pagetitle">Catalog</span>
            </h2>
        </header>
        <section class="page-section" aria-label="Main content" role="main">
            <!-- Simple template for the ListView instantiation  -->
            <div class="catalogItemTemplate" data-win-control="WinJS.Binding.Template" style="display: none">
                <div class="listItem catalogItem">
                    <div class="catalogItem-Detail">
                        <h3 data-win-bind="textContent: skuNumber"></h3>
                        <div class="list-item-entry-small" data-win-bind="textContent: description"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: unit"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: unitPrice"></div>
                    </div>
                </div>
            </div>

            <div class="edittools" data-win-control="Controls.EditTools" data-win-options="{  }"></div>

            <div id="listView"
                 class="itemListView catalogListView"
                 data-win-control="WinJS.UI.ListView"
                 data-win-options="{
                    itemDataSource: Data.catalog.dataSource,
                    itemTemplate: select('.catalogItemTemplate'),
                    selectionMode: 'single',
                    tapBehavior: 'directSelect',
                    swipeBehavior: 'select',
                    layout: { type: WinJS.UI.ListLayout }
                 }">
            </div>

            <div class="editDetail catalogDetail">
                <label class="inputlabel">Name:</label>
                <input id="skuNumber" class="textinput" type="text" data-win-bind="value: skuNumber Binding.Mode.twoway" />
                <br />
                <label class="inputlabel">Description:</label>
                <input id="description" class="textinput" type="text" data-win-bind="value: description Binding.Mode.twoway" />
                <br />
                <label class="inputlabel">Unit:</label>
                <input id="unit" class="textinput" type="text" data-win-bind="value: unit Binding.Mode.twoway" />
                <br />
                <label class="inputlabel">Price:</label>
                <input id="unitPrice" class="textinput" type="text" data-win-bind="value: unitPrice Binding.Mode.twoway" />
            </div>
        </section>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/pages/catalog/catalog.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";
    var nav = WinJS.Navigation;

    WinJS.UI.Pages.define("pages/catalog/catalog.html", {
        listViewControl: null,
        editTools: null,
        editButtons: null,
        currentItem: null,
        catalogDetailElement: null,
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {
            var subpage = element.querySelector(".page-section");
            var that = this;

            return WinJS.UI.processAll(element).then(function () {

                that.listViewControl = element.querySelector(".catalogListView").winControl;
                that.catalogDetailElement = element.querySelector(".catalogDetail");
                subpage.style.display = "none";
                showProgress("Loading...");
                return Data.catalogGet().then(function (catalog) {
                    if (!catalog) {
                        hideProgress();
                        nav.back(nav.history.backStack.length);
                        return;
                    }
                    that.editTools = subpage.querySelector(".edittools").winControl;
                    that.editButtons = that.editTools.getButtons();
                    that.editTools.addEventListener("click", that._buttonHandler.bind(that));
                    that.listViewControl.forceLayout();

                    that.editButtons['add'].disabled = false;
                    that.editButtons['edit'].style.display = "none";

                    that.listViewControl.onselectionchanged = function (arg) {
                        that.listViewControl.selection.getItems().then(function (items) {
                            if (items.length > 0) {
                                that.currentItem = items[0].data;
                                WinJS.Binding.processAll(that.catalogDetailElement, items[0].data);
                                //that.editButtons['delete'].disabled = false;
                                //that.editButtons['edit'].disabled = false;
                                //that.editButtons['save'].disabled = false;
                            }
                            else {
                                that.currentItem = null;
                                //that.editButtons['delete'].disabled = true;
                                //that.editButtons['edit'].disabled = true;
                                //that.editButtons['save'].disabled = true;
                            }
                        });
                    }
                    that.listViewControl.selection.add(0);
                    hideProgress();
                    subpage.style.display = "";

                    WinJS.UI.Animation.enterContent(subpage);
                });
            });
        },

        _buttonHandler: function (args) {
            if (!args.label || (this.currentItem == null && args.label != 'add')) {
                return;
            }
            var that = this;

            switch (args.label) {
                case 'save': {
                    Data.catalogSave(this.currentItem).then(function (saved) {
                        if (saved) {
                            var index = Data.catalog.indexOf(saved);
                            that.listViewControl.selection.clear();
                            that.listViewControl.selection.add(index);
                            that.listViewControl.ensureVisible(index);
                        }
                    });
                    break;
                }
                case 'delete': {
                    confirm("Delete Product", "Are you sure that you'd like to delete " + this.currentItem.skuNumber + "?", "Yes", "No").then(function (result) {
                        if (result.reason == "primary") {
                            var idx = Data.catalog.indexOf(that.currentItem) - 1;
                            if (idx < 0) {
                                idx = 0;
                            }
                            Data.catalogDelete(that.currentItem).then(function (deleted) {
                                that.listViewControl.selection.clear();
                                if (Data.catalog.length > 0) {
                                    that.listViewControl.selection.add(idx);
                                    that.listViewControl.ensureVisible(idx);
                                }
                            });
                        }
                    });
                    break;
                }
                case 'add': {
                    this.listViewControl.selection.clear();
                    this.currentItem = Data.catalogCreate();
                    WinJS.Binding.processAll(this.catalogDetailElement, this.currentItem);
                    that.catalogDetailElement.querySelector("#skuNumber").focus();

                    break;
                }
                default: {

                }
            }
        },

        unload: function () {
            // TODO: Respond to navigations away from this page.
        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();



================================================
FILE: src/Clients/Web/pages/dealers/dealers.css
================================================
﻿.dealerDetail {
}



================================================
FILE: src/Clients/Web/pages/dealers/dealers.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>dealers</title>

    <link href="dealers.css" rel="stylesheet" />
    <script src="dealers.js"></script>
</head>
<body>
    <div class="dealers fragment">
        <header class="page-header" aria-label="Header content" role="banner">
            <button class="page-header-home">
                <img src="../../images/FabrikamIcon.png" />
            </button>
            <h2 class="titlearea win-type-ellipsis">
                <span class="pagetitle">Dealers</span>
            </h2>
        </header>
        <section class="page-section" aria-label="Main content" role="main">
            <!-- Simple template for the ListView instantiation  -->
            <div class="dealerItemTemplate" data-win-control="WinJS.Binding.Template" style="display: none">
                <div class="listItem dealerItem">
                    <div class="dealerItem-Detail">
                        <h3 data-win-bind="textContent: name"></h3>
                        <div class="list-item-entry-small" data-win-bind="textContent: contact"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: address"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: email"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: phone"></div>
                    </div>
                </div>
            </div>

            <div class="edittools" data-win-control="Controls.EditTools" data-win-options="{  }"></div>

            <div id="listView"
                 class="itemListView dealerListView"
                 data-win-control="WinJS.UI.ListView"
                 data-win-options="{
                    itemDataSource: Data.dealers.dataSource,
                    itemTemplate: select('.dealerItemTemplate'),
                    selectionMode: 'single',
                    tapBehavior: 'directSelect',
                    swipeBehavior: 'select',
                    layout: { type: WinJS.UI.ListLayout }
                 }">
            </div>

            <div class="editDetail dealerDetail">
                <label class="inputlabel">Name:</label>
                <input id="name" class="textinput" type="text" data-win-bind="value: name Binding.Mode.twoway" />
                <label class="inputlabel">Contact:</label>
                <input id="contact" class="textinput" type="text" data-win-bind="value: contact Binding.Mode.twoway" />
                <label class="inputlabel">Address:</label>
                <input id="address" class="textinput" type="text" data-win-bind="value: address Binding.Mode.twoway" />
                <label class="inputlabel">Email:</label>
                <input id="email" class="textinput" type="text" data-win-bind="value: email Binding.Mode.twoway" />
                <label class="inputlabel">Phone:</label>
                <input id="phone" class="textinput" type="text" data-win-bind="value: phone Binding.Mode.twoway" />
            </div>
        </section>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/pages/dealers/dealers.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";
    var nav = WinJS.Navigation;

    WinJS.UI.Pages.define("pages/dealers/dealers.html", {
        listViewControl: null,
        editTools: null,
        editButtons: null,
        currentItem: null,
        dealerDetailElement: null,
        autocomplete: null,
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {
            var subpage = element.querySelector(".page-section");
            var that = this;


            that.listViewControl = element.querySelector(".dealerListView").winControl;
            that.dealerDetailElement = element.querySelector(".dealerDetail");
            subpage.style.display = "none";
            showProgress("Loading...");
            return Data.dealersGet().then(function (dealers) {
                if (!dealers) {
                    hideProgress();
                    nav.back(nav.history.backStack.length);
                    return;
                }
                that.editTools = subpage.querySelector(".edittools").winControl;
                that.editButtons = that.editTools.getButtons();
                that.editTools.addEventListener("click", that._buttonHandler.bind(that));
                that.listViewControl.forceLayout();

                that.editButtons['add'].disabled = false;
                that.editButtons['edit'].style.display = "none";

                addAddressHandler(that.dealerDetailElement.querySelector("#address"), function (place) {
                    that.currentItem.address = place.formatted_address;
                });

                that.listViewControl.onselectionchanged = function (arg) {
                    that.listViewControl.selection.getItems().then(function (items) {
                        if (items.length > 0) {
                            that.currentItem = items[0].data;
                            WinJS.Binding.processAll(that.dealerDetailElement, items[0].data);
                            //that.editButtons['delete'].disabled = false;
                            //that.editButtons['edit'].disabled = false;
                            //that.editButtons['save'].disabled = false;
                        }
                        else {
                            that.currentItem = null;
                            //that.editButtons['delete'].disabled = true;
                            //that.editButtons['edit'].disabled = true;
                            //that.editButtons['save'].disabled = true;
                        }
                    });
                }
                that.listViewControl.selection.add(0);
                hideProgress();
                subpage.style.display = "";

                WinJS.UI.Animation.enterContent(subpage);

            });
        },

        _buttonHandler: function (args) {
            if (!args.label || (this.currentItem == null && args.label != 'add')) {
                return;
            }
            var that = this;

            switch (args.label) {
                case 'save': {
                    Data.dealerSave(this.currentItem).then(function (saved) {
                        if (saved) {
                            var index = Data.dealers.indexOf(saved);
                            that.listViewControl.selection.clear();
                            that.listViewControl.selection.add(index);
                            that.listViewControl.ensureVisible(index);
                        }
                    });
                    break;
                }
                case 'delete': {
                    confirm("Delete Dealer", "Are you sure that you'd like to delete " + this.currentItem.name + "?", "Yes", "No").then(function (result) {
                        if (result.reason == "primary") {
                            var idx = Data.dealers.indexOf(that.currentItem) - 1;
                            if (idx < 0) {
                                idx = 0;
                            }
                            Data.dealerDelete(that.currentItem).then(function (deleted) {
                                that.listViewControl.selection.clear();
                                if (Data.dealers.length > 0) {
                                    that.listViewControl.selection.add(idx);
                                    that.listViewControl.ensureVisible(idx);
                                }
                            });
                        }
                    });
                    break;
                }
                case 'add': {
                    this.listViewControl.selection.clear();
                    this.currentItem = Data.dealerCreate();
                    WinJS.Binding.processAll(this.dealerDetailElement, this.currentItem);
                    that.dealerDetailElement.querySelector("#name").focus();

                    break;
                }
                default: {

                }
            }
        },

        unload: function () {
            // TODO: Respond to navigations away from this page.
        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();



================================================
FILE: src/Clients/Web/pages/deliveries/deliveries.css
================================================
﻿.fullDeliveryDetail {
    float: left;
    margin-top: 10px;
    margin-left: 20px;
    width: 50%;
    max-height: calc(100% - 120px);
    overflow-y: auto;
    padding-right: 10px;
}

    .fullDeliveryDetail .editDetail {
        float: left;
        margin-top: 0px;
        margin-left: 0px;
        width: 100%;
        background: #F0F0F0;
        padding-left: 10px;
        padding-top: 10px;
        padding-bottom: 10px;
        padding-right: 0px;
    }

.deliveryDetail {
    margin-bottom: 10px;
}

    .deliveryDetail .eventsSection {
        display: flex;
        width: 100%;
        align-items: center;
    }

.deliveryDetail .horizontalDetail .horizontalDetailCol {
    display: inline-block;
    width: 48%;
}



================================================
FILE: src/Clients/Web/pages/deliveries/deliveries.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Deliveries</title>

    <link href="deliveries.css" rel="stylesheet" />
    <link href="../quotes/quotes.css" rel="stylesheet" />
    <link href="../orders/orders.css" rel="stylesheet" />
    <script src="deliveries.js"></script>
</head>
<body>
    <div class="deliveries fragment">
        <header class="page-header" aria-label="Header content" role="banner">
            <button class="page-header-home">
                <img src="../../images/FabrikamIcon.png" />
            </button>
            <h2 class="titlearea win-type-ellipsis">
                <span class="pagetitle">Deliveries</span>
            </h2>
        </header>
        <section class="page-section" aria-label="Main content" role="main">
            <!-- Simple template for the ListView instantiation  -->
            <div class="deliveryItemTemplate" data-win-control="WinJS.Binding.Template" style="display: none">
                <div class="listItem deliveryItem">
                    <div class="deliveryItem-Detail">
                        <h3 data-win-bind="textContent: __quote.dealerName"></h3>
                        <div class="list-item-entry-small" data-win-bind="textContent: __quote.customerName"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: deliveryDate">asdasdasd</div>
                        <div class="list-item-entry-small" data-win-bind="textContent: __order.status"></div>
                        <div class="list-item-entry-small"><span data-win-bind="textContent: __quote.width"></span>W x <span data-win-bind="textContent: __quote.height"></span>H x <span data-win-bind="textContent: __quote.depth"></span>D <span data-win-bind="textContent: __quote.purpose"></span></div>
                    </div>
                </div>
            </div>

            <div class="edittools" data-win-control="Controls.EditTools" data-win-options="{  }"></div>

            <div id="deliveryExtrasPopup" class="pagePopup">
                <div data-win-control="WinJS.UI.ContentDialog" data-win-options="{
                     title: 'Main instruction',
                     primaryCommandText: 'Done'
                 }">
                </div>
            </div>

            <div id="listView"
                 class="itemListView deliveryListView"
                 data-win-control="WinJS.UI.ListView"
                 data-win-options="{
                    itemDataSource: Data.deliveries.dataSource,
                    itemTemplate: select('.deliveryItemTemplate'),
                    selectionMode: 'single',
                    tapBehavior: 'directSelect',
                    swipeBehavior: 'select',
                    layout: { type: WinJS.UI.ListLayout }
                 }">
            </div>
            <div class="fullDeliveryDetail">
                <div class="editDetail deliveryDetail">
                    <label class="inputlabel">Delivery Date:</label>
                    <input id="orderDate" class="textinput" type="text" data-win-bind="value: deliveryDate Binding.Mode.twoway" />
                    <label class="inputlabel">Address:</label>
                    <input id="deliveryAddress" class="textinput" type="text" data-win-bind="value: deliveryAddress.city Binding.Mode.twoway" />
                    <label class="inputlabel">Post Code:</label>
                    <input id="deliveryPostcode" class="textinput" type="text" data-win-bind="value: deliveryAddress.postalCode Binding.Mode.twoway" />
                    <div class="horizontalDetail">
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Phone 1:</label>
                            <input id="width" class="textinput" type="text" data-win-bind="value: primaryContactPhone.phoneNumber Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Phone 2:</label>
                            <input id="height" class="textinput" type="text" data-win-bind="value: alternateContactPhone.phoneNumber Binding.Mode.twoway" />
                        </div>
                    </div>
                    <div class="eventsSection">
                        <label class="buttonlabel">Manage Events:</label>
                        <button id="manageDeliveryEvents" class="edit-tools-button" type="button"></button>
                    </div>
                </div>
                <div class="editDetail orderDetail">
                    <label class="inputlabel">Order Date:</label>
                    <input id="orderDate" class="textinput" type="text" data-win-bind="value: __order.orderDate Binding.Mode.twoway" />
                    <select id="status" class="selectinput" data-win-bind="value: __order.status Binding.Mode.twoway">
                        <option value="Created">Created</option>
                        <option value="Confirmed">Confirmed</option>
                        <option value="Started">Started</option>
                        <option value="Built">Built</option>
                        <option value="DeliveryConfirmed">Delivery Confirmed</option>
                        <option value="Shipped">Shipped</option>
                        <option value="Delivered">Delivered</option>
                        <option value="Installed">Installed</option>
                    </select>
                    <div class="eventsSection">
                        <label class="buttonlabel">Manage Events:</label>
                        <button id="manageOrderEvents" class="edit-tools-button" type="button"></button>
                    </div>
                </div>
                <div class="editDetail quoteDetail">
                    <label class="inputlabel">Dealer:</label>
                    <input id="quoteDealerName" class="textinput" type="text" data-win-bind="value: __quote.dealerName Binding.Mode.twoway" />
                    <label class="inputlabel">Valid Until:</label>
                    <input id="quoteValidUntil" class="textinput" type="text" data-win-bind="value: __quote.validUntil Binding.Mode.twoway" />
                    <label class="inputlabel">Customer:</label>
                    <input id="quoteCustomerName" class="textinput" type="text" data-win-bind="value: __quote.customerName Binding.Mode.twoway" />
                    <label class="inputlabel">Address:</label>
                    <input id="quoteAddress" class="textinput" type="text" data-win-bind="value: __quote.city Binding.Mode.twoway" />
                    <label class="inputlabel">Post Code:</label>
                    <input id="quotePostcode" class="textinput" type="text" data-win-bind="value: __quote.postalCode Binding.Mode.twoway" />
                    <label class="inputlabel">Comments:</label>
                    <input id="quoteComments" class="textinput" type="text" data-win-bind="value: __quote.comments Binding.Mode.twoway" />
                    <label class="inputlabel">Purpose:</label>
                    <select id="quotePurpose" class="selectinput" data-win-bind="value: __quote.purpose Binding.Mode.twoway">
                        <option value="Refrigerator">Fridge</option>
                        <option value="Freezer">Freezer</option>
                    </select>
                    <label class="inputlabel">Description:</label>
                    <input id="quoteUnitDescription" class="textinput" type="text" data-win-bind="value: __quote.unitDescription Binding.Mode.twoway" />
                    <div class="extrasSection">
                        <label class="buttonlabel">Manage Extras:</label>
                        <button id="manageExtras" class="edit-tools-button" type="button"></button>
                    </div>
                    <div class="horizontalDetail">
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Width:</label>
                            <input id="width" class="textinput" type="text" data-win-bind="value: __quote.width Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Height:</label>
                            <input id="height" class="textinput" type="text" data-win-bind="value: __quote.height Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Depth:</label>
                            <input id="depth" class="textinput" type="text" data-win-bind="value: __quote.depth Binding.Mode.twoway" />
                        </div>
                    </div>
                    <div class="horizontalDetail">
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Ambient:</label>
                            <input id="width" class="textinput" type="text" data-win-bind="value: __quote.ambientAverage Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Peak:</label>
                            <input id="height" class="textinput" type="text" data-win-bind="value: __quote.ambientPeak Binding.Mode.twoway" />
                        </div>
                    </div>
                    <div class="horizontalDetail">
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Terms:</label>
                            <input id="width" class="textinput" type="text" data-win-bind="value: __quote.terms Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Total:</label>
                            <input id="height" class="textinput" type="text" data-win-bind="value: __quote.totalCost Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Discount:</label>
                            <input id="height" class="textinput" type="text" data-win-bind="value: __quote.discount Binding.Mode.twoway" />
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/pages/deliveries/deliveries.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";
    var nav = WinJS.Navigation;

    WinJS.UI.Pages.define("pages/deliveries/deliveries.html", {
        listViewControl: null,
        editTools: null,
        editButtons: null,
        currentItem: null,
        originalItem: null,
        deliveryDetailElement: null,
        itemTemplateHTML: null,
        bound: false,
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {
            var subpage = element.querySelector(".page-section");
            var that = this;
            var fromOrder = WinJS.Promise.as();

            if (options && options.order) {
                showProgress("Creating Delivery...");
                fromOrder = Data.deliveryCreateFromOrder(options.order);
            }
            else {
                showProgress("Loading...");
            }

            return WinJS.UI.processAll(element).then(function () {
                element.querySelector("#manageExtras").addEventListener("click", that._extrasHandler.bind(that));
                element.querySelector("#manageOrderEvents").addEventListener("click", that._orderEventsHandler.bind(that));
                element.querySelector("#manageDeliveryEvents").addEventListener("click", that._deliveryEventsHandler.bind(that));

                that.listViewControl = element.querySelector(".deliveryListView").winControl;
                that.listViewControl.itemTemplate = that._itemRenderer.bind(that);
                that.itemTemplateHTML = element.querySelector(".deliveryItemTemplate").innerHTML;
                that.deliveryDetailElement = element.querySelector(".fullDeliveryDetail");

                subpage.style.display = "none";
                return fromOrder.then(function (newdelivery) {
                    return Data.deliveriesGet().then(function (deliveries) {
                        if (newdelivery && Data.deliveryFindById(newdelivery.orderId) < 0) {
                            deliveries.push(newdelivery);
                        }
                        if (!deliveries) {
                            hideProgress();
                            nav.back(nav.history.backStack.length);
                            return;
                        }
                        var toolsElement = subpage.querySelector(".edittools");
                        if (!toolsElement) {
                            return;
                        }
                        that.editTools = toolsElement.winControl;
                        that.editButtons = that.editTools.getButtons();
                        that.editTools.addEventListener("click", that._buttonHandler.bind(that));
                        that.listViewControl.forceLayout();
                        that.editButtons['add'].style.display = "none";
                        that.editButtons['edit'].style.display = "none";

                        addAddressHandler(that.deliveryDetailElement.querySelector("#deliveryAddress"), function (place) {
                            that.currentItem.deliveryAddress.city = place.formatted_address;
                            that.currentItem.deliveryAddress.postalCode = getPostCodeFromPlace(place)
                        });

                        addAddressHandler(that.deliveryDetailElement.querySelector("#deliveryPostcode"), function (place) {
                            that.currentItem.deliveryAddress.city = place.formatted_address;
                            that.currentItem.deliveryAddress.postalCode = getPostCodeFromPlace(place)
                            that.quoteDetailElement.querySelector("#deliveryPostcode").value = that.currentItem.deliveryAddress.postalCode;
                        });

                        addAddressHandler(that.deliveryDetailElement.querySelector("#quoteAddress"), function (place) {
                            that.currentItem.__quote.city = place.formatted_address;
                            that.currentItem.__quote.postalCode = getPostCodeFromPlace(place)
                        });

                        addAddressHandler(that.deliveryDetailElement.querySelector("#quotePostcode"), function (place) {
                            that.currentItem.__quote.city = place.formatted_address;
                            that.currentItem.__quote.postalCode = getPostCodeFromPlace(place)
                            that.quoteDetailElement.querySelector("#quotePostcode").value = that.currentItem.__quote.postalCode;
                        });

                        that.listViewControl.onselectionchanged = function (arg) {
                            that.listViewControl.selection.getItems().then(function (items) {
                                if (items.length > 0) {
                                    that.currentItem = items[0].data;
                                    that.originalItem = clone(items[0].data.backingData);
                                    that.originalItem.__order = clone(items[0].data.__order.backingData);
                                    that.originalItem.__quote = clone(items[0].data.__quote.backingData);
                                    WinJS.Binding.processAll(that.deliveryDetailElement, items[0].data);
                                    //that.editButtons['delete'].disabled = false;
                                    //that.editButtons['edit'].disabled = false;
                                    //that.editButtons['save'].disabled = false;
                                }
                                else {
                                    that.currentItem = null;
                                    that.originalItem = null;
                                    //that.editButtons['delete'].disabled = true;
                                    //that.editButtons['edit'].disabled = true;
                                    //that.editButtons['save'].disabled = true;
                                }
                            });
                        }

                        that.listViewControl.onloadingstatechanged = function (args) {
                            if (that.listViewControl.loadingState === "viewPortLoaded") {
                                WinJS.Promise.timeout().then(function () {
                                    var selectindex = 0;
                                    if (newdelivery) {
                                        selectindex = Data.deliveryFindById(newdelivery.orderId);
                                    }

                                    that.listViewControl.selection.add(selectindex);
                                    that.listViewControl.onloadingstatechanged = undefined;
                                });
                            }
                        }
                        hideProgress();
                        subpage.style.display = "";
                        WinJS.UI.Animation.enterContent(subpage);
                    });
                });
            });
        },

        _itemRenderer: function (itemPromise, recycled) {
            var that = this;
            return itemPromise.then(function (currentItem) {
                if (!that) {
                    return document.createElement("div");
                }

                var data = currentItem.data;
                return Data.orderGetById(data.orderId).then(function (order) {
                    data.__order = order;
                    data.__quote = order.__quote;

                    var boundTemplate = document.createElement("div");
                    boundTemplate.className = "win-template";
                    boundTemplate.innerHTML = that.itemTemplateHTML;

                    return WinJS.Binding.processAll(boundTemplate, data).then(function () {
                        return boundTemplate;
                    });
                });
            });
        },

        _extrasHandler: function (args) {
            popup("deliveryExtrasPopup", "Manage Extras", "pages/extras/extras.html", this.currentItem.__quote);
        },
        _deliveryEventsHandler: function (args) {
            popup("deliveryExtrasPopup", "Manage Delivery Events", "pages/orderevents/orderevents.html", this.currentItem);
        },
        _orderEventsHandler: function (args) {
            popup("deliveryExtrasPopup", "Manage Order Events", "pages/orderevents/orderevents.html", this.currentItem.__order);
        },
        _buttonHandler: function (args) {
            if (!args.label || (this.currentItem == null && args.label != 'add')) {
                return;
            }
            var that = this;

            switch (args.label) {
                case 'save': {
                    Data.deliverySave(this.currentItem, this.originalItem).then(function (saved) {
                        if (saved) {
                            var index = Data.deliveries.indexOf(saved);
                            that.listViewControl.selection.clear();
                            that.listViewControl.selection.add(index);
                            that.listViewControl.ensureVisible(index);
                        }
                    });
                    break;
                }
                case 'delete': {
                    confirm("Delete Order", "Are you sure that you'd like to delete this delivery?", "Yes", "No").then(function (result) {
                        if (result.reason == "primary") {
                            var idx = Data.deliveries.indexOf(that.currentItem) - 1;
                            if (idx < 0) {
                                idx = 0;
                            }
                            Data.deliveryDelete(that.currentItem).then(function (deleted) {
                                that.listViewControl.selection.clear();
                                if (Data.deliveries.length > 0) {
                                    that.listViewControl.selection.add(idx);
                                    that.listViewControl.ensureVisible(idx);
                                }
                            });
                        }
                    });
                    break;
                }
                default: {

                }
            }
        },

        unload: function () {

        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();



================================================
FILE: src/Clients/Web/pages/extras/extras.css
================================================
﻿.extrasDetail {
}

.extras {
}



================================================
FILE: src/Clients/Web/pages/extras/extras.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>extras</title>

    <link href="extras.css" rel="stylesheet" />
    <script src="extras.js"></script>
</head>
<body>
    <div class="extras fragment">
        <section class="page-section" aria-label="Main content" role="main">
            <!-- Simple template for the ListView instantiation  -->
            <div class="extrasItemTemplate" data-win-control="WinJS.Binding.Template" style="display: none">
                <div class="listItem extrasItem">
                    <div class="extrasItem-Detail">
                        <h3 data-win-bind="textContent: skuNumber"></h3>
                        <div class="list-item-entry-small" data-win-bind="textContent: description"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: unit"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: unitPrice"></div>
                    </div>
                </div>
            </div>

            <div class="edittools" data-win-control="Controls.EditTools" data-win-options="{  }"></div>

            <div id="listView"
                 class="itemListView extrasListView"
                 data-win-control="WinJS.UI.ListView"
                 data-win-options="{
                    itemTemplate: select('.extrasItemTemplate'),
                    selectionMode: 'single',
                    tapBehavior: 'directSelect',
                    swipeBehavior: 'select',
                    layout: { type: WinJS.UI.ListLayout }
                 }">
            </div>

            <div class="editDetail extrasDetail">
                <label class="inputlabel">Name:</label>
                <input id="extras-skuNumber" class="textinput" type="text" data-win-bind="value: skuNumber Binding.Mode.twoway" />
                <br />
                <label class="inputlabel">Description:</label>
                <input id="extras-description" class="textinput" type="text" data-win-bind="value: description Binding.Mode.twoway" />
                <br />
                <label class="inputlabel">Unit:</label>
                <input id="extras-unit" class="textinput" type="text" data-win-bind="value: unit Binding.Mode.twoway" />
                <br />
                <label class="inputlabel">Price:</label>
                <input id="extras-unitPrice" class="textinput" type="text" data-win-bind="value: unitPrice Binding.Mode.twoway" />
            </div>
        </section>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/pages/extras/extras.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";

    WinJS.UI.Pages.define("pages/extras/extras.html", {
        listViewControl: null,
        editTools: null,
        editButtons: null,
        currentItem: null,
        extrasDetailElement: null,
        extrasData: null,
        additionalItems: null,
        addingItem: false,
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {
            var subpage = element.querySelector(".page-section");
            var that = this;
            that.additionalItems = options.state.additionalItems;

            return WinJS.UI.processAll(element).then(function () {

                that.listViewControl = element.querySelector(".extrasListView").winControl;
                that.extrasDetailElement = element.querySelector(".extrasDetail");
                subpage.style.display = "none";
                showProgress("Loading...");
                return Data.catalogGet().then(function (catalog) {
                    var skuField = that.extrasDetailElement.querySelector("#extras-skuNumber");
                    that.extrasData = that._getCatalogEntriesForExtras(that.additionalItems);

                    WinJS.UI.setOptions(that.listViewControl, {
                        itemDataSource: that.extrasData.dataSource
                    });

                    that.editTools = subpage.querySelector(".edittools").winControl;
                    that.editButtons = that.editTools.getButtons();
                    that.editTools.addEventListener("click", that._buttonHandler.bind(that));
                    that.listViewControl.forceLayout();

                    that.editButtons['add'].disabled = false;
                    that.editButtons['edit'].style.display = "none";

                    addTextChangeEventHandler(skuField, function (args) {
                        that._populateExtraDetails(skuField.value);
                    }.bind(that));

                    that.listViewControl.onselectionchanged = function (arg) {
                        that.listViewControl.selection.getItems().then(function (items) {
                            if (items.length > 0) {
                                that.currentItem = items[0].data;
                                WinJS.Binding.processAll(that.extrasDetailElement, items[0].data);
                                //that.editButtons['delete'].disabled = false;
                                //that.editButtons['edit'].disabled = false;
                                //that.editButtons['save'].disabled = false;
                            }
                            else {
                                that.currentItem = null;
                                //that.editButtons['delete'].disabled = true;
                                //that.editButtons['edit'].disabled = true;
                                //that.editButtons['save'].disabled = true;
                            }
                        });
                    }
                    that.listViewControl.selection.add(0);
                    hideProgress();
                    subpage.style.display = "";

                    WinJS.UI.Animation.enterContent(subpage);
                });
            });
        },
        _populateExtraDetails: function (skuNumber) {
            var that = this;
            var extra = Data.catalogFindSku(skuNumber);
            if (extra) {
                if (extra.backingData) {
                    extra = extra.backingData;
                }
                Object.keys(extra).forEach(function (extraKey) {
                    if (extraKey != "skuNumber") {
                        that.currentItem[extraKey] = extra[extraKey];
                    }
                });
            }
        },
        _getCatalogEntriesForExtras: function (additionalItems) {
            var extras = new WinJS.Binding.List().createSorted(function (l, r) {
                return l.skuNumber < r.skuNumber ? -1 : l.skuNumber === r.skuNumber ? 0 : 1;
            });

            for (var n = 0; n < additionalItems.length; n++) {
                var catalogEntry = Data.catalogFindSku(additionalItems[n].skuNumber);
                if (catalogEntry != null) {
                    extras.push(catalogEntry);
                }
            }

            return extras;
        },
        _buttonHandler: function (args) {
            if (!args.label || (this.currentItem == null && args.label != 'add')) {
                return;
            }
            var that = this;

            switch (args.label) {
                case 'save': {
                    this.addingItem = false;
                    return Data.catalogSave(this.currentItem).then(function (saved) {
                        if (saved) {
                            if (that.currentItem.__new) {
                                that.extrasData.push(saved);
                            }
                            var index = that.extrasData.indexOf(saved);
                            that.listViewControl.selection.clear();
                            that.listViewControl.selection.add(index);
                            that.listViewControl.ensureVisible(index);
                        }
                    });
                    break;
                }
                case 'delete': {
                    this.addingItem = false;
                    return confirm("Delete Extra", "Are you sure that you'd like to delete " + this.currentItem.skuNumber + "?", "Yes", "No").then(function (result) {
                        if (result.reason == "primary") {
                            var idx = that.extrasData.indexOf(that.currentItem);
                            if (idx >= 0) {
                                that.extrasData.splice(idx, 1);
                                idx -= 1;
                            }

                            if (idx < 0) {
                                idx = 0;
                            }

                            that.listViewControl.selection.clear();
                            if (that.extrasData.length > 0) {
                                that.listViewControl.selection.add(idx);
                                that.listViewControl.ensureVisible(idx);
                            }

                            //Data.catalogDelete(that.currentItem).then(function (deleted) {
                            //    that.listViewControl.selection.clear();
                            //    if (that.dataSource.length > 0) {
                            //        that.listViewControl.selection.add(idx);
                            //        that.listViewControl.ensureVisible(idx);
                            //    }
                            //});
                        }
                    });
                    break;
                }
                case 'add': {
                    this.addingItem = true;
                    this.listViewControl.selection.clear();
                    this.currentItem = Data.catalogCreate();
                    WinJS.Binding.processAll(this.extrasDetailElement, this.currentItem);
                    that.extrasDetailElement.querySelector("#extras-skuNumber").focus();

                    break;
                }
                default: {

                }
            }
            return WinJS.Promise.as(true);
        },

        unload: function () {
            var that = this;

            function cleanupUnload() {
                // TODO: Respond to navigations away from this page.
                that.additionalItems.splice(0, that.additionalItems.length);
                that.extrasData.forEach(function (extra) {
                    var theExtraEntry = {};
                    theExtraEntry.skuNumber = extra.skuNumber;
                    theExtraEntry.shouldPreInstall = true;
                    theExtraEntry.amount = 1;
                    that.additionalItems.push(theExtraEntry);
                });
            }

            if (this.addingItem == true) {
                this._buttonHandler({ label: 'save' }).then(cleanupUnload);
            }
            else {
                cleanupUnload();
            }
        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();



================================================
FILE: src/Clients/Web/pages/main/main.css
================================================
﻿.main section {
    margin: auto 120px;
}



================================================
FILE: src/Clients/Web/pages/main/main.html
================================================
﻿<!DOCTYPE html>
<!-- saved from url=(0058)file:///D:/Source/MRP/src/Clients/Web/pages/main/main.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <title>main</title>

    <link href="./main.css" rel="stylesheet">
    <script src="./main_files/main.js"></script>
</head>
<body>
    <div class="main fragment">
        <header class="page-header" aria-label="Header content" role="banner">
            <button class="page-header-home">
                <img src="./main_files/FabrikamIcon.png">
            </button>
            <h2 class="titlearea win-type-ellipsis">
                <span class="pagetitle">Welcome to Parts Unlimited MRP system</span>
            </h2>
			<h3> A Fabrikam Subsidiary </h3>
        </header>
        <section class="page-section" aria-label="Main content" role="main">
            <div id="launchpad">
                <img id="companylogo" src="./main_files/unlimited_logo.png">
                <div id="launchtiles">
                    <button class="launchtile" data-page="dealers">
                        <div class="launchtileinner">
                            <img class="launchtilelogo" src="./main_files/DealersIcon.png">
                            <div class="launchtiletitle">Dealers</div>
                        </div>
                    </button>
                    <button class="launchtile" data-page="quotes">
                        <div class="launchtileinner">
                            <img class="launchtilelogo" src="./main_files/QuoteIcon.png">
                            <div class="launchtiletitle">Quotes</div>
                        </div>
                    </button>
                    <button class="launchtile" data-page="orders">
                        <div class="launchtileinner">
                            <img class="launchtilelogo" src="./main_files/OrderIcon.png">
                            <div class="launchtiletitle">Orders</div>
                        </div>
                    </button>
                    <button class="launchtile" data-page="deliveries">
                        <div class="launchtileinner">
                            <img class="launchtilelogo" src="./main_files/DeliveryIcon.png">
                            <div class="launchtiletitle">Deliveries</div>
                        </div>
                    </button>
                    <button class="launchtile" data-page="catalog">
                        <div class="launchtileinner">
                            <img class="launchtilelogo" src="./main_files/CatalogIcon.png">
                            <div class="launchtiletitle">Catalog</div>
                        </div>
                    </button>
                </div>
            </div>
        </section>
    </div>


</body></html>


================================================
FILE: src/Clients/Web/pages/main/main.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";

    var app = WinJS.Application;
    var nav = WinJS.Navigation;
    var sched = WinJS.Utilities.Scheduler;
    var ui = WinJS.UI;

    WinJS.UI.Pages.define("pages/main/main.html", {
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {

            var launchtiles = document.querySelectorAll('.launchtile');
            for (var n = 0; n < launchtiles.length; n++) {
                var launchtile = launchtiles[n];
                launchtile.addEventListener('click', this.launchtileInvoked.bind(this));
            }
        },

        toggleNavBarVisibility: function (ev) {
            document.getElementById('createNavBar').winControl.show();
        },

        launchtileInvoked: function (ev) {
            var tile = ev.currentTarget;
            var location = "pages/" + tile.dataset.page + "/" + tile.dataset.page + ".html";
            nav.navigate(location);
            var trigger = document.querySelector(".nav-trigger");
            trigger.checked = false;
        },

        unload: function () {
            // TODO: Respond to navigations away from this page.
        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();



================================================
FILE: src/Clients/Web/pages/main/main_files/main.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";

    var app = WinJS.Application;
    var nav = WinJS.Navigation;
    var sched = WinJS.Utilities.Scheduler;
    var ui = WinJS.UI;

    WinJS.UI.Pages.define("pages/main/main.html", {
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {

            var launchtiles = document.querySelectorAll('.launchtile');
            for (var n = 0; n < launchtiles.length; n++) {
                var launchtile = launchtiles[n];
                launchtile.addEventListener('click', this.launchtileInvoked.bind(this));
            }
        },

        toggleNavBarVisibility: function (ev) {
            document.getElementById('createNavBar').winControl.show();
        },

        launchtileInvoked: function (ev) {
            var tile = ev.currentTarget;
            var location = "pages/" + tile.dataset.page + "/" + tile.dataset.page + ".html";
            nav.navigate(location);
            var trigger = document.querySelector(".nav-trigger");
            trigger.checked = false;
        },

        unload: function () {
            // TODO: Respond to navigations away from this page.
        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();



================================================
FILE: src/Clients/Web/pages/orderevents/orderevents.css
================================================
﻿


================================================
FILE: src/Clients/Web/pages/orderevents/orderevents.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>orderevents</title>

    <link href="orderevents.css" rel="stylesheet" />
    <script src="orderevents.js"></script>
</head>
<body>
    <div class="orderevents fragment">
        <section class="page-section" aria-label="Main content" role="main">
            <!-- Simple template for the ListView instantiation  -->
            <div class="ordereventsItemTemplate" data-win-control="WinJS.Binding.Template" style="display: none">
                <div class="listItem ordereventsItem">
                    <div class="ordereventsItem-Detail">
                        <h3 data-win-bind="textContent: date"></h3>
                        <div class="list-item-entry-small" data-win-bind="textContent: comments"></div>
                    </div>
                </div>
            </div>

            <div class="edittools" data-win-control="Controls.EditTools" data-win-options="{  }"></div>

            <div id="listView"
                 class="itemListView ordereventsListView"
                 data-win-control="WinJS.UI.ListView"
                 data-win-options="{
                    itemTemplate: select('.ordereventsItemTemplate'),
                    selectionMode: 'single',
                    tapBehavior: 'directSelect',
                    swipeBehavior: 'select',
                    layout: { type: WinJS.UI.ListLayout }
                 }">
            </div>

            <div class="editDetail ordereventsDetail">
                <label class="inputlabel">Date:</label>
                <input id="orderevents-date" class="textinput" type="text" data-win-bind="value: date Binding.Mode.twoway" />
                <br />
                <label class="inputlabel">Comments:</label>
                <input id="orderevents-comments" class="textinput-multiline" type="text" data-win-bind="value: comments Binding.Mode.twoway" />
            </div>
        </section>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/pages/orderevents/orderevents.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";

    WinJS.UI.Pages.define("pages/orderevents/orderevents.html", {
        listViewControl: null,
        editTools: null,
        editButtons: null,
        currentItem: null,
        originalItem: null,
        ordereventsDetailElement: null,
        ordereventsData: null,
        events: null,
        addingItem: false,
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {
            var subpage = element.querySelector(".page-section");
            var that = this;
            that.events = options.state.events;

            return WinJS.UI.processAll(element).then(function () {

                that.listViewControl = element.querySelector(".ordereventsListView").winControl;
                that.ordereventsDetailElement = element.querySelector(".ordereventsDetail");
                subpage.style.display = "none";
                showProgress("Loading...");
                return Data.catalogGet().then(function (catalog) {
                    that.ordereventsData = that._getOrderEventsDataSource(that.events);

                    WinJS.UI.setOptions(that.listViewControl, {
                        itemDataSource: that.ordereventsData.dataSource
                    });

                    that.editTools = subpage.querySelector(".edittools").winControl;
                    that.editButtons = that.editTools.getButtons();
                    that.editTools.addEventListener("click", that._buttonHandler.bind(that));
                    that.listViewControl.forceLayout();

                    that.editButtons['add'].disabled = false;
                    that.editButtons['edit'].style.display = "none";

                    that.listViewControl.onselectionchanged = function (arg) {
                        that.listViewControl.selection.getItems().then(function (items) {
                            if (items.length > 0) {
                                that.currentItem = items[0].data;
                                that.originalItem = clone(items[0].data);
                                WinJS.Binding.processAll(that.ordereventsDetailElement, items[0].data);
                                //that.editButtons['delete'].disabled = false;
                                //that.editButtons['edit'].disabled = false;
                                //that.editButtons['save'].disabled = false;
                            }
                            else {
                                that.currentItem = null;
                                that.originalItem = null;
                                //that.editButtons['delete'].disabled = true;
                                //that.editButtons['edit'].disabled = true;
                                //that.editButtons['save'].disabled = true;
                            }
                        });
                    }
                    that.listViewControl.selection.add(0);
                    hideProgress();
                    subpage.style.display = "";

                    WinJS.UI.Animation.enterContent(subpage);
                });
            });
        },
        _getOrderEventsDataSource: function (events) {
            var orderevents = new WinJS.Binding.List().createSorted(function (l, r) {
                try {
                    var ldate = new Date(l.date);
                    var rdate = new Date(r.date);
                    if (ldate.getFullYear() < 1970) {
                        ldate.setFullYear(ldate.getFullYear() + 100);
                    }

                    if (rdate.getFullYear() < 1970) {
                        rdate.setFullYear(rdate.getFullYear() + 100);
                    }

                    return ldate > rdate ? -1 : ldate === rdate ? 0 : 1;
                }
                catch (e) {
                    return l.date > r.date ? -1 : l.date === r.date ? 0 : 1;
                }

            });

            for (var n = 0; n < events.length; n++) {
                orderevents.push(WinJS.Binding.as(events[n]));
            }

            return orderevents;
        },
        _buttonHandler: function (args) {
            if (!args.label || (this.currentItem == null && args.label != 'add')) {
                return;
            }
            var that = this;

            switch (args.label) {
                case 'save': {
                    this.addingItem = false;
                    if (that.currentItem.__new) {
                        that.ordereventsData.push(that.currentItem);
                    }
                    var index = that.ordereventsData.indexOf(that.currentItem);
                    that.listViewControl.selection.clear();
                    that.listViewControl.selection.add(index);
                    that.listViewControl.ensureVisible(index);
                    break;
                }
                case 'delete': {
                    this.addingItem = false;
                    return confirm("Delete OrderEvent", "Are you sure that you'd like to delete this event?", "Yes", "No").then(function (result) {
                        if (result.reason == "primary") {
                            var idx = that.ordereventsData.indexOf(that.currentItem);
                            if (idx >= 0) {
                                that.ordereventsData.splice(idx, 1);
                                idx -= 1;
                            }

                            if (idx < 0) {
                                idx = 0;
                            }

                            that.listViewControl.selection.clear();
                            if (that.ordereventsData.length > 0) {
                                that.listViewControl.selection.add(idx);
                                that.listViewControl.ensureVisible(idx);
                            }
                        }
                    });
                    break;
                }
                case 'add': {
                    this.addingItem = true;
                    this.listViewControl.selection.clear();
                    this.currentItem = WinJS.Binding.as({ "date": Date.now().toString("M/d/yyyy hh:mm:ss tt"), "comments": "" });
                    this.currentItem.__new = true;
                    WinJS.Binding.processAll(this.ordereventsDetailElement, this.currentItem);
                    that.ordereventsDetailElement.querySelector("#orderevents-comments").focus();

                    break;
                }
                default: {

                }
            }
            return WinJS.Promise.as(true);
        },

        unload: function () {
            var that = this;

            function cleanupUnload() {
                // TODO: Respond to navigations away from this page.
                that.events.splice(0, that.events.length);
                that.ordereventsData.forEach(function (orderevent) {
                    that.events.push(orderevent.backingData);
                });
            }

            if (this.addingItem == true) {
                this._buttonHandler({ label: 'save' }).then(cleanupUnload);
            }
            else {
                cleanupUnload();
            }
        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();



================================================
FILE: src/Clients/Web/pages/orders/orders.css
================================================
﻿.fullOrderDetail {
    float: left;
    margin-top: 10px;
    margin-left: 20px;
    width: 50%;
    max-height: calc(100% - 120px);
    overflow-y: auto;
    padding-right: 10px;
}

    .fullOrderDetail .editDetail {
        float: left;
        margin-top: 0px;
        margin-left: 0px;
        width: 100%;
        background: #F0F0F0;
        padding-left: 10px;
        padding-top: 10px;
        padding-bottom: 10px;
        padding-right: 0px;
    }

.orderDetail {
    margin-bottom: 10px;
}

    .orderDetail .eventsSection {
        display: flex;
        width: 100%;
        align-items: center;
    }



================================================
FILE: src/Clients/Web/pages/orders/orders.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>orders</title>

    <link href="orders.css" rel="stylesheet" />
    <link href="../quotes/quotes.css" rel="stylesheet" />
    <script src="orders.js"></script>
</head>
<body>
    <div class="orders fragment">
        <header class="page-header" aria-label="Header content" role="banner">
            <button class="page-header-home">
                <img src="../../images/FabrikamIcon.png" />
            </button>
            <h2 class="titlearea win-type-ellipsis">
                <span class="pagetitle">Orders</span>
            </h2>
        </header>
        <section class="page-section" aria-label="Main content" role="main">
            <!-- Simple template for the ListView instantiation  -->
            <div class="orderItemTemplate" data-win-control="WinJS.Binding.Template" style="display: none">
                <div class="listItem orderItem">
                    <div class="orderItem-Detail">
                        <h3 data-win-bind="textContent: __quote.dealerName"></h3>
                        <div class="list-item-entry-small" data-win-bind="textContent: __quote.customerName"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: orderDate"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: status"></div>
                        <div class="list-item-entry-small"><span data-win-bind="textContent: __quote.width"></span>W x <span data-win-bind="textContent: __quote.height"></span>H x <span data-win-bind="textContent: __quote.depth"></span>D <span data-win-bind="textContent: __quote.purpose"></span></div>
                    </div>
                </div>
            </div>

            <div class="edittools" data-win-control="Controls.EditTools" data-win-options="{  }"></div>

            <div id="orderExtrasPopup" class="pagePopup">
                <div data-win-control="WinJS.UI.ContentDialog" data-win-options="{
                     title: 'Main instruction',
                     primaryCommandText: 'Done'
                 }">
                </div>
            </div>

            <div id="listView"
                 class="itemListView orderListView"
                 data-win-control="WinJS.UI.ListView"
                 data-win-options="{
                    itemDataSource: Data.orders.dataSource,
                    itemTemplate: select('.orderItemTemplate'),
                    selectionMode: 'single',
                    tapBehavior: 'directSelect',
                    swipeBehavior: 'select',
                    layout: { type: WinJS.UI.ListLayout }
                 }">
            </div>
            <div class="fullOrderDetail">
                <div class="editDetail orderDetail">
                    <label class="inputlabel">Order Date:</label>
                    <input id="orderDate" class="textinput" type="text" data-win-bind="value: orderDate Binding.Mode.twoway" />
                    <select id="status" class="selectinput" data-win-bind="value: status Binding.Mode.twoway">
                        <option value="Created">Created</option>
                        <option value="Confirmed">Confirmed</option>
                        <option value="Started">Started</option>
                        <option value="Built">Built</option>
                        <option value="DeliveryConfirmed">Delivery Confirmed</option>
                        <option value="Shipped">Shipped</option>
                        <option value="Delivered">Delivered</option>
                        <option value="Installed">Installed</option>
                    </select>
                    <div class="eventsSection">
                        <label class="buttonlabel">Manage Events:</label>
                        <button id="manageEvents" class="edit-tools-button" type="button"></button>
                    </div>
                </div>
                <div class="editDetail quoteDetail">
                    <label class="inputlabel">Dealer:</label>
                    <input id="dealerName" class="textinput" type="text" data-win-bind="value: __quote.dealerName Binding.Mode.twoway" />
                    <label class="inputlabel">Valid Until:</label>
                    <input id="validUntil" class="textinput" type="text" data-win-bind="value: __quote.validUntil Binding.Mode.twoway" />
                    <label class="inputlabel">Customer:</label>
                    <input id="customerName" class="textinput" type="text" data-win-bind="value: __quote.customerName Binding.Mode.twoway" />
                    <label class="inputlabel">Address:</label>
                    <input id="address" class="textinput" type="text" data-win-bind="value: __quote.city Binding.Mode.twoway" />
                    <label class="inputlabel">Post Code:</label>
                    <input id="postcode" class="textinput" type="text" data-win-bind="value: __quote.postalCode Binding.Mode.twoway" />
                    <label class="inputlabel">Comments:</label>
                    <input id="comments" class="textinput" type="text" data-win-bind="value: __quote.comments Binding.Mode.twoway" />
                    <label class="inputlabel">Purpose:</label>
                    <select id="purpose" class="selectinput" data-win-bind="value: __quote.purpose Binding.Mode.twoway">
                        <option value="Refrigerator">Fridge</option>
                        <option value="Freezer">Freezer</option>
                    </select>
                    <label class="inputlabel">Description:</label>
                    <input id="purpose" class="textinput" type="text" data-win-bind="value: __quote.unitDescription Binding.Mode.twoway" />
                    <div class="extrasSection">
                        <label class="buttonlabel">Manage Extras:</label>
                        <button id="manageExtras" class="edit-tools-button" type="button"></button>
                    </div>
                    <div class="horizontalDetail">
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Width:</label>
                            <input id="width" class="textinput" type="text" data-win-bind="value: __quote.width Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Height:</label>
                            <input id="height" class="textinput" type="text" data-win-bind="value: __quote.height Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Depth:</label>
                            <input id="depth" class="textinput" type="text" data-win-bind="value: __quote.depth Binding.Mode.twoway" />
                        </div>
                    </div>
                    <div class="horizontalDetail">
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Ambient:</label>
                            <input id="width" class="textinput" type="text" data-win-bind="value: __quote.ambientAverage Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Peak:</label>
                            <input id="height" class="textinput" type="text" data-win-bind="value: __quote.ambientPeak Binding.Mode.twoway" />
                        </div>
                    </div>
                    <div class="horizontalDetail">
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Terms:</label>
                            <input id="width" class="textinput" type="text" data-win-bind="value: __quote.terms Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Total:</label>
                            <input id="height" class="textinput" type="text" data-win-bind="value: __quote.totalCost Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Discount:</label>
                            <input id="height" class="textinput" type="text" data-win-bind="value: __quote.discount Binding.Mode.twoway" />
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/pages/orders/orders.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";
    var nav = WinJS.Navigation;

    WinJS.UI.Pages.define("pages/orders/orders.html", {
        listViewControl: null,
        editTools: null,
        editButtons: null,
        currentItem: null,
        originalItem: null,
        orderDetailElement: null,
        itemTemplateHTML: null,
        bound: false,
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {
            var subpage = element.querySelector(".page-section");
            var that = this;
            var fromQuote = WinJS.Promise.as();

            if (options && options.quote) {
                showProgress("Creating Order...");
                fromQuote = Data.orderCreateFromQuote(options.quote);
            }
            else {
                showProgress("Loading...");
            }

            return WinJS.UI.processAll(element).then(function () {
                element.querySelector("#manageExtras").addEventListener("click", that._extrasHandler.bind(that));
                element.querySelector("#manageEvents").addEventListener("click", that._eventsHandler.bind(that));

                that.listViewControl = element.querySelector(".orderListView").winControl;
                that.listViewControl.itemTemplate = that._itemRenderer.bind(that);
                that.itemTemplateHTML = element.querySelector(".orderItemTemplate").innerHTML;
                that.orderDetailElement = element.querySelector(".fullOrderDetail");

                subpage.style.display = "none";
                return fromQuote.then(function (neworder) {
                    return Data.ordersGet("").then(function (orders) {
                        if (!orders) {
                            hideProgress();
                            nav.back(nav.history.backStack.length);
                            return;
                        }
                        var toolsElement = subpage.querySelector(".edittools");
                        if (!toolsElement) {
                            return;
                        }
                        that.editTools = toolsElement.winControl;
                        that.editButtons = that.editTools.getButtons();
                        that.editTools.addEventListener("click", that._buttonHandler.bind(that));
                        that.listViewControl.forceLayout();
                        that.editButtons['add'].style.display = "none";
                        //that.editButtons['edit'].firstElementChild.textContent = "⛟";
                        that.editButtons['edit'].firstElementChild.textContent = WinJS.UI.AppBarIcon["newwindow"];
                        that.editButtons['edit'].title = "Deliver";
                        addAddressHandler(that.orderDetailElement.querySelector("#address"), function (place) {
                            that.currentItem.city = place.formatted_address;
                            that.currentItem.postalCode = getPostCodeFromPlace(place)
                        });
                        addAddressHandler(that.orderDetailElement.querySelector("#postcode"), function (place) {
                            that.currentItem.city = place.formatted_address;
                            that.currentItem.postalCode = getPostCodeFromPlace(place);
                            that.quoteDetailElement.querySelector("#postcode").value = that.currentItem.postalCode;
                        });

                        that.listViewControl.onselectionchanged = function (arg) {
                            that.listViewControl.selection.getItems().then(function (items) {
                                if (items.length > 0) {
                                    that.currentItem = items[0].data;
                                    that.originalItem = clone(items[0].data.backingData);
                                    WinJS.Binding.processAll(that.orderDetailElement, items[0].data);
                                    //that.editButtons['delete'].disabled = false;
                                    //that.editButtons['edit'].disabled = false;
                                    //that.editButtons['save'].disabled = false;
                                }
                                else {
                                    that.currentItem = null;
                                    that.originalItem = null;
                                    //that.editButtons['delete'].disabled = true;
                                    //that.editButtons['edit'].disabled = true;
                                    //that.editButtons['save'].disabled = true;
                                }
                            });
                        }

                        that.listViewControl.onloadingstatechanged = function (args) {
                            if (that.listViewControl.loadingState === "viewPortLoaded") {
                                WinJS.Promise.timeout().then(function () {
                                    var selectindex = 0;
                                    if (neworder) {
                                        selectindex = Data.orderFindById(neworder.orderId);
                                    }
                                    
                                    that.listViewControl.selection.add(selectindex);
                                    that.listViewControl.onloadingstatechanged = undefined;
                                });
                            }
                        }
                        hideProgress();
                        subpage.style.display = "";
                        WinJS.UI.Animation.enterContent(subpage);
                    });
                });
            });
        },

        _itemRenderer: function (itemPromise, recycled) {
            var that = this;
            return itemPromise.then(function (currentItem) {
                if (!that) {
                    return document.createElement("div");
                }
                var data = currentItem.data;
                return Data.quoteGetById(data.quoteId).then(function (quote) {
                    data.__quote = quote;

                    var boundTemplate = document.createElement("div");
                    boundTemplate.className = "win-template";
                    boundTemplate.innerHTML = that.itemTemplateHTML;

                    return WinJS.Binding.processAll(boundTemplate, data).then(function () {
                        return boundTemplate;
                    });
                });
            });
        },

        _extrasHandler: function (args) {
            popup("orderExtrasPopup", "Manage Extras", "pages/extras/extras.html", this.currentItem.__quote);
        },
        _eventsHandler: function (args) {
            popup("orderExtrasPopup", "Manage Events", "pages/orderevents/orderevents.html", this.currentItem);
        },
        _buttonHandler: function (args) {
            if (!args.label || (this.currentItem == null && args.label != 'add')) {
                return;
            }
            var that = this;

            switch (args.label) {
                case 'save': {
                    Data.orderSave(this.currentItem, this.originalItem).then(function (saved) {
                        if (saved) {
                            var index = Data.orders.indexOf(saved);
                            that.listViewControl.selection.clear();
                            that.listViewControl.selection.add(index);
                            that.listViewControl.ensureVisible(index);
                        }
                    });
                    break;
                }
                case 'edit': {
                    nav.navigate("pages/deliveries/deliveries.html", { order: that.currentItem });
                    break;
                }
                case 'delete': {
                    confirm("Delete Order", "Are you sure that you'd like to delete this order?", "Yes", "No").then(function (result) {
                        if (result.reason == "primary") {
                            var idx = Data.orders.indexOf(that.currentItem) - 1;
                            if (idx < 0) {
                                idx = 0;
                            }
                            Data.orderDelete(that.currentItem).then(function (deleted) {
                                that.listViewControl.selection.clear();
                                if (Data.orders.length > 0) {
                                    that.listViewControl.selection.add(idx);
                                    that.listViewControl.ensureVisible(idx);
                                }
                            });
                        }
                    });
                    break;
                }
                case 'add': {
                    this.listViewControl.selection.clear();
                    this.currentItem = Data.orderCreate();
                    this.originalItem = null;
                    WinJS.Binding.processAll(this.orderDetailElement, this.currentItem);
                    that.orderDetailElement.querySelector("#dealerName").focus();

                    break;
                }
                default: {

                }
            }
        },

        unload: function () {

        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();



================================================
FILE: src/Clients/Web/pages/quotes/quotes.css
================================================
﻿.quoteDetail {
}

    .quoteDetail .extrasSection {
        display: flex;
        width: 100%;
        align-items: center;
    }



================================================
FILE: src/Clients/Web/pages/quotes/quotes.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>quotes</title>

    <link href="quotes.css" rel="stylesheet" />
    <script src="quotes.js"></script>
</head>
<body>
    <div class="quotes fragment">
        <header class="page-header" aria-label="Header content" role="banner">
            <button class="page-header-home">
                <img src="../../images/FabrikamIcon.png" />
            </button>
            <h2 class="titlearea win-type-ellipsis">
                <span class="pagetitle">Quotes</span>
            </h2>
        </header>
        <section class="page-section" aria-label="Main content" role="main">
            <!-- Simple template for the ListView instantiation  -->
            <div class="quoteItemTemplate" data-win-control="WinJS.Binding.Template" style="display: none">
                <div class="listItem quoteItem">
                    <div class="quoteItem-Detail">
                        <h3 data-win-bind="textContent: dealerName"></h3>
                        <div class="list-item-entry-small" data-win-bind="textContent: validUntil"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: customerName"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: purpose"></div>
                        <div class="list-item-entry-small"><span data-win-bind="textContent: width"></span>W x <span data-win-bind="textContent: height"></span>H x <span data-win-bind="textContent: depth"></span>D <span data-win-bind="textContent: purpose"></span></div>
                    </div>
                </div>
            </div>

            <div class="edittools" data-win-control="Controls.EditTools" data-win-options="{  }"></div>

            <div id="quoteExtrasPopup" class="pagePopup">
                <div data-win-control="WinJS.UI.ContentDialog" data-win-options="{
                     title: 'Main instruction',
                     primaryCommandText: 'Done'
                 }">
                </div>
            </div>

            <div id="listView"
                 class="itemListView quoteListView"
                 data-win-control="WinJS.UI.ListView"
                 data-win-options="{
                    itemDataSource: Data.quotes.dataSource,
                    itemTemplate: select('.quoteItemTemplate'),
                    selectionMode: 'single',
                    tapBehavior: 'directSelect',
                    swipeBehavior: 'select',
                    layout: { type: WinJS.UI.ListLayout }
                 }">
            </div>

            <div class="editDetail quoteDetail">
                <label class="inputlabel">Dealer:</label>
                <input id="dealerName" class="textinput" type="text" data-win-bind="value: dealerName Binding.Mode.twoway" />
                <label class="inputlabel">Valid Until:</label>
                <input id="validUntil" class="textinput" type="text" data-win-bind="value: validUntil Binding.Mode.twoway" />
                <label class="inputlabel">Customer:</label>
                <input id="customerName" class="textinput" type="text" data-win-bind="value: customerName Binding.Mode.twoway" />
                <label class="inputlabel">Address:</label>
                <input id="address" class="textinput" type="text" data-win-bind="value: city Binding.Mode.twoway" />
                <label class="inputlabel">Post Code:</label>
                <input id="postcode" class="textinput" type="text" data-win-bind="value: postalCode Binding.Mode.twoway" />
                <label class="inputlabel">Comments:</label>
                <input id="comments" class="textinput" type="text" data-win-bind="value: comments Binding.Mode.twoway" />
                <label class="inputlabel">Purpose:</label>
                <select id="purpose" class="selectinput" data-win-bind="value: purpose Binding.Mode.twoway">
                    <option value="Refrigerator">Fridge</option>
                    <option value="Freezer">Freezer</option>
                </select>
                <label class="inputlabel">Description:</label>
                <input id="purpose" class="textinput" type="text" data-win-bind="value: unitDescription Binding.Mode.twoway" />
                <div class="extrasSection">
                    <label class="buttonlabel">Manage Extras:</label>
                    <button id="manageExtras" class="edit-tools-button" type="button"></button>
                </div>
                <div class="horizontalDetail">
                    <div class="horizontalDetailCol">
                        <label class="inputlabel">Width:</label>
                        <input id="width" class="textinput" type="text" data-win-bind="value: width Binding.Mode.twoway" />
                    </div>
                    <div class="horizontalDetailCol">
                        <label class="inputlabel">Height:</label>
                        <input id="height" class="textinput" type="text" data-win-bind="value: height Binding.Mode.twoway" />
                    </div>
                    <div class="horizontalDetailCol">
                        <label class="inputlabel">Depth:</label>
                        <input id="depth" class="textinput" type="text" data-win-bind="value: depth Binding.Mode.twoway" />
                    </div>
                </div>
                <div class="horizontalDetail">
                    <div class="horizontalDetailCol">
                        <label class="inputlabel">Ambient:</label>
                        <input id="width" class="textinput" type="text" data-win-bind="value: ambientAverage Binding.Mode.twoway" />
                    </div>
                    <div class="horizontalDetailCol">
                        <label class="inputlabel">Peak:</label>
                        <input id="height" class="textinput" type="text" data-win-bind="value: ambientPeak Binding.Mode.twoway" />
                    </div>
                </div>
                <div class="horizontalDetail">
                    <div class="horizontalDetailCol">
                        <label class="inputlabel">Terms:</label>
                        <input id="width" class="textinput" type="text" data-win-bind="value: terms Binding.Mode.twoway" />
                    </div>
                    <div class="horizontalDetailCol">
                        <label class="inputlabel">Total:</label>
                        <input id="height" class="textinput" type="text" data-win-bind="value: totalCost Binding.Mode.twoway" />
                    </div>
                    <div class="horizontalDetailCol">
                        <label class="inputlabel">Discount:</label>
                        <input id="height" class="textinput" type="text" data-win-bind="value: discount Binding.Mode.twoway" />
                    </div>
                </div>
            </div>
        </section>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/pages/quotes/quotes.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";
    var nav = WinJS.Navigation;

    WinJS.UI.Pages.define("pages/quotes/quotes.html", {
        listViewControl: null,
        editTools: null,
        editButtons: null,
        currentItem: null,
        quoteDetailElement: null,
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {
            var subpage = element.querySelector(".page-section");
            var that = this;

            return WinJS.UI.processAll(element).then(function () {
                element.querySelector("#manageExtras").addEventListener("click", that._extrasHandler.bind(that));

                that.listViewControl = element.querySelector(".quoteListView").winControl;
                that.quoteDetailElement = element.querySelector(".quoteDetail");
                subpage.style.display = "none";
                showProgress("Loading...");
                return Data.quotesGet("").then(function (quotes) {
                    if (!quotes) {
                        hideProgress();
                        nav.back(nav.history.backStack.length);
                        return;
                    }
                    var toolsElement = subpage.querySelector(".edittools");
                    if (!toolsElement) {
                        return;
                    }
                    that.editTools = toolsElement.winControl;
                    that.editButtons = that.editTools.getButtons();
                    that.editTools.addEventListener("click", that._buttonHandler.bind(that));
                    that.listViewControl.forceLayout();

                    that.editButtons['add'].disabled = false;
                    that.editButtons['edit'].style.display = "";
                    that.editButtons['edit'].firstElementChild.textContent = WinJS.UI.AppBarIcon["newwindow"];

                    addAddressHandler(that.quoteDetailElement.querySelector("#address"), function (place) {
                        that.currentItem.city = place.formatted_address;
                        that.currentItem.postalCode = getPostCodeFromPlace(place)
                    });
                    addAddressHandler(that.quoteDetailElement.querySelector("#postcode"), function (place) {
                        that.currentItem.city = place.formatted_address;
                        that.currentItem.postalCode = getPostCodeFromPlace(place);
                        that.quoteDetailElement.querySelector("#postcode").value = that.currentItem.postalCode;
                    });
                    that.listViewControl.onselectionchanged = function (arg) {
                        that.listViewControl.selection.getItems().then(function (items) {
                            if (items.length > 0) {
                                that.currentItem = items[0].data;
                                WinJS.Binding.processAll(that.quoteDetailElement, items[0].data);
                                //that.editButtons['delete'].disabled = false;
                                //that.editButtons['edit'].disabled = false;
                                //that.editButtons['save'].disabled = false;
                            }
                            else {
                                that.currentItem = null;
                                //that.editButtons['delete'].disabled = true;
                                //that.editButtons['edit'].disabled = true;
                                //that.editButtons['save'].disabled = true;
                            }
                        });
                    }
                    that.listViewControl.selection.add(0);
                    hideProgress();
                    subpage.style.display = "";

                    WinJS.UI.Animation.enterContent(subpage);
                });
            });
        },
        _extrasHandler: function (args) {
            popup("quoteExtrasPopup", "Manage Extras", "pages/extras/extras.html", this.currentItem);
        },
        _buttonHandler: function (args) {
            if (!args.label || (this.currentItem == null && args.label != 'add')) {
                return;
            }
            var that = this;

            switch (args.label) {
                case 'save': {
                    Data.quoteSave(this.currentItem).then(function (saved) {
                        if (saved) {
                            var index = Data.quotes.indexOf(saved);
                            that.listViewControl.selection.clear();
                            that.listViewControl.selection.add(index);
                            that.listViewControl.ensureVisible(index);
                        }
                    });
                    break;
                }
                case 'edit': {
                    nav.navigate("pages/orders/orders.html", { quote: that.currentItem });
                    break;
                }
                case 'delete': {
                    confirm("Delete Dealer", "Are you sure that you'd like to delete this quote?", "Yes", "No").then(function (result) {
                        if (result.reason == "primary") {
                            var idx = Data.quotes.indexOf(that.currentItem) - 1;
                            if (idx < 0) {
                                idx = 0;
                            }
                            Data.quoteDelete(that.currentItem).then(function (deleted) {
                                that.listViewControl.selection.clear();
                                if (Data.quotes.length > 0) {
                                    that.listViewControl.selection.add(idx);
                                    that.listViewControl.ensureVisible(idx);
                                }
                            });
                        }
                    });
                    break;
                }
                case 'add': {
                    this.listViewControl.selection.clear();
                    this.currentItem = Data.quoteCreate();
                    WinJS.Binding.processAll(this.quoteDetailElement, this.currentItem);
                    that.quoteDetailElement.querySelector("#dealerName").focus();

                    break;
                }
                default: {

                }
            }
        },

        unload: function () {

        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();



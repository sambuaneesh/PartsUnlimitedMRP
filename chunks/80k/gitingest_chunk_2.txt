




================================================
FILE: src/Backend/OrderService/gradlew
================================================
#!/usr/bin/env bash

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn ( ) {
    echo "$*"
}

die ( ) {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
esac

# For Cygwin, ensure paths are in UNIX format before anything is touched.
if $cygwin ; then
    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
fi

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >&-
APP_HOME="`pwd -P`"
cd "$SAVED" >&-

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=$((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$args0" ;;
        (2) set -- "$args0" "$args1" ;;
        (3) set -- "$args0" "$args1" "$args2" ;;
        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
function splitJvmOpts() {
    JVM_OPTS=("$@")
}
eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"

exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"



================================================
FILE: src/Backend/OrderService/gradlew.bat
================================================
@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS=

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto init

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto init

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:init
@rem Get command-line arguments, handling Windowz variants

if not "%OS%" == "Windows_NT" goto win9xME_args
if "%@eval[2+2]" == "4" goto 4NT_args

:win9xME_args
@rem Slurp the command line arguments.
set CMD_LINE_ARGS=
set _SKIP=2

:win9xME_args_slurp
if "x%~1" == "x" goto execute

set CMD_LINE_ARGS=%*
goto execute

:4NT_args
@rem Get arguments from the 4NT Shell from JP Software
set CMD_LINE_ARGS=%$

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar

@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega



================================================
FILE: src/Backend/OrderService/removeBuild.bat
================================================
rd /S /Q build > NUL 2>&1
rd /S /Q buildSrc\build > NUL 2>&1


================================================
FILE: src/Backend/OrderService/version.properties
================================================
major = 0
minor = 1



================================================
FILE: src/Backend/OrderService/buildSrc/src/main/groovy/com/microsoft/appinsights/BuildInformationTask.groovy
================================================

package com.microsoft.appinsights

import java.text.SimpleDateFormat
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.*


class BuildInformationTask extends DefaultTask
{
    File versionFile
    @OutputFile File buildInfoFile = project.file('src/main/resources/buildinfo.properties')

    @TaskAction
    void readBuildInformation()
    {
        // Jenkins version
        def buildNumber = getPropertyOrDefault("BUILD_NUMBER", null)
        def buildId = getPropertyOrDefault("BUILD_ID", null)
        def buildUrl = getPropertyOrDefault("BUILD_URL", null)
        def buildTag = getPropertyOrDefault("BUILD_TAG", null)
        def gitCommit = getPropertyOrDefault("GIT_COMMIT", null)
        def gitUrl = getPropertyOrDefault("GIT_URL", null)
        def gitBranch = getPropertyOrDefault("GIT_BRANCH", null)

        /* VSO version
        def buildNumber = getPropertyOrDefault("BUILD_BUILDNUMBER", null)
        def buildId = getPropertyOrDefault("BUILD_BUILDID", null)
        def buildUrl = getPropertyOrDefault("BUILD_BUILDURI", null)
        def buildTag = getPropertyOrDefault("BUILD_TAG", null)
        def gitCommit = getPropertyOrDefault("BUILD_SOURCEVERSION", null)
        def gitUrl = getPropertyOrDefault("BUILD_REPOSITORY_URI", null)
        def gitBranch = getPropertyOrDefault("BUILD_SOURCEBRANCH", null)
       */

        def date = new Date()
        def formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX")

        def buildTime = formatter.format(date)

        def buildVersion = "#.#"

        if (versionFile.exists())
        {
            def versionProps = new Properties()
            versionFile.withInputStream { stream -> versionProps.load(stream) }

            def names = versionProps.stringPropertyNames();

            buildVersion =
                    ((!names.contains('major') || isNullOrEmpty(versionProps.major)) ? "#" : versionProps.major) + "."
            buildVersion += ((!names.contains('minor') || isNullOrEmpty(versionProps.minor)) ? "#" : versionProps.minor)
        }

        def resourcesDirectory = buildInfoFile.parentFile

        resourcesDirectory.mkdirs()

        if (!buildInfoFile.exists())
            buildInfoFile.createNewFile()

        buildInfoFile.withOutputStream {
            stream ->
                def writer = new OutputStreamWriter(stream).newPrintWriter()
                if (isNullOrEmpty(buildNumber))
                    writer.println("build.number: " + buildVersion + ".#")
                else
                    writer.println("build.number: " + buildVersion + "." + buildNumber)
                printIfNotEmpty(writer, "build.timestamp", buildTime)
                printIfNotEmpty(writer, "build.id", buildId)
                printIfNotEmpty(writer, "build.url", buildUrl)
                printIfNotEmpty(writer, "build.tag", buildTag)
                printIfNotEmpty(writer, "git.url", gitUrl)
                printIfNotEmpty(writer, "git.branch", gitBranch)
                printIfNotEmpty(writer, "git.commit", gitCommit)

                writer.close()
                stream.close()

                logger.quiet "Wrote build information to " + buildInfoFile.path
        }
    }

    void printIfNotEmpty(writer, prefix, str)
    {
        if (!isNullOrEmpty(str))
            writer.println(prefix + ": " + str)
    }

    Boolean isNullOrEmpty(str)
    {
        str == null || str.isEmpty()
    }

    String getPropertyOrDefault(name, defaultValue)
    {
        def result = defaultValue;
        def env = System.getenv(name)
        if (!isNullOrEmpty(env))
            result = env;
        result
    }
}



================================================
FILE: src/Backend/OrderService/buildSrc/src/main/groovy/com/microsoft/appinsights/CleanBuildInformationTask.groovy
================================================

package com.microsoft.appinsights

import java.text.SimpleDateFormat
import org.gradle.api.DefaultTask
import org.gradle.api.tasks.*


class CleanBuildInformationTask extends DefaultTask
{
    @TaskAction
    void remove()
    {
        def buildInfoFile = project.file('src/main/resources/buildinfo.properties')

        if (buildInfoFile.exists())
            buildInfoFile.delete()
    }
}



================================================
FILE: src/Backend/OrderService/gradle/wrapper/gradle-wrapper.properties
================================================
#Wed Jan 28 14:56:44 PST 2015
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=http\://services.gradle.org/distributions/gradle-2.1-bin.zip



================================================
FILE: src/Backend/OrderService/scripts/cat001.json
================================================
{"skuNumber" : "MRP-0001", "description" : "Brake Pads", "price" : 26.99, "inventory" : 10, "leadTime" : 3}



================================================
FILE: src/Backend/OrderService/scripts/cat002.json
================================================
{"skuNumber" : "MRP-0002", "description" : "Brake Calipers", "price" : 33.99, "inventory" : 10, "leadTime" : 3}



================================================
FILE: src/Backend/OrderService/scripts/cat003.json
================================================
{"skuNumber" : "MRP-0003", "description" : "Brake Calipers Guide Pin", "price" : 2.99, "inventory" : 10, "leadTime" : 3}


================================================
FILE: src/Backend/OrderService/scripts/cat004.json
================================================
{"skuNumber" : "MRP-0004", "description" : "Break Calipers Guide Pin Boot Kit", "price" : 8.99, "inventory" : 10, "leadTime" : 5}



================================================
FILE: src/Backend/OrderService/scripts/createorder.sh
================================================
#!/bin/sh
curl -i http://localhost:8080//orders?fromQuote=quote-1 -X POST
echo ""
echo ""

curl -i http://localhost:8080/orders?dealer=BigJoe
echo ""
echo ""







================================================
FILE: src/Backend/OrderService/scripts/dealer1.json
================================================
{"name":"BigJoe","contact":"John Doe","address":"123 Main Street, Redmond, WA 98052","email":"jdoe@tempuri.org", "phone":"425-555-1212"}



================================================
FILE: src/Backend/OrderService/scripts/getenv.sh
================================================
#!/bin/sh
echo ""
echo "Getting the environment"
echo ""

env


================================================
FILE: src/Backend/OrderService/scripts/quote1.json
================================================
{"customerName":"The Little Inn by the Bay",
  "dealerName":"BigJoe",
  "comments":"Here is your quote for our top-of-the-line fridge unit.",
  "terms":"60 days",
  "validUntil":"12/1/14",
  "unitDescription":"CoolnessExtreme",
  "additionalItems":[
    {"skuNumber":"ACC-0001", "shouldPreInstall":false,"amount":100.0},
    {"skuNumber":"ACC-0002", "shouldPreInstall":false,"amount":2.0}
  ],
  "unitCost":12000.0,
  "totalCost":18050.0,
  "discount":1500.0,
  "height":2.5,
  "width":5.0,
  "depth":8.0,
  "unit":"meters",
  "purpose":"Refrigerator",
  "ambientPeak":25.0,
  "ambientAverage":21.0,
  "buildOnSite":true,
  "city":"Wellfleet",
  "postalCode":"02667",
  "state":"MA"}



================================================
FILE: src/Backend/OrderService/scripts/quote2.json
================================================
{"customerName":"The Little Inn by the Bay",
  "dealerName":"BigJoe",
  "comments":"Here is your quote for our top-of-the-line fridge unit.",
  "terms":"60 days",
  "validUntil":"12/1/14",
  "unitDescription":"CoolnessExtreme",
  "additionalItems":[
    {"skuNumber":"ACC-0001", "shouldPreInstall":false,"amount":150.0},
    {"skuNumber":"ACC-0003", "shouldPreInstall":false,"amount":1.0},
    {"skuNumber":"ACC-0004", "shouldPreInstall":false,"amount":50.0}
  ],
  "unitCost":12000.0,
  "totalCost":18050.0,
  "discount":1500.0,
  "height":2.5,
  "width":5.0,
  "depth":8.0,
  "unit":"meters",
  "purpose":"Refrigerator",
  "ambientPeak":25.0,
  "ambientAverage":21.0,
  "buildOnSite":true,
  "city":"Wellfleet",
  "postalCode":"02667",
  "state":"MA"}



================================================
FILE: src/Backend/OrderService/scripts/schema.psql
================================================
DROP DATABASE Fabrikant;

DROP TABLE ShipmentEventInfo;
DROP TABLE ShipmentRecords;
DROP TABLE DeliveryAddress;
DROP TABLE PhoneInfo;

DROP TABLE OrderEvents;
DROP TABLE Orders;
DROP TABLE QuoteAdditionalItemRecord;
DROP TABLE Quotes;
DROP TABLE CatalogItem;
DROP TABLE Dealers;

CREATE DATABASE Fabrikant;

CREATE TABLE CatalogItems
(
  sku_number VARCHAR(32) PRIMARY KEY,
  description VARCHAR(128),
  price  NUMERIC(8,2)
);

CREATE TABLE Dealers
(
  name VARCHAR(50) PRIMARY KEY,
  contact VARCHAR(50) NOT NULL,
  address VARCHAR(128) NOT NULL,
  email VARCHAR(128) NOT NULL,
  phone VARCHAR(16) NOT NULL
);

CREATE TABLE Quotes
(
  quote_id varchar(64) primary key,

  valid_until varchar(32),

  customer_name varchar(64),
  dealer_name varchar(50),

  total_cost  NUMERIC(8,2),
  discount  NUMERIC(8,2),

  city varchar(32),
  postal_code varchar(16),
  state char(2),

  foreign key (dealer_name) references Dealers(name)
);

CREATE TABLE QuoteAdditionalItemRecord
(
  id serial PRIMARY KEY,

  quote_id varchar(64),
  sku_number VARCHAR(32),

  amount numeric(5,2),

  foreign key (quote_id) references Quotes,
  foreign key (sku_number) references CatalogItems
);

create table Orders
(
  order_id varchar(80) primary key,
  quote_id varchar(64),
  order_date varchar(32),
  status varchar(16),

  foreign key (quote_id) references Quotes(quote_id)
);

create table OrderEvents
(
  id serial primary key,

  order_id varchar(80),
  order_date varchar(32),
  comments varchar(128),

  foreign key (order_id) references Orders(order_id)
);

create table PhoneInfo
(
  phone VARCHAR(16) PRIMARY KEY,
  kind varchar(16)
);

create table DeliveryAddress
(
  id serial primary key,
  street varchar(128),
  city varchar(32),
  state char(2),
  postal_code varchar(16)
);

create table ShipmentRecords
(
  order_id varchar(80) primary key,

  delivery_date varchar(32),
  delivery_address integer,
  contact_name varchar(64),
  primary_phone varchar(16),
  alternate_phone varchar(16),

  foreign key (order_id) references Orders(order_id),
  foreign key (delivery_address) references DeliveryAddress(id),
  foreign key (primary_phone) references PhoneInfo(phone),
  foreign key (alternate_phone) references PhoneInfo(phone)
);

create table ShipmentEventInfo
(
  id serial primary key,
  order_id varchar(80),
  date varchar(32),
  comments varchar(128),

  foreign key (order_id) references Orders(order_id)
);



================================================
FILE: src/Backend/OrderService/scripts/setup.sh
================================================
#!/bin/sh
curl -i http://localhost:8080/dealers -X POST -H "Content-Type: application/json" -d @dealer1.json
echo ""
echo ""
curl -i http://localhost:8080/catalog -X POST -H "Content-Type: application/json" -d @cat001.json
echo ""
echo ""
curl -i http://localhost:8080/catalog -X POST -H "Content-Type: application/json" -d @cat002.json
echo ""
echo ""
curl -i http://localhost:8080/catalog -X POST -H "Content-Type: application/json" -d @cat003.json
echo ""
echo ""
curl -i http://localhost:8080/catalog -X POST -H "Content-Type: application/json" -d @cat004.json
echo ""
echo ""

curl -i http://localhost:8080/dealers
echo ""
echo ""
curl -i http://localhost:8080/catalog
echo ""
echo ""

curl -i http://localhost:8080/quotes -X POST -H "Content-Type: application/json" -d @quote1.json
echo ""
echo ""




================================================
FILE: src/Backend/OrderService/scripts/setupdocker.sh
================================================
#!/bin/sh
curl -i http://192.168.59.103:8080/ordering-0.1.0/dealers -X POST -H "Content-Type: application/json" -d @dealer1.json
echo ""
echo ""
curl -i http://192.168.59.103:8080/ordering-0.1.0/catalog -X POST -H "Content-Type: application/json" -d @cat001.json
echo ""
echo ""
curl -i http://192.168.59.103:8080/ordering-0.1.0/catalog -X POST -H "Content-Type: application/json" -d @cat002.json
echo ""
echo ""
curl -i http://192.168.59.103:8080/ordering-0.1.0/catalog -X POST -H "Content-Type: application/json" -d @cat003.json
echo ""
echo ""
curl -i http://192.168.59.103:8080/ordering-0.1.0/catalog -X POST -H "Content-Type: application/json" -d @cat004.json
echo ""
echo ""

curl -i http://192.168.59.103:8080/ordering-0.1.0/dealers
echo ""
echo ""
curl -i http://192.168.59.103:8080/ordering-0.1.0/catalog
echo ""
echo ""

curl -i http://192.168.59.103:8080/ordering-0.1.0/quotes -X POST -H "Content-Type: application/json" -d @quote1.json
echo ""
echo ""




================================================
FILE: src/Backend/OrderService/scripts/update.sh
================================================
#!/bin/sh
curl -i http://localhost:8080/quotes/quote-1 -X PUT -H "Content-Type: application/json" -d @quote2.json
echo ""
echo ""






================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/AppInsightsFilter.java
================================================
package smpl.ordering;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Date;

import com.microsoft.applicationinsights.TelemetryClient;
import com.microsoft.applicationinsights.telemetry.ExceptionHandledAt;
import com.microsoft.applicationinsights.telemetry.ExceptionTelemetry;
import com.microsoft.applicationinsights.telemetry.Duration;
import com.microsoft.applicationinsights.telemetry.RequestTelemetry;
import com.microsoft.applicationinsights.telemetry.TelemetryContext;

import org.springframework.stereotype.Component;

@Component
public class AppInsightsFilter implements Filter
{
    @Override
    public void init(FilterConfig filterConfig) throws ServletException
    {
    }

    @Override
    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException
    {
        TelemetryClient client = Utility.getTelemetryClient();

        if (client != null && client.getContext() != null && !Utility.isNullOrEmpty(client.getContext().getInstrumentationKey())) // && !client.isDisabled())
        {
            Date startTime = new Date();

            HttpServletRequest request = (HttpServletRequest) req;
            String method = request.getMethod();
            String rURI = request.getRequestURI();
            String scheme = request.getScheme();
            String host = request.getHeader("Host");
            String query = request.getQueryString();
            String session = request.getSession().getId();
            String name = request.getServletPath();

            RequestTelemetry telemetry = new RequestTelemetry(String.format("%s %s", method, rURI), startTime, 0L, "200", false);
            telemetry.setHttpMethod(method);
            telemetry.setTimestamp(startTime); // Doesn't work right now.
            telemetry.setName(name);

            if (!Utility.isNullOrEmpty(query))
            {
                telemetry.setUrl(String.format("%s://%s%s?%s", scheme, host, rURI, query));
            }
            else
            {
                telemetry.setUrl(String.format("%s://%s%s", scheme, host, rURI));
            }

            TelemetryContext ctx = client.getContext();

            if (!Utility.isNullOrEmpty(session))
            {
                ctx.getSession().setId(session);
            }

            ctx.getOperation().setId(telemetry.getId());
            ctx.getOperation().setName(telemetry.getName());

            try
            {
                chain.doFilter(req, res);

                Date endTime = new Date();

                HttpServletResponse response = (HttpServletResponse) res;

				Duration duration = new Duration(endTime.getTime() - startTime.getTime());
                telemetry.setDuration(duration);
                telemetry.setResponseCode(((Integer) response.getStatus()).toString());

                client.track(telemetry);

                // Clear the operation id.
                ctx.getOperation().setId(null);
                ctx.getOperation().setName(null);
            }
            catch (Exception exc)
            {
                Date endTime = new Date();

                ExceptionTelemetry ext = new ExceptionTelemetry(exc);
                ext.setExceptionHandledAt(ExceptionHandledAt.Platform);
                client.track(ext);

				Duration duration = new Duration(endTime.getTime() - startTime.getTime());
                telemetry.setDuration(duration);
                telemetry.setResponseCode("500");
                telemetry.setSuccess(false);

                client.track(telemetry);

                // Clear the operation id.
                ctx.getOperation().setId(null);
                ctx.getOperation().setName(null);
                
                throw exc;
            }
        }
        else
        {
            chain.doFilter(req, res);
        }
    }

    @Override
    public void destroy()
    {

    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/BadRequestException.java
================================================
package smpl.ordering;

/**
 * Communicating a bad REST request from a called API to the controller, which should use
 * it to create a BAD_REQUEST HTTP response.
 */
public class BadRequestException
        extends Exception
{
    public BadRequestException(String message)
    {
        super(message);
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/ConflictingRequestException.java
================================================
package smpl.ordering;

/**
 * Communicating a conflicting REST request from a called API to the controller, which should use
 * it to create a CONFLICT HTTP response.
 */
public class ConflictingRequestException
        extends BadRequestException
{
    public ConflictingRequestException(String message)
    {
        super(message);
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/MongoDBProperties.java
================================================
package smpl.ordering;

import org.springframework.boot.context.properties.ConfigurationProperties;

/**
 * Holds configuration properties pertaining to the MongoDB connection.
 */
@ConfigurationProperties(prefix = "mongodb")
public class MongoDBProperties
{
    private String host = "localhost";
    private String database = "ordering";

    public String getHost()
    {
        return host;
    }

    public void setHost(String host)
    {
        this.host = host;
    }

    public String getDatabase()
    {
        return database;
    }

    public void setDatabase(String database)
    {
        this.database = database;
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/OrderingConfiguration.java
================================================
package smpl.ordering;

import com.microsoft.applicationinsights.TelemetryClient;
import com.microsoft.applicationinsights.TelemetryConfiguration;
import com.mongodb.MongoClient;
import com.mongodb.MongoClientOptions;
import com.mongodb.ServerAddress;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.mongodb.core.MongoTemplate;
import smpl.ordering.repositories.RepositoryFactory;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("ALL")
@Configuration
@ComponentScan
@EnableAutoConfiguration
@ConditionalOnClass({MongoDBProperties.class, OrderingServiceProperties.class})
@EnableConfigurationProperties({MongoDBProperties.class, OrderingServiceProperties.class})
public class OrderingConfiguration
        implements ApplicationContextAware
{
    public static void main(String[] args)
    {
        SpringApplication app = new SpringApplication(OrderingConfiguration.class);
        app.setLogStartupInfo(false);
        app.run(args);
    }

    public OrderingConfiguration()
    {
        t_ambientTelemetryClient = new ThreadLocal<>();
    }

    public
    @Bean
    MongoTemplate mongoTemplate() throws Exception
    {
        MongoClient client;
        MongoClientOptions.Builder options = MongoClientOptions.builder();
        options.socketKeepAlive(false);

        String mongoHost = mongoDBProperties.getHost();
        String mongoPort = System.getenv("MONGO_PORT"); // Anticipating use within a docker container.

        if (!Utility.isNullOrEmpty(mongoPort))
        {
            URL portUrl = new URL(mongoPort.replace("tcp:", "http:"));
            mongoHost = portUrl.getHost();
        }

        String mongoDB = mongoDBProperties.getDatabase();

        if (mongoDB != null && !mongoDB.isEmpty() && mongoHost != null && !mongoHost.isEmpty())
        {
            List<ServerAddress> hosts = new ArrayList<>();
            for (String host : mongoHost.split(","))
            {
                hosts.add(new ServerAddress(host));
            }
            client = new MongoClient(hosts, options.build());

        }
        else
        {
            client = new MongoClient();
        }

        return new MongoTemplate(client, mongoDB);
    }

    public
    @Bean
    RepositoryFactory repositoryFactory()
    {
        RepositoryFactory.reset(orderingServiceProperties.getStorage());
        return RepositoryFactory.getFactory();
    }

    public
    @Bean
    OrderingServiceProperties orderingServiceProperties()
    {
        return orderingServiceProperties;
    }

    public
    @Bean
    TelemetryClient getTelemetryClient()
    {
        if (TelemetryConfiguration.getActive() == null)
        {
            return null;
        }

        //TelemetryConfiguration.getActive().getChannel().setDeveloperMode(true);

        TelemetryClient client = t_ambientTelemetryClient.get();
        if (client == null)
        {
            TelemetryConfiguration config = TelemetryConfiguration.getActive();
            String iKey = orderingServiceProperties.getInstrumentationKey();

            if (!Utility.isNullOrEmpty(iKey))
                config.setInstrumentationKey(iKey);

            t_ambientTelemetryClient.set(new TelemetryClient(config));
        }

        return t_ambientTelemetryClient.get();
    }

    @Autowired
    private OrderingServiceProperties orderingServiceProperties;

    @SuppressWarnings("SpringJavaAutowiringInspection")
    @Autowired
    private MongoDBProperties mongoDBProperties;

    private static ApplicationContext applicationContext;

    private static ThreadLocal<TelemetryClient> t_ambientTelemetryClient;

    @Override
    public void setApplicationContext(ApplicationContext context) throws BeansException
    {
        applicationContext = context;
    }

    public static ApplicationContext getApplicationContext()
    {
        return applicationContext;
    }

}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/OrderingInitializer.java
================================================
package smpl.ordering;

import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.context.web.SpringBootServletInitializer;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;

/**
 * This is the application starting point when the application is deployed in Tomcat on a server.
 */
public class OrderingInitializer
        extends SpringBootServletInitializer
{
    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder application)
    {
        return application.sources(OrderingConfiguration.class);
    }

    @Override
    public void onStartup(ServletContext servletContext) throws ServletException
    {
        super.onStartup(servletContext);

        if (servletContext != null)
        {
            String path = servletContext.getContextPath();
            if (path != null)
            {
                s_applicationPath = path;
            }
        }
    }

    public static String getApplicationPath()
    {
        return s_applicationPath;
    }

    private static String s_applicationPath = "";
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/OrderingServiceProperties.java
================================================
package smpl.ordering;

import org.springframework.boot.context.properties.ConfigurationProperties;

/**
 * Holds general service configuration properties.
 */
@ConfigurationProperties(prefix = "ordering")
public class OrderingServiceProperties
{
    private String storage = "memory";
    private String pingMessage = "The ordering service is available";
    private String validationMessage = "Version unknown";
    private String instrumentationKey = "";

    public String getStorage()
    {
        return storage;
    }

    public void setStorage(String storage)
    {
        this.storage = storage;
    }

    public String getValidationMessage()
    {
        return validationMessage;
    }

    public void setValidationMessage(String validationMessage)
    {
        this.validationMessage = validationMessage;
    }

    public String getPingMessage()
    {
        return pingMessage;
    }

    public void setPingMessage(String message)
    {
        this.pingMessage = message;
    }

    public String getInstrumentationKey()
    {
        return instrumentationKey;
    }

    public void setInstrumentationKey(String instrumentationKey)
    {
        this.instrumentationKey = instrumentationKey;
    }

}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/PostgresqlProperties.java
================================================
package smpl.ordering;

import org.springframework.boot.context.properties.ConfigurationProperties;

/**
 * Holds configuration properties pertaining to the PostgreSQL connection.
 */
@ConfigurationProperties(prefix = "postgresql")
public class PostgresqlProperties
{
    private String username;
    private String password;
    private String driverClass;
    private String url;

    public String getUsername()
    {
        return username;
    }

    public void setUsername(String username)
    {
        this.username = username;
    }

    public String getPassword()
    {
        return password;
    }

    public void setPassword(String password)
    {
        this.password = password;
    }

    public String getDriverClass()
    {
        return driverClass;
    }

    public void setDriverClass(String driverClass)
    {
        this.driverClass = driverClass;
    }

    public String getUrl()
    {
        return url;
    }

    public void setUrl(String url)
    {
        this.url = url;
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/PropertyHelper.java
================================================
package smpl.ordering;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

/**
 * Helper class for getting data out of the 'application.properties' file found on the
 * class path.
 */
public class PropertyHelper
{
    public static Properties getPropValues(String propFileName) throws IOException
    {

        Properties props = new Properties();

        InputStream inputStream = PropertyHelper.class.getClassLoader().getResourceAsStream(propFileName);
        props.load(inputStream);
        if (inputStream == null)
        {
            throw new FileNotFoundException("property file '" + propFileName + "' not found in the classpath");
        }

        return props;
    }

    public static Properties getProperties()
    {
        return s_props;
    }

    static
    {
        try
        {
            s_props = getPropValues("application.properties");
        }
        catch (IOException e)
        {
            s_props = new Properties();
        }
    }


    private static Properties s_props;
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/SimpleCORSFilter.java
================================================
package smpl.ordering;

import java.io.IOException;
import java.util.Enumeration;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Component;

@Component
public class SimpleCORSFilter implements Filter
{

    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException
    {
        HttpServletResponse response = (HttpServletResponse) res;
        response.setHeader("Access-Control-Allow-Origin", "*");
        response.setHeader("Access-Control-Allow-Methods", "PUT, POST, GET, OPTIONS, DELETE");
        response.setHeader("Access-Control-Max-Age", "1");
        response.setHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Pragma, Cache-Control, If-Modified-Since");

        chain.doFilter(req, res);
    }

    public void init(FilterConfig filterConfig)
    {
    }

    public void destroy()
    {
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/TestPath.java
================================================
package smpl.ordering;

/**
 * Interface for unit test hooks into various backend components.
 */
public interface TestPath
{
    public void reset();
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/Utility.java
================================================
package smpl.ordering;

import com.microsoft.applicationinsights.TelemetryClient;
import org.springframework.context.ApplicationContext;

public class Utility
{
    public static int validateStringField(String field, String fieldName, int count, StringBuilder errors)
    {
        if (isNullOrEmpty(field))
        {
            if (count == 0)
            {
                errors.append(String.format("\"Empty %s field\"", fieldName));
            }
            else
            {
                errors.append(String.format(",\"Empty %s field\"", fieldName));
            }
            count += 1;
        }
        return count;
    }

    public static boolean isNullOrEmpty(String str)
    {
        return str == null || str.isEmpty();
    }

    public static TelemetryClient getTelemetryClient()
    {
        ApplicationContext ctx = OrderingConfiguration.getApplicationContext();
        if (ctx == null) return null;
        return ctx.getBean(TelemetryClient.class);
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/controllers/CatalogController.java
================================================
package smpl.ordering.controllers;

import com.microsoft.applicationinsights.TelemetryClient;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import smpl.ordering.OrderingInitializer;
import smpl.ordering.Utility;
import smpl.ordering.models.CatalogItem;
import smpl.ordering.repositories.CatalogItemsRepository;
import smpl.ordering.repositories.RepositoryFactory;

import java.util.List;

@Controller
@RequestMapping("/catalog")
public class CatalogController
{
    /**
     * Gets a list of available catalog item.
     *
     * @return An HttpResponse containing a list of catalog item.
     */
    @RequestMapping(method = RequestMethod.GET)
    public ResponseEntity getCatalogItems()
    {
        try
        {
            List<CatalogItem> catalog = getRepository().getCatalogItems();
            if (catalog == null || catalog.size() == 0)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<>(catalog, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            exc.printStackTrace();
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.toString(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


    /**
     * Gets a specific catalog item by its id.
     *
     * @param sku The SKU number
     * @return An HttpResponse containing an catalog item record.
     */
    @RequestMapping(method = RequestMethod.GET, value = "/{sku}")
    public ResponseEntity getCatalogItem(@PathVariable String sku)
    {
        try
        {
            CatalogItem catalogItem = getRepository().getCatalogItem(sku);
            if (catalogItem == null)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<>(catalogItem, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Adds or updates an catalog item SKU
     *
     * @param info Information about the SKU
     * @return An HTTP status code.
     */
    @RequestMapping(method = RequestMethod.POST)
    public ResponseEntity addCatalogItem(@RequestBody CatalogItem info)
    {
        String errorMsg = info.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        try
        {
            CatalogItem catalogItem = getRepository().getCatalogItem(info.getSkuNumber());
            if (catalogItem != null)
            {
                return new ResponseEntity<>("The SKU already exists", HttpStatus.CONFLICT);
            }

            boolean result = getRepository().upsertCatalogItem(info.getSkuNumber(), info, null);
            String applicationPath = OrderingInitializer.getApplicationPath();
            HttpHeaders responseHeaders = new HttpHeaders();
            responseHeaders.set("Location", applicationPath + "/catalog/" + info.getSkuNumber());
            return new ResponseEntity(responseHeaders, result ? HttpStatus.OK : HttpStatus.CREATED);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Adds or updates an CatalogItem SKU
     *
     * @param sku  The SKU number
     * @param info Information about the SKU
     * @return An HTTP status code.
     */
    @RequestMapping(method = RequestMethod.PUT, value = "/{sku}")
    public ResponseEntity upsertCatalogItem(@PathVariable String sku, @RequestBody CatalogItem info)
    {
        String errorMsg = info.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        try
        {
            CatalogItem catalogItem = getRepository().getCatalogItem(sku);
            if (catalogItem == null)
            {
                return new ResponseEntity<CatalogItem>(HttpStatus.NOT_FOUND);
            }
            boolean result = getRepository().upsertCatalogItem(sku, info, null);
            return new ResponseEntity(result ? HttpStatus.OK : HttpStatus.CREATED);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Remove an catalog item SKU from the catalog.
     *
     * @param sku The SKU number.
     * @return An HTTP status code.
     */
    @RequestMapping(method = RequestMethod.DELETE, value = "/{sku}")
    public ResponseEntity removeCatalogItem(@PathVariable String sku)
    {

        try
        {
            if (getRepository().removeCatalogItem(sku, null))
            {
                return new ResponseEntity<CatalogItem>(HttpStatus.NO_CONTENT);
            }
            else
            {
                return new ResponseEntity<CatalogItem>(HttpStatus.NOT_FOUND);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private CatalogItemsRepository getRepository()
    {
        return RepositoryFactory.getCatalogItemsRepository();
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/controllers/DealerController.java
================================================
package smpl.ordering.controllers;

import com.microsoft.applicationinsights.TelemetryClient;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import smpl.ordering.OrderingInitializer;
import smpl.ordering.Utility;
import smpl.ordering.models.DealerInfo;
import smpl.ordering.repositories.DealersRepository;
import smpl.ordering.repositories.RepositoryFactory;

import java.util.List;

@Controller
@RequestMapping("/dealers")
public class DealerController
{
    /**
     * Gets a list of available dealers.
     *
     * @return An HttpResponse containing a list of dealers.
     */
    @RequestMapping(method = RequestMethod.GET)
    public ResponseEntity getDealers()
    {
		//Fix this line in Application Performance Monitoring HOL from 1000 to 1
		int numMongoDBCalls = 100000; 
		
        try
        {
			int count = 0; 
			List<DealerInfo> dealers = getRepository().getDealers();
			
			while(count < numMongoDBCalls - 1)
			{
				dealers = getRepository().getDealers();
				count++; 
			}
            if (dealers == null || dealers.size() == 0)
            {
                return new ResponseEntity<List<DealerInfo>>(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<>(dealers, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.toString(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Gets a specific dealer by its name.
     *
     * @param name The dealer name
     * @return An HttpResponse containing a list of catalog items.
     */
    @RequestMapping(method = RequestMethod.GET, value = "/{name}")
    public ResponseEntity getDealer(@PathVariable String name)
    {
        try
        {
            DealerInfo dealer = getRepository().getDealer(name);
            if (dealer == null)
            {
                return new ResponseEntity<DealerInfo>(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<>(dealer, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.toString(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Adds a dealer contact record
     *
     * @param info Information about the dealer
     * @return An HTTP status code.
     */
    @RequestMapping(method = RequestMethod.POST)
    public ResponseEntity addDealer(@RequestBody DealerInfo info)
    {
        String errorMsg = info.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        try
        {
            DealerInfo dealer = getRepository().getDealer(info.getName());
            if (dealer != null)
            {
                return new ResponseEntity<>("Dealer already exists", HttpStatus.CONFLICT);
            }

            boolean result = getRepository().upsertDealer(info, null);
            String applicationPath = OrderingInitializer.getApplicationPath();
            HttpHeaders responseHeaders = new HttpHeaders();
            responseHeaders.set("Location", applicationPath + "/dealers/" + info.getName());
            return new ResponseEntity(responseHeaders, result ? HttpStatus.OK : HttpStatus.CREATED);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Adds a dealer contact record
     *
     * @param name The dealer name
     * @param info Information about the dealer
     * @return An HTTP status code.
     */
    @RequestMapping(method = RequestMethod.PUT, value = "/{name}")
    public ResponseEntity updateDealer(@PathVariable String name, @RequestBody DealerInfo info)
    {
        String errorMsg = info.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        try
        {
            DealerInfo dealer = getRepository().getDealer(name);
            if (dealer == null)
            {
                return new ResponseEntity<DealerInfo>(HttpStatus.NOT_FOUND);
            }

            getRepository().upsertDealer(info, null);
            return new ResponseEntity(HttpStatus.OK);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Remove an catalog item SKU from the catalog.
     *
     * @param name The dealer name.
     * @return An HTTP status code.
     */
    @RequestMapping(method = RequestMethod.DELETE, value = "/{name}")
    public ResponseEntity removeDealer(@PathVariable String name)
    {

        try
        {
            if (getRepository().removeDealer(name, null))
            {
                return new ResponseEntity<DealerInfo>(HttpStatus.NO_CONTENT);
            }
            else
            {
                return new ResponseEntity<DealerInfo>(HttpStatus.NOT_FOUND);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private static DealersRepository getRepository()
    {
        return RepositoryFactory.getDealersRepository();
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/controllers/OrderController.java
================================================
package smpl.ordering.controllers;

import com.microsoft.applicationinsights.TelemetryClient;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import smpl.ordering.BadRequestException;
import smpl.ordering.ConflictingRequestException;
import smpl.ordering.OrderingInitializer;
import smpl.ordering.Utility;
import smpl.ordering.models.*;
import smpl.ordering.repositories.OrderRepository;
import smpl.ordering.repositories.QuoteRepository;
import smpl.ordering.repositories.RepositoryFactory;

import java.text.DateFormat;
import java.util.Date;
import java.util.List;

@Controller
@RequestMapping("/orders")
public class OrderController
{
    /**
     * Gets an order identified by its id.
     *
     * @param orderId The order id
     * @return An HttpResponse containing the quote, if found.
     */
    @RequestMapping(method = RequestMethod.GET, value = "/{orderId}")
    public ResponseEntity getOrderById(@PathVariable String orderId)
    {
        try
        {
            Order o = getOrders().getOrder(orderId);
            if (o == null)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<>(o, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Gets a list of orders for a given dealer.
     *
     * @param dealer The dealer name.
     * @return An HttpResponse containing the quotes, if found.
     */
    @RequestMapping(method = RequestMethod.GET)
    public ResponseEntity getOrdersByDealerName(
            @RequestParam(value = "dealer", required = false, defaultValue = "") String dealer,
            @RequestParam(value = "status", required = false, defaultValue = "None") OrderStatus status)
    {
        try
        {
            List<Order> o;
            if (dealer.length() == 0) {
                o = getOrders().getOrdersByStatus(status);
            }
            else {
                o = getOrders().getOrdersByDealerName(dealer, status);
            }
            if (o == null || o.size() == 0)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<>(o, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Creates a new order.
     *
     * @param from The id of the quote from which this order will be created.
     * @return An HttpResponse containing the quote.
     */
    @RequestMapping(method = RequestMethod.POST)
    public ResponseEntity createOrder(@RequestParam(value = "fromQuote") String from)
    {
        try
        {
            Quote quote = getQuotes().getQuote(from);

            if (quote != null)
            {
                Order order = getOrders().createOrder(from);
                String applicationPath = OrderingInitializer.getApplicationPath();
                HttpHeaders responseHeaders = new HttpHeaders();
                responseHeaders.set("Location", applicationPath + "/orders/" + order.getOrderId());
                return new ResponseEntity<>(order, responseHeaders, HttpStatus.CREATED);
            }
            else
            {
                return new ResponseEntity<>("There is no such quote", HttpStatus.BAD_REQUEST);
            }
        }
        catch (ConflictingRequestException bre)
        {
            return new ResponseEntity<>(bre.getMessage(), HttpStatus.CONFLICT);
        }
        catch (BadRequestException bre)
        {
            return new ResponseEntity<>(bre.getMessage(), HttpStatus.BAD_REQUEST);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Creates a new order.
     *
     * @return An HttpResponse containing the quote.
     */
    @RequestMapping(method = RequestMethod.POST, value = "/{orderId}/events")
    public ResponseEntity addEvent(@PathVariable String orderId,
                                   @RequestBody OrderEventInfo info)
    {
        try
        {
            Order order = getOrders().getOrder(orderId);
            if (order != null)
            {
                DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);
                info.setDate(df.format(new Date()));
                order.addEvent(info);
                getOrders().updateOrder(order.getOrderId(), order, null);
                return new ResponseEntity(HttpStatus.CREATED);
            }
            else
            {
                return new ResponseEntity<>("There is no such order", HttpStatus.BAD_REQUEST);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Updates an order.
     *
     * @return An HttpResponse containing the quote.
     */
    @RequestMapping(method = RequestMethod.PUT, value = "/{orderId}")
    public ResponseEntity updateOrder(@PathVariable String orderId,
                                   @RequestBody Order order)
    {
        // Input data validation
        String errorMsg = order.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        try
        {
            boolean ok = getOrders().updateOrder(orderId, order, null);
            return new ResponseEntity(ok ? HttpStatus.OK : HttpStatus.NOT_FOUND);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Creates a new order.
     *
     * @return An HttpResponse containing the quote.
     */
    @RequestMapping(method = RequestMethod.PUT, value = "/{orderId}/status")
    public ResponseEntity updateStatus(@PathVariable String orderId,
                                       @RequestBody OrderUpdateInfo info)
    {
        try
        {
            if (getOrders().hasOrder(orderId))
            {
                DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);
                info.getEventInfo().setDate(df.format(new Date()));
                getOrders().updateOrder(orderId, info, null);
                return new ResponseEntity(HttpStatus.OK);
            }
            else
            {
                return new ResponseEntity<>("There is no such order", HttpStatus.BAD_REQUEST);
            }
        }
        catch (BadRequestException bre)
        {
            return new ResponseEntity<>(bre.getMessage(), HttpStatus.BAD_REQUEST);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


    /**
     * Removes an existing order from the system.
     *
     * @param orderId The order id.
     * @return An HTTP status code
     */
    @RequestMapping(method = RequestMethod.DELETE, value = "/{orderId}")
    public ResponseEntity deleteOrder(@PathVariable String orderId)
    {
        try
        {
            boolean ok = getOrders().removeOrder(orderId, null);
            return new ResponseEntity(ok ? HttpStatus.NO_CONTENT : HttpStatus.NOT_FOUND);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private QuoteRepository getQuotes()
    {
        return RepositoryFactory.getQuoteRepository();
    }

    private OrderRepository getOrders()
    {
        return RepositoryFactory.getOrderRepository();
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/controllers/PingController.java
================================================
package smpl.ordering.controllers;

import com.microsoft.applicationinsights.TelemetryClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import smpl.ordering.OrderingServiceProperties;
import smpl.ordering.PropertyHelper;
import smpl.ordering.Utility;

import java.util.Properties;

@Controller
@RequestMapping("/ping")
public class PingController
{
    @Autowired
    private OrderingServiceProperties orderingServiceProperties;

    @RequestMapping(method = RequestMethod.HEAD)
    public ResponseEntity ping()
    {
        return new ResponseEntity(HttpStatus.OK);
    }

    @RequestMapping(method = RequestMethod.GET)
    public ResponseEntity getStatus() throws Exception
    {
        try
        {
            if (orderingServiceProperties != null)
            {
                String message =
                        String.format("%s\n%s\n",
                                orderingServiceProperties.getPingMessage(),
                                orderingServiceProperties.getValidationMessage());

                if ( props == null)
                {
                    props = PropertyHelper.getPropValues("buildinfo.properties");
                }

                if (props != null && props.containsKey("build.number"))
                {
                    message += "Build number:    " + props.getProperty("build.number") + "\n";
                }
                if (props != null && props.containsKey("build.timestamp"))
                {
                    message += "Build timestamp: " + props.getProperty("build.timestamp") + "\n";
                }

                return new ResponseEntity<>(message, HttpStatus.OK);
            }
            else
            {
                return new ResponseEntity(HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.toString(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private Properties props;
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/controllers/QuoteController.java
================================================
package smpl.ordering.controllers;

import com.microsoft.applicationinsights.TelemetryClient;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import smpl.ordering.BadRequestException;
import smpl.ordering.OrderingInitializer;
import smpl.ordering.Utility;
import smpl.ordering.models.Quote;
import smpl.ordering.repositories.QuoteRepository;
import smpl.ordering.repositories.RepositoryFactory;

import java.util.List;

@Controller
@RequestMapping("/quotes")
public class QuoteController
{
    /**
     * Gets a quote identified by its id.
     *
     * @param quoteId The quote id
     * @return An HttpResponse containing the quote, if found.
     */
    @RequestMapping(method = RequestMethod.GET, value = "/{quoteId}")
    public ResponseEntity getQuoteById(@PathVariable String quoteId)
    {
        try
        {
            Quote q = getRepository().getQuote(quoteId);
            if (q == null)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<>(q, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Gets a list of quotes where the customer name contains the string 'name'
     *
     * @param name A fragment of the customer name field. Case is ignored.
     * @return An HttpResponse containing the quotes, if found.
     */
    @RequestMapping(method = RequestMethod.GET)
    public ResponseEntity getQuotesByCustomerName(@RequestParam(value = "name") String name)
    {
        try
        {
            List<Quote> q = getRepository().getQuotesByCustomerName(name);
            if (q == null || q.size() == 0)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<>(q, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Updates an existing quote with the data passed in.
     *
     * @param quoteId The quote id.
     * @param info    The client-generated quote information containing the new data.
     * @return An HttpResponse containing the quote, if found.
     */
    @RequestMapping(method = RequestMethod.PUT, value = "/{quoteId}")
    public ResponseEntity updateQuote(@PathVariable String quoteId, @RequestBody Quote info)
    {
        // Input data validation
        String errorMsg = info.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        try
        {
            boolean ok = getRepository().updateQuote(quoteId, info, null);
            return new ResponseEntity(ok ? HttpStatus.OK : HttpStatus.NOT_FOUND);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Updates a new quote from the data passed in.
     *
     * @param info The client-generated quote information containing the new quote data.
     * @return An HttpResponse containing the quote.
     */
    @RequestMapping(method = RequestMethod.POST)
    public ResponseEntity createQuote(@RequestBody Quote info)
    {
        String errorMsg = info.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        try
        {
            Quote result = getRepository().createQuote(info);
            if (result != null)
            {
                String applicationPath = OrderingInitializer.getApplicationPath();
                HttpHeaders responseHeaders = new HttpHeaders();
                responseHeaders.set("Location", applicationPath + "/quotes/" + result.getQuoteId());
                return new ResponseEntity<>(result, responseHeaders, HttpStatus.CREATED);
            }
            else
            {
                return new ResponseEntity(HttpStatus.CONFLICT);
            }
        }
        catch (BadRequestException bre)
        {
            return new ResponseEntity<>(bre.getMessage(), HttpStatus.BAD_REQUEST);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Removes an existing quote from the system.
     *
     * @param quoteId The quote id.
     * @return An HTTP status code
     */
    @RequestMapping(method = RequestMethod.DELETE, value = "/{quoteId}")
    public ResponseEntity deleteQuote(@PathVariable String quoteId)
    {
        try
        {
            boolean ok = getRepository().removeQuote(quoteId, null);
            return new ResponseEntity(ok ? HttpStatus.NO_CONTENT : HttpStatus.NOT_FOUND);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private QuoteRepository getRepository()
    {
        return RepositoryFactory.getQuoteRepository();
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/controllers/ShipmentController.java
================================================
package smpl.ordering.controllers;


import com.microsoft.applicationinsights.TelemetryClient;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import smpl.ordering.BadRequestException;
import smpl.ordering.OrderingInitializer;
import smpl.ordering.Utility;
import smpl.ordering.models.CatalogItem;
import smpl.ordering.models.Delivery;
import smpl.ordering.models.Order;
import smpl.ordering.models.Quote;
import smpl.ordering.models.OrderStatus;
import smpl.ordering.models.ShipmentEventInfo;
import smpl.ordering.models.ShipmentRecord;
import smpl.ordering.repositories.RepositoryFactory;
import smpl.ordering.repositories.ShipmentRepository;
import smpl.ordering.repositories.OrderRepository;
import smpl.ordering.repositories.QuoteRepository;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;


@Controller
@RequestMapping("/shipments")
public class ShipmentController
{
    /**
     * Gets a list of existing shipments, regardless of status
     *
     * @return An HttpResponse containing a list of shipments.
     */
    @RequestMapping(method = RequestMethod.GET)
    public ResponseEntity getShipments(
            @RequestParam(value = "status", required = false, defaultValue = "None")
            OrderStatus status)
    {
        try
        {
            List<ShipmentRecord> shipments = getShipmentRepository().getShipments(status);
            if (shipments == null || shipments.size() == 0)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<List<ShipmentRecord>>(shipments, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<String>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @RequestMapping(value = "/deliveries", method = RequestMethod.GET)
    public ResponseEntity getDeliveries()
    {
        try
        {
            List<ShipmentRecord> shipments = getShipmentRepository().getShipments(OrderStatus.DeliveryConfirmed);

            if (shipments == null || shipments.size() == 0)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            else
            {
                List<Delivery> deliveries = new ArrayList<Delivery>();
                OrderRepository orderRepository = getOrderRepository();
                QuoteRepository quoteRepository = getQuoteRepository();

                for (int n = 0; n < shipments.size(); n++) {
                    Delivery delivery = new Delivery();

                    ShipmentRecord shipment = shipments.get(n);
                    delivery.setShipmentRecord(shipment);

                    Order order = orderRepository.getOrder(shipment.getOrderId());
                    delivery.setOrder(order);

                    Quote quote = quoteRepository.getQuote(order.getQuoteId());
                    delivery.setQuote(quote);

                    deliveries.add(delivery);
                }

                return new ResponseEntity<List<Delivery>>(deliveries, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            return new ResponseEntity<String>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Gets a specific shipment by its corresponding order id.
     *
     * @param id The order id
     * @return An HttpResponse containing a shipment record.
     */
    @RequestMapping(method = RequestMethod.GET, value = "/{id}")
    public ResponseEntity getShipment(@PathVariable String id)
    {

        try
        {
            ShipmentRecord sr = getShipmentRepository().getShipmentById(id);
            if (sr == null)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            else
            {
                return new ResponseEntity<ShipmentRecord>(sr, HttpStatus.OK);
            }
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<String>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


    /**
     * Creates a shipment record
     *
     * @param info Information about the SKU
     * @return An HTTP status code.
     */
    @RequestMapping(method = RequestMethod.POST)
    public ResponseEntity createShipmentRecord(@RequestBody ShipmentRecord info)
    {
        String errorMsg = info.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<String>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        try
        {
            ShipmentRecord sr = getShipmentRepository().getShipmentById(info.getOrderId());
            if (sr != null)
            {
                return new ResponseEntity<String>("A shipment record already exists", HttpStatus.CONFLICT);
            }

            boolean result = getShipmentRepository().createShipment(info) != null;
            String applicationPath = OrderingInitializer.getApplicationPath();
            HttpHeaders responseHeaders = new HttpHeaders();
            responseHeaders.set("Location", applicationPath + "/shipments/" + info.getOrderId());
            return new ResponseEntity(responseHeaders, result ? HttpStatus.CREATED : HttpStatus.NOT_FOUND);
        }
        catch (BadRequestException bre)
        {
            return new ResponseEntity<String>(bre.getMessage(), HttpStatus.BAD_REQUEST);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<String>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Updates a shipment record
     *
     * @param id  The order id
     * @param record A shipment record
     * @return An HTTP status code.
     */
    @RequestMapping(method = RequestMethod.PUT, value = "/{id}")
    public ResponseEntity updateShipment(@PathVariable String id, @RequestBody ShipmentRecord record)
    {
        String errorMsg = record.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        if (!id.equals(record.getOrderId()))
        {
            return new ResponseEntity<>("mismatched ids", HttpStatus.BAD_REQUEST);
        }

        try
        {
            ShipmentRecord sr = getShipmentRepository().getShipmentById(id);
            if (sr == null)
            {
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }

            getShipmentRepository().updateShipment(record);
            return new ResponseEntity(HttpStatus.OK);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Updates a shipment record with a new event.
     *
     * @param id  The order id
     * @param event A shipment event record
     * @return An HTTP status code.
     */
    @RequestMapping(method = RequestMethod.POST, value = "/{id}/events")
    public ResponseEntity addEvent(@PathVariable String id, @RequestBody ShipmentEventInfo event)
    {
        String errorMsg = event.validate();
        if (errorMsg != null)
        {
            return new ResponseEntity<>(errorMsg, HttpStatus.BAD_REQUEST);
        }

        try
        {
            ShipmentRecord sr = getShipmentRepository().getShipmentById(id);
            if (sr == null)
            {
                return new ResponseEntity<ShipmentRecord>(HttpStatus.NOT_FOUND);
            }

            event.setDate(DateFormat.getDateInstance(DateFormat.SHORT).format(new Date()));

            boolean result = getShipmentRepository().addEvent(id, event);
            return new ResponseEntity(result ? HttpStatus.OK : HttpStatus.CREATED);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Removes an existing shipment from the system.
     *
     * @param orderId The order id.
     * @return An HTTP status code
     */
    @RequestMapping(method = RequestMethod.DELETE, value = "/{orderId}")
    public ResponseEntity deleteShipment(@PathVariable String orderId)
    {
        try
        {
            boolean ok = getShipmentRepository().removeShipment(orderId, null);
            return new ResponseEntity(ok ? HttpStatus.NO_CONTENT : HttpStatus.NOT_FOUND);
        }
        catch (Exception exc)
        {
            // Don't cache the client -- it's relying on thread-local storage.
            TelemetryClient client = Utility.getTelemetryClient();
            if (client != null) client.trackException(exc);
            return new ResponseEntity<>(exc.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private ShipmentRepository getShipmentRepository()
    {
        return RepositoryFactory.getShipmentRepository();
    }

    private OrderRepository getOrderRepository()
    {
        return RepositoryFactory.getOrderRepository();
    }

    private QuoteRepository getQuoteRepository()
    {
        return RepositoryFactory.getQuoteRepository();
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/CatalogItem.java
================================================
package smpl.ordering.models;

import smpl.ordering.Utility;

/**
 * Represents an catalog item item description
 */
public class CatalogItem
{
    private String skuNumber;
    private String description;
    private double price;
    private int inventory;
    private int leadTime;

    public CatalogItem()
    {
    }

    public CatalogItem(String skuNumber, String description, double price, int inventory, int leadTime)
    {
        this.skuNumber = skuNumber;
        this.description = description;
        this.price = price;
        this.inventory = inventory;
        this.leadTime = leadTime;
    }

    public CatalogItem(CatalogItem catalogItem)
    {
        this.skuNumber = catalogItem.getSkuNumber();
        this.description = catalogItem.getDescription();
        this.price = catalogItem.getPrice();
        this.inventory = catalogItem.getInventory();
        this.leadTime  = catalogItem.getLeadTime();
    }

    public String getDescription()
    {
        return description;
    }

    public void setDescription(String description)
    {
        this.description = description;
    }

    public double getPrice()
    {
        return price;
    }

    public void setPrice(double price)
    {
        this.price = price;
    }

    public String getSkuNumber()
    {
        return skuNumber;
    }

    public void setSkuNumber(String skuNumber)
    {
        this.skuNumber = skuNumber;
    }

    public int getInventory() {
        return inventory;
    }

    public void setInventory(int inventory) {
        this.inventory = inventory;
    }

    public int getLeadTime() {
        return leadTime;
    }

    public void setLeadTime(int leadTime) {
        this.leadTime = leadTime;
    }

    public String validate()
    {
        int count = 0;
        StringBuilder errors = new StringBuilder("{\"errors\": [");
        count = Utility.validateStringField(skuNumber, "SKU #", count, errors);
        count = Utility.validateStringField(description, "description", count, errors);
        errors.append("]}");

        return (count > 0) ? errors.toString() : null;
    }

}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/DealerInfo.java
================================================
package smpl.ordering.models;

import smpl.ordering.Utility;

/**
 * Represents the information stored about an individual dealer.
 */
public class DealerInfo
{
    private String name;
    private String contact;
    private String address;
    private String email;
    private String phone;

    public DealerInfo()
    {
    }

    public DealerInfo(String name)
    {
        this.name = name;
    }

    public DealerInfo(DealerInfo other)
    {
        this.name = other.name;
        this.contact = other.contact;
        this.address = other.address;
        this.email = other.email;
        this.phone = other.phone;
    }

    public String validate()
    {
        int count = 0;
        StringBuilder errors = new StringBuilder("{\"errors\": [");
        count = Utility.validateStringField(name, "name", count, errors);
        errors.append("]}");

        return (count > 0) ? errors.toString() : null;
    }

    public String getName()
    {
        return name;
    }

    public void setName(String name)
    {
        this.name = name;
    }

    public String getContact()
    {
        return contact;
    }

    public void setContact(String contact)
    {
        this.contact = contact;
    }

    public String getAddress()
    {
        return address;
    }

    public void setAddress(String address)
    {
        this.address = address;
    }

    public String getEmail()
    {
        return email;
    }

    public void setEmail(String email)
    {
        this.email = email;
    }

    public String getPhone()
    {
        return phone;
    }

    public void setPhone(String phone)
    {
        this.phone = phone;
    }
}




================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/Delivery.java
================================================
package smpl.ordering.models;

import smpl.ordering.Utility;

/**
 * Represents the aggregate information stored about delivery (Quote, Order, Shipment).
 */
public class Delivery {
    private Quote quote;
    private Order order;
    private ShipmentRecord shipmentRecord;

    public Quote getQuote() {
        return this.quote;
    }

    public void setQuote(Quote quote) {
        this.quote = quote;
    }

    public Order getOrder() {
        return this.order;
    }

    public void setOrder(Order order) {
        this.order = order;
    }

    public ShipmentRecord getShipmentRecord() {
        return this.shipmentRecord;
    }

    public void setShipmentRecord(ShipmentRecord shipmentRecord) {
        this.shipmentRecord = shipmentRecord;
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/DeliveryAddress.java
================================================
package smpl.ordering.models;

public class DeliveryAddress
{
    @SuppressWarnings("SameParameterValue")
    public DeliveryAddress(String street, String city, String state, String postalCode, String specialInstructions)
    {
        this.street = street;
        this.city = city;
        this.state = state;
        this.postalCode = postalCode;
        this.specialInstructions = specialInstructions;
    }

    public DeliveryAddress()
    {
    }

    public String getStreet()
    {
        return street;
    }

    public void setStreet(String street)
    {
        this.street = street;
    }

    public String getCity()
    {
        return city;
    }

    public void setCity(String city)
    {
        this.city = city;
    }

    public String getState()
    {
        return state;
    }

    public void setState(String state)
    {
        this.state = state;
    }

    public String getPostalCode()
    {
        return postalCode;
    }

    public void setPostalCode(String postalCode)
    {
        this.postalCode = postalCode;
    }

    public String getSpecialInstructions()
    {
        return specialInstructions;
    }

    public void setSpecialInstructions(String specialInstructions)
    {
        this.specialInstructions = specialInstructions;
    }

    public boolean validate()
    {
        return isNotEmpty(city) && isNotEmpty(postalCode);
    }

    private static boolean isNotEmpty(String str)
    {
        return str != null && !str.isEmpty();
    }

    private String street;
    private String city;
    private String state;
    private String postalCode;
    private String specialInstructions;
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/Order.java
================================================
package smpl.ordering.models;

import smpl.ordering.Utility;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents an agreed-upon order of a refrigeration or freezer room,
 * along with any catalog item, such as shelving and cooling equipment.
 */
public class Order
{
    private String orderId;
    private String quoteId;
    private String orderDate;
    private OrderStatus status;
    private List<OrderEventInfo> events;

    public String validate()
    {
        int count = 0;
        StringBuilder errors = new StringBuilder("{\"errors\": [");
        count = Utility.validateStringField(quoteId, "quoteId", count, errors);
        count = Utility.validateStringField(orderDate, "orderDate", count, errors);
        errors.append("]}");

        return (count > 0) ? errors.toString() : null;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Order order = (Order) o;

        if (!events.equals(order.events)) return false;
        if (!orderDate.equals(order.orderDate)) return false;
        return orderId.equals(order.orderId) && quoteId.equals(order.quoteId) && status == order.status;
    }

    @Override
    public int hashCode()
    {
        int result = orderId.hashCode();
        result = 31 * result + quoteId.hashCode();
        result = 31 * result + orderDate.hashCode();
        result = 31 * result + status.hashCode();
        result = 31 * result + events.hashCode();
        return result;
    }

    public Order()
    {
        events = new ArrayList();
        status = OrderStatus.None;
    }

    public String getQuoteId()
    {
        return quoteId;
    }

    public void setQuoteId(String quoteId)
    {
        this.quoteId = quoteId;
    }

    public String getOrderId()
    {
        return orderId;
    }

    public void setOrderId(String orderId)
    {
        this.orderId = orderId;
    }

    public String getOrderDate()
    {
        return orderDate;
    }

    public void setOrderDate(String orderDate)
    {
        this.orderDate = orderDate;
    }

    public OrderStatus getStatus()
    {
        return status;
    }

    public void setStatus(OrderStatus status)
    {
        this.status = status;
    }

    public List<OrderEventInfo> getEvents()
    {
        return events;
    }

    public void setEvents(List<OrderEventInfo> events)
    {
        this.events = events;
    }

    public void addEvent(OrderEventInfo event)
    {
        events.add(event);
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/OrderEventInfo.java
================================================
package smpl.ordering.models;

import java.text.DateFormat;
import java.util.Date;

/**
 * Information on order-related events (comments).
 */
public class OrderEventInfo
{
    private String date;
    private String comments;

    public OrderEventInfo()
    {
    }

    public OrderEventInfo(String comments)
    {
        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);
        this.setDate(df.format(new Date()));
        this.setComments(comments);
    }

    public OrderEventInfo(String date, String comments)
    {
        this.setDate(date);
        this.setComments(comments);
    }

    public String getComments()
    {
        return comments;
    }

    public void setComments(String comments)
    {
        this.comments = comments;
    }

    public String getDate()
    {
        return date;
    }

    public void setDate(String date)
    {
        this.date = date;
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/OrderStatus.java
================================================
package smpl.ordering.models;

/**
 * Order status enumeration
 */
public enum OrderStatus
{
    None,
    Created,
    Confirmed,
    Started,
    Built,
    DeliveryConfirmed,
    Shipped,
    Delivered,
    Installed
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/OrderUpdateInfo.java
================================================
package smpl.ordering.models;

import java.text.DateFormat;
import java.util.Date;

/**
 * Order update record
 */
@SuppressWarnings("SameParameterValue")
public class OrderUpdateInfo
{
    private OrderStatus status;
    private OrderEventInfo eventInfo;

    public OrderUpdateInfo()
    {
    }

    public OrderUpdateInfo(OrderStatus status, String comments)
    {
        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);
        this.status = status;
        this.eventInfo = new OrderEventInfo(df.format(new Date()), comments);
    }

    public OrderStatus getStatus()
    {
        return status;
    }

    public void setStatus(OrderStatus status)
    {
        this.status = status;
    }

    public OrderEventInfo getEventInfo()
    {
        return eventInfo;
    }

    public void setEventInfo(OrderEventInfo eventInfo)
    {
        this.eventInfo = eventInfo;
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/PhoneInfo.java
================================================
package smpl.ordering.models;

/**
 * Information regarding phone numbers for individuals related
 * to quotes, orders, and shipments.
 */
public class PhoneInfo
{
    public String getPhoneNumber()
    {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber)
    {
        this.phoneNumber = phoneNumber;
    }

    public String getKind()
    {
        return kind;
    }

    public void setKind(String kind)
    {
        this.kind = kind;
    }

    public PhoneInfo()
    {
    }

    public PhoneInfo(String phoneNumber, String kind)
    {
        this.phoneNumber = phoneNumber;
        this.kind = kind;
    }

    private String phoneNumber;
    private String kind;
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/Quote.java
================================================
package smpl.ordering.models;

import smpl.ordering.Utility;

import java.util.*;

/**
 * Represents quote information sent from the service to the client.
 *
 * @see smpl.ordering.models.Order
 */
public class Quote
{
    private String quoteId;
    private String validUntil;
    private String customerName;
    private String dealerName;
    private List<QuoteItemInfo> quoteItems;
    private double totalCost;
    private double discount;
    private String city;
    private String postalCode;
    private String state;

    public Quote()
    {
    }

    public Quote(Quote quote) {
        this.quoteId = quote.quoteId;
        this.customerName = quote.getCustomerName();
        this.dealerName = quote.getDealerName();
        this.validUntil = quote.getValidUntil();
        this.totalCost = quote.getTotalCost();
        this.discount = quote.getDiscount();
        this.city = quote.getCity();
        this.postalCode = quote.getPostalCode();
        this.state = quote.getState();
        this.quoteItems = quote.getQuoteItems();
    }

    public String validate()
    {
        int count = 0;
        StringBuilder errors = new StringBuilder("{\"errors\": [");
        count = Utility.validateStringField(dealerName, "dealerName", count, errors);
        count = Utility.validateStringField(customerName, "customerName", count, errors);
        errors.append("]}");

        return (count > 0) ? errors.toString() : null;
    }

    public String getQuoteId()
    {
        return quoteId;
    }

    public void setQuoteId(String quoteId)
    {
        this.quoteId = quoteId;
    }

    public String getDealerName()
    {
        return dealerName;
    }

    public void setDealerName(String dealerName)
    {
        this.dealerName = dealerName;
    }

    public String getCustomerName()
    {
        return customerName;
    }

    public void setCustomerName(String customerName)
    {
        this.customerName = customerName;
    }

    public String getValidUntil()
    {
        return validUntil;
    }

    public void setValidUntil(String validUntil)
    {
        this.validUntil = validUntil;
    }

    public List<QuoteItemInfo> getQuoteItems()
    {
        return quoteItems;
    }

    public void setQuoteItems(List<QuoteItemInfo> quoteItems)
    {
        this.quoteItems = quoteItems;
    }

    /**
     * Adds an item to the quote items list.
     *
     * @param sku        The item sku number
     * @param amount     The amount or number of units quoted.
     */
    public void addQuoteItem(String sku, double amount)
    {
        if (quoteItems == null)
        {
            this.quoteItems = new ArrayList<QuoteItemInfo>();
        }
        quoteItems.add(new QuoteItemInfo(sku, amount));
    }

    /**
     * Gets the overall cost of the quote, before any discount is applied.
     */
    public double getTotalCost()
    {
        return totalCost;
    }

    /**
     * Sets the overall cost of the quote, before any discount is applied.
     */
    public void setTotalCost(double totalCost)
    {
        this.totalCost = totalCost;
    }

    /**
     * Gets the overall discount, as an amount (not percentage).
     */
    public double getDiscount()
    {
        return discount;
    }

    /**
     * Sets the overall discount, as an amount (not percentage).
     */
    public void setDiscount(double discount)
    {
        this.discount = discount;
    }

    /**
     * Gets city where the unit is to be delivered.
     * Used to estimate delivery costs and for capturing local regulatory purposes.
     */
    public String getCity()
    {
        return city;
    }

    /**
     * Sets city where the unit is to be delivered.
     * Used to estimate delivery costs and for capturing local regulatory purposes.
     */
    public void setCity(String city)
    {
        this.city = city;
    }

    /**
     * Gets postal code where the unit is to be delivered.
     * Used to estimate delivery costs and for capturing local regulatory purposes.
     */
    public String getPostalCode()
    {
        return postalCode;
    }

    /**
     * Sets postal code where the unit is to be delivered.
     * Used to estimate delivery costs and for capturing local regulatory purposes.
     */
    public void setPostalCode(String postalCode)
    {
        this.postalCode = postalCode;
    }

    /**
     * Gets state where the unit is to be delivered.
     * Used to estimate delivery costs and for capturing local regulatory purposes.
     */
    public String getState()
    {
        return state;
    }

    /**
     * Sets state where the unit is to be delivered.
     * Used to estimate delivery costs and for capturing local regulatory purposes.
     */
    public void setState(String state)
    {
        this.state = state;
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Quote quote = (Quote) o;


        if (Double.compare(quote.totalCost, totalCost) != 0) return false;
        if (city != null ? !city.equals(quote.city) : quote.city != null) return false;
        if (customerName != null ? !customerName.equals(quote.customerName) : quote.customerName != null) return false;
        if (dealerName != null ? !dealerName.equals(quote.dealerName) : quote.dealerName != null) return false;
        if (postalCode != null ? !postalCode.equals(quote.postalCode) : quote.postalCode != null) return false;
        if (quoteId != null ? !quoteId.equals(quote.quoteId) : quote.quoteId != null) return false;
        if (state != null ? !state.equals(quote.state) : quote.state != null) return false;
        if (validUntil != null ? validUntil.equals(quote.validUntil) : quote.validUntil != null) return false;

        if (quoteItems.size() != quote.quoteItems.size()) return false;

        if (quoteItems.size() > 0)
        {
            QuoteItemInfo arr1[] = new QuoteItemInfo[quoteItems.size()];
            QuoteItemInfo arr2[] = new QuoteItemInfo[quote.quoteItems.size()];

            quoteItems.toArray(arr1);
            quote.quoteItems.toArray(arr2);

            Arrays.sort(arr1);
            Arrays.sort(arr2);

            if (!Arrays.equals(arr1, arr2)) return false;
        }
        // if all conditions are true return true.
        return true;
    }

    @Override
    public int hashCode()
    {
        int result;
        long temp;
        result = quoteId != null ? quoteId.hashCode() : 0;
        result = 31 * result + (validUntil != null ? validUntil.hashCode() : 0);
        result = 31 * result + (customerName != null ? customerName.hashCode() : 0);
        result = 31 * result + (dealerName != null ? dealerName.hashCode() : 0);
        result = 31 * result + (quoteItems != null ? quoteItems.hashCode() : 0);
        temp = Double.doubleToLongBits(totalCost);
        result = 31 * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(discount);
        result = 31 * result + (int) (temp ^ (temp >>> 32));
        result = 31 * result + (city != null ? city.hashCode() : 0);
        result = 31 * result + (postalCode != null ? postalCode.hashCode() : 0);
        result = 31 * result + (state != null ? state.hashCode() : 0);
        return result;
    }


}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/QuoteItemInfo.java
================================================
package smpl.ordering.models;

/**
 * Represents a line item of catalog item products, coming from the client to the service
 *
 * @see QuoteItemInfo
 * @see smpl.ordering.models.CatalogItem
 */
public class QuoteItemInfo
        implements Comparable<QuoteItemInfo>
{
    private String skuNumber;
    private double amount;

    public QuoteItemInfo()
    {
    }

    public QuoteItemInfo(String sku, double amount)
    {
        this.skuNumber = sku;
        this.amount = amount;
    }

    @Override
    public int compareTo(@SuppressWarnings("NullableProblems") QuoteItemInfo other)
    {
        return skuNumber.compareTo(other.skuNumber);
    }

    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        QuoteItemInfo itemInfo = (QuoteItemInfo) o;

        return Double.compare(itemInfo.amount, amount) == 0 && skuNumber.equals(itemInfo.skuNumber);
    }

    @Override
    public int hashCode()
    {
        int result;
        long temp;
        result = skuNumber.hashCode();
        temp = Double.doubleToLongBits(amount);
        result = 31 * result + (int) (temp ^ (temp >>> 32));
        return result;
    }

    public String getSkuNumber()
    {
        return skuNumber;
    }

    public void setSkuNumber(String sku)
    {
        this.skuNumber = sku;
    }

    /**
     * Gets the amount of the item that is quoted / ordered.
     */
    public double getAmount()
    {
        return amount;
    }

    /**
     * Sets the amount of the item that is quoted / ordered.
     */
    public void setAmount(double amount)
    {
        this.amount = amount;
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/ShipmentEventInfo.java
================================================
package smpl.ordering.models;

public class ShipmentEventInfo
{
    public ShipmentEventInfo()
    {
    }

    public ShipmentEventInfo(String date, String comments)
    {
        this.date = date;
        this.comments = comments;
    }

    public String getDate()
    {
        return date;
    }

    public void setDate(String date)
    {
        this.date = date;
    }

    public String getComments()
    {
        return comments;
    }

    public void setComments(String comments)
    {
        this.comments = comments;
    }

    public String validate()
    {
        StringBuilder builder = new StringBuilder();
        boolean ok = true;

        if (comments == null || comments.isEmpty())
        {
            builder.append("No or shipment event comment\n");
            ok = false;
        }
        return ok ? null : builder.toString();
    }

    private String date;
    private String comments;
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/models/ShipmentRecord.java
================================================
package smpl.ordering.models;

import java.util.ArrayList;
import java.util.List;

/**
 * Represents data fpr a particular shipment. Each order corresponds to no more
 * than one shipment record. In other words, shipments are consolidated.
 */
public class ShipmentRecord
{
    /**
     * The order id is also the key of the shipment record.
     *
     * @return The order/shipment identity
     */
    public String getOrderId()
    {
        return orderId;
    }

    public void setOrderId(String orderId)
    {
        this.orderId = orderId;
    }

    public String getDeliveryDate()
    {
        return deliveryDate;
    }

    public void setDeliveryDate(String deliveryDate)
    {
        this.deliveryDate = deliveryDate;
    }

    public List<ShipmentEventInfo> getEvents()
    {
        return events;
    }

    public void addEvent(ShipmentEventInfo event)
    {
        this.events.add(event);
    }

    @SuppressWarnings("SameParameterValue")
    public void addEvent(String date, String comments)
    {
        this.events.add(new ShipmentEventInfo(date, comments));
    }

    public DeliveryAddress getDeliveryAddress()
    {
        return deliveryAddress;
    }

    public void setDeliveryAddress(DeliveryAddress deliveryAddress)
    {
        this.deliveryAddress = deliveryAddress;
    }

    public String getContactName()
    {
        return contactName;
    }

    public void setContactName(String contactName)
    {
        this.contactName = contactName;
    }

    public PhoneInfo getPrimaryContactPhone()
    {
        return primaryContactPhone;
    }

    public void setPrimaryContactPhone(PhoneInfo primaryContactPhone)
    {
        this.primaryContactPhone = primaryContactPhone;
    }

    public PhoneInfo getAlternateContactPhone()
    {
        return alternateContactPhone;
    }

    public void setAlternateContactPhone(PhoneInfo alternateContactPhone)
    {
        this.alternateContactPhone = alternateContactPhone;
    }

    public ShipmentRecord()
    {
        this.events = new ArrayList<>();
    }

    public ShipmentRecord(ShipmentRecord other)
    {
        orderId = other.orderId;
        deliveryDate = other.deliveryDate;
        deliveryAddress = other.deliveryAddress;
        contactName = other.contactName;
        primaryContactPhone = other.primaryContactPhone;
        alternateContactPhone = other.alternateContactPhone;
        events = new ArrayList<>();
        for (ShipmentEventInfo event : other.events)
        {
            events.add(new ShipmentEventInfo(event.getDate(), event.getComments()));
        }
    }

    public String validate()
    {
        StringBuilder bldr = new StringBuilder();
        boolean ok = true;

        if (orderId == null || orderId.isEmpty())
        {
            bldr.append("No order id\n");
            ok = false;
        }
        if (deliveryDate == null || deliveryDate.isEmpty())
        {
            bldr.append("No delivery Date\n");
            ok = false;
        }
        if (deliveryAddress == null || !deliveryAddress.validate())
        {
            bldr.append("No or incomplete delivery address\n");
            ok = false;
        }
        if (contactName == null || contactName.isEmpty() || primaryContactPhone == null)
        {
            bldr.append("Contact information missing\n");
            ok = false;
        }

        return ok ? null : bldr.toString();
    }

    private String orderId;

    private String deliveryDate;

    private final List<ShipmentEventInfo> events;

    private DeliveryAddress deliveryAddress;

    private String contactName;

    private PhoneInfo primaryContactPhone;

    private PhoneInfo alternateContactPhone;
}




================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/CatalogItemsRepository.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.models.CatalogItem;

import java.util.List;

/**
 * Interface for repositories holding catalog item data.
 */
@SuppressWarnings({"SameParameterValue", "UnusedParameters"})
public interface CatalogItemsRepository
{
    List<CatalogItem> getCatalogItems();

    CatalogItem getCatalogItem(String sku);

    boolean upsertCatalogItem(String sku, CatalogItem catalogItem, String eTag);

    boolean removeCatalogItem(String sku, String eTag);
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/DealersRepository.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.models.DealerInfo;

import java.util.List;

/**
 * Represents the interface of repositories holding dealer information.
 */
@SuppressWarnings({"SameParameterValue", "UnusedParameters"})
public interface DealersRepository
{
    List<DealerInfo> getDealers();

    DealerInfo getDealer(String name);

    boolean upsertDealer(DealerInfo dealer, String eTag);

    boolean removeDealer(String name, String eTag);
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/OrderRepository.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.BadRequestException;
import smpl.ordering.models.Order;
import smpl.ordering.models.OrderStatus;
import smpl.ordering.models.OrderUpdateInfo;

import java.util.List;

/**
 * Interface for repositories holding order information
 */
@SuppressWarnings({"SameParameterValue", "UnusedParameters"})
public interface OrderRepository
{
    boolean hasOrder(String id);

    Order getOrder(String id);

    Order getOrderByQuoteId(String id);

    List<Order> getOrdersByStatus(OrderStatus status);

    List<Order> getOrdersByDealerName(String dealer, OrderStatus status);

    Order createOrder(String from) throws BadRequestException;

    @SuppressWarnings("UnusedParameters")
    boolean updateOrder(String id, Order order, String eTag);

    @SuppressWarnings("UnusedParameters")
    boolean updateOrder(String id, OrderUpdateInfo info, String eTag) throws BadRequestException;

    boolean removeOrder(String id, String eTag);
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/QuoteRepository.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.BadRequestException;
import smpl.ordering.models.Quote;

import java.util.List;

/**
 * Interface for repositories holding quote data.
 */
@SuppressWarnings({"SameParameterValue", "UnusedParameters"})
public interface QuoteRepository
{
    Quote getQuote(String id);

    List<Quote> getQuotesByCustomerName(String customerName);

    List<String> getQuoteIdsByDealerName(String dealerName);

    Quote createQuote(Quote from) throws BadRequestException;

    boolean updateQuote(String id, Quote quote, String eTag);

    boolean removeQuote(String id, String eTag);
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/RepositoryFactory.java
================================================
package smpl.ordering.repositories;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import smpl.ordering.OrderingConfiguration;
import smpl.ordering.repositories.mock.*;
import smpl.ordering.repositories.mongodb.*;

@SuppressWarnings("EmptyCatchBlock")
public class RepositoryFactory
{

    public static CatalogItemsRepository getCatalogItemsRepository()
    {
        switch (s_factory.storageKind)
        {
        case RepositoryFactory.MEMORY:
            return s_factory.mockRepos.catalogItems;
        case RepositoryFactory.MONGODB:
            return s_factory.mongodbRepos.catalogItems;
        default:
            return null;
        }
    }

    public static DealersRepository getDealersRepository()
    {
        switch (s_factory.storageKind)
        {
        case RepositoryFactory.MEMORY:
            return s_factory.mockRepos.dealers;
        case RepositoryFactory.MONGODB:
            return s_factory.mongodbRepos.dealers;
        default:
            return null;
        }
    }

    public static OrderRepository getOrderRepository()
    {
        switch (s_factory.storageKind)
        {
        case RepositoryFactory.MEMORY:
            return s_factory.mockRepos.orders;
        case RepositoryFactory.MONGODB:
            return s_factory.mongodbRepos.orders;
        default:
            return null;
        }
    }

    public static QuoteRepository getQuoteRepository()
    {
        switch (s_factory.storageKind)
        {
        case RepositoryFactory.MEMORY:
            return s_factory.mockRepos.quotes;
        case RepositoryFactory.MONGODB:
            return s_factory.mongodbRepos.quotes;
        default:
            return null;
        }
    }

    public static ShipmentRepository getShipmentRepository()
    {
        switch (s_factory.storageKind)
        {
        case RepositoryFactory.MEMORY:
            return s_factory.mockRepos.shipments;
        case RepositoryFactory.MONGODB:
            return s_factory.mongodbRepos.shipments;
        default:
            return null;
        }
    }

    private void init(String storage)
    {
        if (mongoTemplate == null)
        {
            try
            {
                mongoTemplate = OrderingConfiguration.getApplicationContext().getBean(MongoTemplate.class);
            }
            catch (Exception exc)
            {
            }
        }

        this.storageKind = storage;
        this.mockRepos = new Repositories();
        this.mongodbRepos = new Repositories();

        this.mockRepos.catalogItems = new MockCatalogItemsRepository();
        this.mockRepos.dealers = new MockDealersRepository();
        this.mockRepos.quotes = new MockQuoteRepository(this.mockRepos.catalogItems, this.mockRepos.dealers);
        this.mockRepos.orders = new MockOrderRepository(this.mockRepos.quotes);
        this.mockRepos.shipments = new MockShipmentRepository(this.mockRepos.orders);

        this.mongodbRepos.catalogItems = new MongoCatalogItemsRepository(mongoTemplate);
        this.mongodbRepos.dealers = new MongoDealersRepository(mongoTemplate);
        this.mongodbRepos.quotes = new MongoQuoteRepository(mongoTemplate, this.mongodbRepos.dealers);
        this.mongodbRepos.orders = new MongoOrderRepository(mongoTemplate, this.mongodbRepos.quotes);
        this.mongodbRepos.shipments = new MongoShipmentRepository(mongoTemplate, this.mongodbRepos.orders);
    }

    private RepositoryFactory(String storage)
    {
        init(storage);
    }

    public static synchronized RepositoryFactory getFactory()
    {
        return s_factory;
    }

    static public void reset(String storage)
    {
        if (s_factory != null)
        {
            s_factory.mongoTemplate = null;
        }
        s_factory = new RepositoryFactory(storage);
    }

    @Autowired
    private MongoTemplate mongoTemplate;

    private class Repositories
    {
        CatalogItemsRepository catalogItems;
        DealersRepository dealers;
        QuoteRepository quotes;
        OrderRepository orders;
        ShipmentRepository shipments;
    }

    private Repositories mockRepos;
    private Repositories mongodbRepos;

    private String storageKind;
    private static RepositoryFactory s_factory;

    public static final String MEMORY = "memory";
    public static final String MONGODB = "mongodb";
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/ShipmentRepository.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.BadRequestException;
import smpl.ordering.models.OrderStatus;
import smpl.ordering.models.ShipmentEventInfo;
import smpl.ordering.models.ShipmentRecord;

import java.util.List;

/**
 * Interface for repositories holding shipment data.
 */
public interface ShipmentRepository
{
    List<ShipmentRecord> getShipments(OrderStatus status);

    ShipmentRecord getShipmentById(String id);

    ShipmentRecord createShipment(ShipmentRecord info) throws BadRequestException;

    boolean addEvent(String id, ShipmentEventInfo event);

    boolean updateShipment(ShipmentRecord info);

    boolean removeShipment(String id, String eTag);
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mock/MockCatalogItemsRepository.java
================================================
package smpl.ordering.repositories.mock;

import smpl.ordering.TestPath;
import smpl.ordering.models.CatalogItem;
import smpl.ordering.repositories.CatalogItemsRepository;

import java.util.ArrayList;
import java.util.List;

/**
 * An in-memory repository of catalog items. Used for testing the API surface area.
 */
public class MockCatalogItemsRepository
        implements CatalogItemsRepository, TestPath
{
    public MockCatalogItemsRepository()
    {
        catalog.add(new CatalogItem("MRP-0001", "Brake Pads", 26.99,  10,  3));
        catalog.add(new CatalogItem("MRP-0002", "Brake Calipers", 33.99, 10, 3));
        catalog.add(new CatalogItem("MRP-0003", "Brake Calipers Guide Pin", 2.99, 10, 3));
    }

    /**
     * Retrieves a list of the items in the catalog.
     *
     * @return An catalog item list
     */
    @Override
    public List<CatalogItem> getCatalogItems()
    {

        List<CatalogItem> result = new ArrayList<>();
        for (CatalogItem catalogItem : catalog)
        {
            result.add(new CatalogItem(catalogItem));
        }
        return result;
    }

    /**
     * Retrieves information on a specific product
     *
     * @param sku The SKU number
     * @return The catalogItem, null if not found.
     */
    @Override
    public CatalogItem getCatalogItem(String sku)
    {
        for (CatalogItem catalogItem : catalog)
        {
            if (compareSkuNumbers(sku, catalogItem))
            {
                return new CatalogItem(catalogItem);
            }
        }
        return null;
    }

    private boolean compareSkuNumbers(String sku, CatalogItem catalogItem)
    {
        return catalogItem.getSkuNumber().toLowerCase().equals(sku.toLowerCase());
    }

    /**
     * Insert or update an catalog item product information record in the catalog.
     *
     * @param sku       The SKU number
     * @param catalogItem The catalog item information record.
     * @param eTag      An entity tag used for optimistic concurrency
     * @return true if update, false if insert.
     */
    @Override
    public boolean upsertCatalogItem(String sku, CatalogItem catalogItem, String eTag)
    {
        for (int i = 0; i < catalog.size(); ++i)
        {
            CatalogItem ci = catalog.get(i);
            if (compareSkuNumbers(sku, ci))
            {
                catalog.set(i, catalogItem);
                return true;
            }
        }
        catalog.add(catalogItem);
        return false;
    }

    /**
     * Remove an catalog item information record from the catalog.
     *
     * @param sku The SKU number
     * @return true if found, false otherwise.
     */
    @Override
    public boolean removeCatalogItem(String sku, String eTag)
    {
        for (int i = 0; i < catalog.size(); ++i)
        {
            CatalogItem catalogItem = catalog.get(i);
            if (compareSkuNumbers(sku, catalogItem))
            {
                catalog.remove(i);
                return true;
            }
        }
        return false;
    }

    private final List<CatalogItem> catalog = new ArrayList<>();

    @Override
    public void reset()
    {
        catalog.clear();
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mock/MockDealersRepository.java
================================================
package smpl.ordering.repositories.mock;

import smpl.ordering.TestPath;
import smpl.ordering.models.DealerInfo;
import smpl.ordering.repositories.DealersRepository;

import java.util.ArrayList;
import java.util.List;

/**
 * In-memory dealer repository.
 */
public class MockDealersRepository
        implements DealersRepository, TestPath
{
    public MockDealersRepository()
    {
        this.dealers = new ArrayList<>();
    }

    @Override
    public List<DealerInfo> getDealers()
    {
        List<DealerInfo> result = new ArrayList<>();
        for (DealerInfo info : dealers)
        {
            result.add(new DealerInfo(info));
        }
        return result;
    }

    @Override
    public DealerInfo getDealer(String name)
    {
        for (DealerInfo info : dealers)
        {
            if (compareDealerNames(name, info))
            {
                return new DealerInfo(info);
            }
        }
        return null;
    }

    private boolean compareDealerNames(String name, DealerInfo info)
    {
        return info.getName().toLowerCase().equals(name.toLowerCase());
    }

    @Override
    public boolean upsertDealer(DealerInfo dealer, String eTag)
    {
        String name = dealer.getName();
        for (int i = 0; i < dealers.size(); ++i)
        {
            DealerInfo info = dealers.get(i);
            if (compareDealerNames(name, info))
            {
                dealers.set(i, dealer);
                return true;
            }
        }
        dealers.add(dealer);
        return false;
    }

    @Override
    public boolean removeDealer(String name, String eTag)
    {
        for (int i = 0; i < dealers.size(); ++i)
        {
            DealerInfo info = dealers.get(i);
            if (compareDealerNames(name, info))
            {
                dealers.remove(i);
                return true;
            }
        }
        return false;
    }

    private final List<DealerInfo> dealers;

    @Override
    public void reset()
    {
        dealers.clear();
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mock/MockOrderRepository.java
================================================
package smpl.ordering.repositories.mock;

import smpl.ordering.BadRequestException;
import smpl.ordering.ConflictingRequestException;
import smpl.ordering.TestPath;
import smpl.ordering.models.*;
import smpl.ordering.repositories.OrderRepository;
import smpl.ordering.repositories.QuoteRepository;

import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;

/**
 * In-memory order repository implementation class
 */
public class MockOrderRepository
        implements OrderRepository, TestPath
{
    public MockOrderRepository(QuoteRepository quotes)
    {
        this.orders = new ArrayList<>();
        this.quotes = quotes;
    }

    @Override
    public boolean hasOrder(String id)
    {
        for (Order order : orders)
        {
            if (order.getOrderId().equals(id))
            {
                return true;
            }
        }
        return false;
    }

    @Override
    public Order getOrder(String id)
    {
        for (Order order : orders)
        {
            if (order.getOrderId().equals(id))
            {
                return order;
            }
        }
        return null;
    }

    @Override
    public List<Order> getOrdersByStatus(OrderStatus status)
    {
        List<Order> lst = new ArrayList<>();
        for (Order order : orders)
        {
            if (status == OrderStatus.None || order.getStatus() == status)
            {
                lst.add(order);
            }
        }
        return lst;
    }

    @Override
    public List<Order> getOrdersByDealerName(String name, OrderStatus status)
    {
        List<Order> lst = new ArrayList<>();
        for (Order order : orders)
        {
            Quote q = quotes.getQuote(order.getQuoteId());
            if (q.getDealerName().toLowerCase().equals(name.toLowerCase()) &&
                    (status == OrderStatus.None || status == order.getStatus()))
            {
                lst.add(order);
            }
        }
        return lst;
    }

    @Override
    public Order getOrderByQuoteId(String id)
    {
        for (Order order : orders)
        {
            if (order.getQuoteId().equals(id))
            {
                return order;
            }
        }
        return null;
    }


    @Override
    public Order createOrder(String from) throws BadRequestException
    {
        Quote q = quotes.getQuote(from);
        if (q == null)
        {
            throw new BadRequestException(String.format("No such quote: %s", from));
        }

        Order assocOrder = getOrderByQuoteId(from);

        if (assocOrder != null)
        {
            throw new ConflictingRequestException(String.format("The quote has already been used to create an order: %s", assocOrder.getOrderId()));
        }

        Order result = new Order();
        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);

        result.setOrderDate(df.format(new Date()));
        result.setOrderId(String.format("order-%s", from));
        result.setQuoteId(from);
        result.setStatus(OrderStatus.Created);

        orders.add(result);

        return result;
    }

    @Override
    public boolean updateOrder(String id, Order order, String eTag)
    {
        Order old = getOrder(id);
        if (old == null) return false;
        int idx = orders.indexOf(old);
        orders.set(idx, order);
        return true;
    }

    @Override
    public boolean updateOrder(String id, OrderUpdateInfo info, String eTag) throws BadRequestException
    {
        Order old = getOrder(id);
        if (old == null) throw new BadRequestException("No such order");
        old.addEvent(info.getEventInfo());
        old.setStatus(info.getStatus());
        return true;
    }

    @Override
    public boolean removeOrder(String id, String eTag)
    {
        return false;
    }

    static
    {
        s_counter = new AtomicLong(0L);
    }

    private final List<Order> orders;
    private static AtomicLong s_counter;
    private final QuoteRepository quotes;

    @Override
    public void reset()
    {
        orders.clear();
        s_counter = new AtomicLong(0L);
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mock/MockQuoteRepository.java
================================================
package smpl.ordering.repositories.mock;

import smpl.ordering.TestPath;
import smpl.ordering.models.*;
import smpl.ordering.BadRequestException;
import smpl.ordering.repositories.CatalogItemsRepository;
import smpl.ordering.repositories.DealersRepository;
import smpl.ordering.repositories.QuoteRepository;

import java.util.List;
import java.util.ArrayList;
import java.util.Random;

/**
 * An in-memory repository of quotes. Used for testing the API surface area.
 */
@SuppressWarnings("UnusedParameters")
public class MockQuoteRepository
        implements QuoteRepository, TestPath
{
    public MockQuoteRepository(CatalogItemsRepository catalog, DealersRepository dealers)
    {
        this.quotes = new ArrayList<>();
        this.dealers = dealers;
    }

    /**
     * Retrieves a specific quote from the repository.
     *
     * @param id The quote id.
     * @return A Quote object, if found.
     */
    @Override
    public Quote getQuote(String id)
    {
        for (Quote q : quotes)
        {
            if (q.getQuoteId().equals(id))
            {
                return q;
            }
        }
        return null;
    }

    /**
     * Retrieves a list of quotes where the customer name contains the string passed in.
     *
     * @param customerName A fragment of the customer name.
     * @return A list of quotes, possibly empty.
     */
    @Override
    public List<Quote> getQuotesByCustomerName(String customerName)
    {
        List<Quote> lst = new ArrayList<>();
        for (Quote q : quotes)
        {
            if (q.getCustomerName().toLowerCase().contains(customerName.toLowerCase()))
            {
                lst.add(q);
            }
        }
        return lst;
    }

    @Override
    public List<String> getQuoteIdsByDealerName(String dealerName)
    {
        List<String> lst = new ArrayList<>();
        for (Quote q : quotes)
        {
            if (q.getDealerName().compareToIgnoreCase(dealerName) == 0)
            {
                lst.add(q.getQuoteId());
            }
        }
        return lst;
    }

    /**
     * Creates a new quote from information edited by a client.
     *
     * @param quote The client quote information.
     * @return A Quote object.
     */
    @Override
    public Quote createQuote(Quote quote) throws BadRequestException
    {
        DealerInfo info = dealers.getDealer(quote.getDealerName());
        if (info == null)
        {
            dealers.upsertDealer(new DealerInfo(quote.getDealerName()), null);
        }

        String id = quote.getQuoteId();

        if (id == null || id.isEmpty())
        {
            quote.setQuoteId(String.format("%d", s_counter.nextInt() & 0x7FFFFFFF));
        }
        else
        {
            if (getQuote(id) != null)
            {
                throw new BadRequestException(String.format("Duplicate: the quote '%s' already exists", id));
            }
        }

        quotes.add(quote);

        return quote;
    }

    /**
     * Update an existing quote from client-edited information.
     *
     * @param id   The quote id.
     * @param from New client-edited information.
     * @param eTag An entity tag used for optimistic concurrency
     * @return true if the quote exists, false otherwise.
     */
    @Override
    public boolean updateQuote(String id, Quote from, String eTag)
    {
        Quote quote = getQuote(id);
        if (quote == null) return false;

        DealerInfo info = dealers.getDealer(from.getDealerName());
        if (info == null)
        {
            dealers.upsertDealer(new DealerInfo(from.getDealerName()), null);
        }

        from.setQuoteId(id);

        int idx = quotes.indexOf(quote);
        quotes.set(idx, from);

        return true;
    }

    /**
     * Remove a quote from the system.
     *
     * @param id   The quote id.
     * @param eTag An entity tag used for optimistic concurrency
     * @return true if the quote exists, false otherwise
     */
    @Override
    public boolean removeQuote(String id, String eTag)
    {
        Quote quote = getQuote(id);
        if (quote == null) return false;
        quotes.remove(quote);
        return true;
    }

    static
    {
        s_counter = new Random();
    }

    private final List<Quote> quotes;
    private final DealersRepository dealers;
    private static final Random s_counter;

    @Override
    public void reset()
    {
        quotes.clear();
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mock/MockShipmentRepository.java
================================================
package smpl.ordering.repositories.mock;

import smpl.ordering.BadRequestException;
import smpl.ordering.TestPath;
import smpl.ordering.models.Order;
import smpl.ordering.models.OrderStatus;
import smpl.ordering.models.ShipmentEventInfo;
import smpl.ordering.models.ShipmentRecord;
import smpl.ordering.repositories.OrderRepository;
import smpl.ordering.repositories.ShipmentRepository;

import java.util.ArrayList;
import java.util.List;

public class MockShipmentRepository
        implements ShipmentRepository, TestPath
{
    public MockShipmentRepository(OrderRepository orders)
    {
        this.orders = orders;
    }

    @Override
    public List<ShipmentRecord> getShipments(OrderStatus status)
    {
        List<ShipmentRecord> result = new ArrayList<>();
        for (ShipmentRecord record : records)
        {
            if (status == OrderStatus.None)
            {
                result.add(new ShipmentRecord(record));
            }
            else
            {
                Order o = orders.getOrder(record.getOrderId());
                if (o.getStatus() == status)
                {
                    result.add(new ShipmentRecord(record));
                }
            }
        }
        return result;
    }

    @Override
    public ShipmentRecord getShipmentById(String id)
    {
        for (ShipmentRecord record : records)
        {
            if (record.getOrderId().equals(id))
            {
                return new ShipmentRecord(record);
            }
        }
        return null;
    }

    @Override
    public ShipmentRecord createShipment(ShipmentRecord info) throws BadRequestException
    {
        Order order = orders.getOrder(info.getOrderId());
        if (order == null)
        {
            throw new BadRequestException(String.format("No such order: %s", info.getOrderId()));
        }

        ShipmentRecord existing = getShipmentById(info.getOrderId());
        if (existing != null)
        {
            throw new BadRequestException(String.format("A shipment record for order '%s' already exists", info.getOrderId()));
        }

        ShipmentRecord result = new ShipmentRecord(info);
        records.add(result);
        return result;
    }

    @Override
    public boolean addEvent(String id, ShipmentEventInfo event)
    {
        ShipmentRecord existing = null;

        for (ShipmentRecord record : records)
        {
            if (record.getOrderId().equals(id))
            {
                existing = record;
                break;
            }
        }

        if (existing == null) return false;

        existing.addEvent(new ShipmentEventInfo(event.getDate(), event.getComments()));

        return true;
    }

    @Override
    public boolean updateShipment(ShipmentRecord info)
    {
        int idx = -1;
        String id = info.getOrderId();

        for (int i = 0; i < records.size(); ++i)
        {
            ShipmentRecord record = records.get(i);
            if (record.getOrderId().equals(id))
            {
                idx = i;
                break;
            }
        }

        if (idx == -1) return false;

        // Replace shipment in the same location

        records.set(idx, new ShipmentRecord(info));

        return true;
    }

    @Override
    public boolean removeShipment(String id, String eTag)
    {
        return false;
    }

    public void reset()
    {
        records.clear();
    }

    private final List<ShipmentRecord> records = new ArrayList<>();
    private final OrderRepository orders;
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/MongoCatalogItemsRepository.java
================================================
package smpl.ordering.repositories.mongodb;

import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import smpl.ordering.TestPath;
import smpl.ordering.repositories.CatalogItemsRepository;
import smpl.ordering.repositories.mongodb.models.CatalogItem;
import java.util.ArrayList;
import java.util.List;

/**
 * MongoDB-based catalog items repository implementation class
 */
public class MongoCatalogItemsRepository
        implements CatalogItemsRepository, TestPath
{
    @Override
    public List<smpl.ordering.models.CatalogItem> getCatalogItems()
    {
        List<CatalogItem> found = operations.findAll(CatalogItem.class);

        List<smpl.ordering.models.CatalogItem> result = new ArrayList<>();

        for (CatalogItem catalogItem : found)
        {
            result.add(catalogItem.toCatalogItem());
        }

        return result;
    }

    @Override
    public smpl.ordering.models.CatalogItem getCatalogItem(String sku)
    {
        CatalogItem existing = findExistingCatalogItem(sku);

        if (existing != null)
        {
            return existing.toCatalogItem();
        }

        return null;
    }

    private CatalogItem findExistingCatalogItem(String sku)
    {
        Query findExisting = new Query(Criteria.where("skuNumber").is(sku));
        return operations.findOne(findExisting, CatalogItem.class);
    }

    @Override
    public boolean upsertCatalogItem(String sku, smpl.ordering.models.CatalogItem catalogItem, String eTag)
    {
        CatalogItem existing = findExistingCatalogItem(sku);
        CatalogItem mongoCatalogItem = new smpl.ordering.repositories.mongodb.models.CatalogItem(catalogItem);

        if (existing != null)
        {
            mongoCatalogItem.setId(existing.getId());
        }

        operations.save(mongoCatalogItem);

        return existing != null;
    }

    @Override
    public boolean removeCatalogItem(String sku, String eTag)
    {
        Query findExisting = new Query(Criteria.where("skuNumber").is(sku));
        CatalogItem existing = operations.findAndRemove(findExisting, CatalogItem.class);
        return existing != null;
    }

    public MongoCatalogItemsRepository(MongoTemplate template)
    {
        operations = new MongoOperationsWithRetry(template);
    }

    private final MongoOperations operations;

    @Override
    public void reset()
    {
        operations.dropCollection(CatalogItem.class);
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/MongoDealersRepository.java
================================================
package smpl.ordering.repositories.mongodb;

import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import smpl.ordering.TestPath;
import smpl.ordering.models.DealerInfo;
import smpl.ordering.repositories.DealersRepository;
import smpl.ordering.repositories.mongodb.models.Dealer;

import java.util.ArrayList;
import java.util.List;

/**
 * MongoDB-based dealers repository implementation class
 */
public class MongoDealersRepository
        implements DealersRepository, TestPath
{

    @Override
    public List<DealerInfo> getDealers()
    {
        List<DealerInfo> result = new ArrayList<>();
        List<Dealer> found = operations.findAll(Dealer.class);

        for (Dealer dealer : found)
        {
            result.add(dealer.toDealerInfo());
        }
        return result;
    }

    @Override
    public DealerInfo getDealer(String name)
    {
        Query findExisting = new Query(Criteria.where("name").is(name));
        Dealer existing = operations.findOne(findExisting, Dealer.class);

        if (existing != null)
        {
            return existing.toDealerInfo();
        }
        return null;
    }

    @Override
    public boolean upsertDealer(DealerInfo dealer, String eTag)
    {
        Query findExisting = new Query(Criteria.where("name").is(dealer.getName()));
        Dealer existing = operations.findOne(findExisting, Dealer.class);
        Dealer mongoDealer = new Dealer(dealer);

        if (existing != null)
        {
            mongoDealer.setId(existing.getId());
        }

        operations.save(mongoDealer);

        return existing != null;
    }

    @Override
    public boolean removeDealer(String name, String eTag)
    {
        Query findExisting = new Query(Criteria.where("name").is(name));
        Dealer existing = operations.findAndRemove(findExisting, Dealer.class);
        return existing != null;
    }

    public MongoDealersRepository(MongoTemplate template)
    {
        operations = new MongoOperationsWithRetry(template);
    }

    private final MongoOperations operations;

    @Override
    public void reset()
    {
        operations.dropCollection("dealers");
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/MongoOperationsWithRetry.java
================================================
package smpl.ordering.repositories.mongodb;

import com.microsoft.applicationinsights.TelemetryClient;
import com.microsoft.applicationinsights.channel.TelemetryChannel;
import com.microsoft.applicationinsights.telemetry.Duration;
import com.microsoft.applicationinsights.telemetry.RemoteDependencyTelemetry;
import com.microsoft.applicationinsights.internal.schemav2.DependencyKind;
import com.microsoft.applicationinsights.internal.schemav2.DependencySourceType;
import com.mongodb.CommandResult;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.WriteResult;
import org.springframework.data.mongodb.core.*;
import org.springframework.data.mongodb.core.aggregation.Aggregation;
import org.springframework.data.mongodb.core.aggregation.AggregationResults;
import org.springframework.data.mongodb.core.aggregation.TypedAggregation;
import org.springframework.data.mongodb.core.convert.MongoConverter;
import org.springframework.data.mongodb.core.geo.GeoResults;
import org.springframework.data.mongodb.core.mapreduce.GroupBy;
import org.springframework.data.mongodb.core.mapreduce.GroupByResults;
import org.springframework.data.mongodb.core.mapreduce.MapReduceOptions;
import org.springframework.data.mongodb.core.mapreduce.MapReduceResults;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.NearQuery;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import smpl.ordering.Utility;

import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Set;

@SuppressWarnings({"ALL", "deprecation"})
public class MongoOperationsWithRetry
        implements MongoOperations
{
    private MongoOperations underlying;

    MongoOperationsWithRetry(MongoOperations underlying)
    {
        this.underlying = underlying;
    }

    @Override
    public String getCollectionName(Class<?> entityClass)
    {
        return underlying.getCollectionName(entityClass);
    }

    @Override
    public CommandResult executeCommand(String jsonCommand)
    {
        return underlying.executeCommand(jsonCommand);
    }

    @Override
    public CommandResult executeCommand(DBObject command)
    {
        return underlying.executeCommand(command);
    }

    @Override
    public CommandResult executeCommand(DBObject command, int options)
    {
        return underlying.executeCommand(command, options);
    }

    @Override
    public void executeQuery(Query query, String collectionName, DocumentCallbackHandler dch)
    {
        underlying.executeQuery(query, collectionName, dch);
    }

    @Override
    public <T> T execute(DbCallback<T> action)
    {
        return underlying.execute(action);
    }

    @Override
    public <T> T execute(Class<?> entityClass, CollectionCallback<T> action)
    {
        return underlying.execute(entityClass, action);
    }

    @Override
    public <T> T execute(String collectionName, CollectionCallback<T> action)
    {
        return underlying.execute(collectionName, action);
    }

    @Override
    public <T> T executeInSession(DbCallback<T> action)
    {
        return underlying.executeInSession(action);
    }

    @Override
    public <T> DBCollection createCollection(Class<T> entityClass)
    {
        return underlying.createCollection(entityClass);
    }

    @Override
    public <T> DBCollection createCollection(Class<T> entityClass, CollectionOptions collectionOptions)
    {
        return underlying.createCollection(entityClass, collectionOptions);
    }

    @Override
    public DBCollection createCollection(String collectionName)
    {
        return underlying.createCollection(collectionName);
    }

    @Override
    public DBCollection createCollection(String collectionName, CollectionOptions collectionOptions)
    {
        return underlying.createCollection(collectionName, collectionOptions);
    }

    @Override
    public Set<String> getCollectionNames()
    {
        return underlying.getCollectionNames();
    }

    @Override
    public DBCollection getCollection(String collectionName)
    {
        return underlying.getCollection(collectionName);
    }

    @Override
    public <T> boolean collectionExists(Class<T> entityClass)
    {
        return underlying.collectionExists(entityClass);
    }

    @Override
    public boolean collectionExists(String collectionName)
    {
        return underlying.collectionExists(collectionName);
    }

    @Override
    public <T> void dropCollection(Class<T> entityClass)
    {
        boolean success = false;

        Date start = new Date();
        try
        {
            try
            {
                underlying.dropCollection(entityClass);
            }
            catch (org.springframework.dao.DataAccessResourceFailureException darf)
            {
                if (darf.getRootCause().getClass() != java.net.SocketTimeoutException.class)
                {
                    throw darf;
                }
                underlying.dropCollection(entityClass);
            }
            success = true;
        }
        finally
        {
            sendTelemetry(start, new Date(), "dropCollection", success);
        }
    }

    private void sendTelemetry(Date start, Date end, String operation, boolean success)
    {
        TelemetryClient client = Utility.getTelemetryClient();
        if (client != null)
        {
            RemoteDependencyTelemetry rdt = new RemoteDependencyTelemetry(String.format("MongoDB.%s", operation));
			Duration duration = new Duration(end.getTime() - start.getTime());
            rdt.setDuration(duration);
            rdt.setCount(1);
            rdt.setDependencyKind(DependencyKind.Other);
            rdt.setSuccess(success);
            client.track(rdt);
        }
    }

    @Override
    public void dropCollection(String collectionName)
    {
        boolean success = false;
        Date start = new Date();
        try
        {
            try
            {
                underlying.dropCollection(collectionName);
            }
            catch (org.springframework.dao.DataAccessResourceFailureException darf)
            {
                if (darf.getRootCause().getClass() != java.net.SocketTimeoutException.class)
                {
                    throw darf;
                }
                underlying.dropCollection(collectionName);
            }
            success = true;
        }
        finally
        {
            sendTelemetry(start, new Date(), "dropCollection", success);
        }
    }

    @Override
    public IndexOperations indexOps(String collectionName)
    {
        return underlying.indexOps(collectionName);
    }

    @Override
    public IndexOperations indexOps(Class<?> entityClass)
    {
        return underlying.indexOps(entityClass);
    }

    @Override
    public <T> List<T> findAll(Class<T> entityClass)
    {
        List<T> result = null;
        Date start = new Date();
        boolean success = false;
        try
        {
            try
            {
                result = underlying.findAll(entityClass);
            }
            catch (org.springframework.dao.DataAccessResourceFailureException darf)
            {
                if (darf.getRootCause().getClass() != java.net.SocketTimeoutException.class)
                {
                    throw darf;
                }
                result = underlying.findAll(entityClass);
            }
            success = true;
        }
        finally
        {
            sendTelemetry(start, new Date(), "findAll", success);
        }

        return result;
    }

    @Override
    public <T> List<T> findAll(Class<T> entityClass, String collectionName)
    {
        return underlying.findAll(entityClass, collectionName);
    }

    @Override
    public <T> GroupByResults<T> group(String inputCollectionName, GroupBy groupBy, Class<T> entityClass)
    {
        return underlying.group(inputCollectionName, groupBy, entityClass);
    }

    @Override
    public <T> GroupByResults<T> group(Criteria criteria, String inputCollectionName, GroupBy groupBy, Class<T> entityClass)
    {
        return underlying.group(criteria, inputCollectionName, groupBy, entityClass);
    }

    @Override
    public <O> AggregationResults<O> aggregate(TypedAggregation<?> aggregation, String collectionName, Class<O> outputType)
    {
        return underlying.aggregate(aggregation, collectionName, outputType);
    }

    @Override
    public <O> AggregationResults<O> aggregate(TypedAggregation<?> aggregation, Class<O> outputType)
    {
        return underlying.aggregate(aggregation, outputType);
    }

    @Override
    public <O> AggregationResults<O> aggregate(Aggregation aggregation, Class<?> inputType, Class<O> outputType)
    {
        return underlying.aggregate(aggregation, inputType, outputType);
    }

    @Override
    public <O> AggregationResults<O> aggregate(Aggregation aggregation, String collectionName, Class<O> outputType)
    {
        return underlying.aggregate(aggregation, collectionName, outputType);
    }

    @Override
    public <T> MapReduceResults<T> mapReduce(String inputCollectionName, String mapFunction, String reduceFunction, Class<T> entityClass)
    {
        return underlying.mapReduce(inputCollectionName, mapFunction, reduceFunction, entityClass);
    }

    @Override
    public <T> MapReduceResults<T> mapReduce(String inputCollectionName, String mapFunction, String reduceFunction, MapReduceOptions mapReduceOptions, Class<T> entityClass)
    {
        return underlying.mapReduce(inputCollectionName, mapFunction, reduceFunction, mapReduceOptions, entityClass);
    }

    @Override
    public <T> MapReduceResults<T> mapReduce(Query query, String inputCollectionName, String mapFunction, String reduceFunction, Class<T> entityClass)
    {
        return underlying.mapReduce(query, inputCollectionName, mapFunction, reduceFunction, entityClass);
    }

    @Override
    public <T> MapReduceResults<T> mapReduce(Query query, String inputCollectionName, String mapFunction, String reduceFunction, MapReduceOptions mapReduceOptions, Class<T> entityClass)
    {
        return underlying.mapReduce(query, inputCollectionName, mapFunction, reduceFunction, mapReduceOptions, entityClass);
    }

    @Override
    public <T> GeoResults<T> geoNear(NearQuery near, Class<T> entityClass)
    {
        return underlying.geoNear(near, entityClass);
    }

    @Override
    public <T> GeoResults<T> geoNear(NearQuery near, Class<T> entityClass, String collectionName)
    {
        return underlying.geoNear(near, entityClass, collectionName);
    }

    @Override
    public <T> T findOne(Query query, Class<T> entityClass)
    {
        T result = null;
        Date start = new Date();
        boolean success = false;
        try
        {
            try
            {
                result = underlying.findOne(query, entityClass);
            }
            catch (org.springframework.dao.DataAccessResourceFailureException darf)
            {
                if (darf.getRootCause().getClass() != java.net.SocketTimeoutException.class)
                {
                    throw darf;
                }
                result = underlying.findOne(query, entityClass);
            }
            success = true;
        }
        finally
        {
            sendTelemetry(start, new Date(), "findOne", success);
        }

        return result;
    }

    @Override
    public <T> T findOne(Query query, Class<T> entityClass, String collectionName)
    {
        return underlying.findOne(query, entityClass, collectionName);
    }

    @Override
    public boolean exists(Query query, String collectionName)
    {
        return underlying.exists(query, collectionName);
    }

    @Override
    public boolean exists(Query query, Class<?> entityClass)
    {
        boolean result = false;
        Date start = new Date();
        boolean success = false;
        try
        {
            try
            {
                result = underlying.exists(query, entityClass);
            }
            catch (org.springframework.dao.DataAccessResourceFailureException darf)
            {
                if (darf.getRootCause().getClass() != java.net.SocketTimeoutException.class)
                {
                    throw darf;
                }
                result = underlying.exists(query, entityClass);
            }
        }
        finally
        {
            sendTelemetry(start, new Date(), "exists", success);
        }

        return result;
    }

    @Override
    public boolean exists(Query query, Class<?> entityClass, String collectionName)
    {
        return underlying.exists(query, entityClass, collectionName);
    }

    @Override
    public <T> List<T> find(Query query, Class<T> entityClass)
    {
        List<T> result = null;
        Date start = new Date();
        boolean success = false;
        try
        {
            try
            {
                result = underlying.find(query, entityClass);
            }
            catch (org.springframework.dao.DataAccessResourceFailureException darf)
            {
                if (darf.getRootCause().getClass() != java.net.SocketTimeoutException.class)
                {
                    throw darf;
                }
                result = underlying.find(query, entityClass);
            }
        }
        finally
        {
            sendTelemetry(start, new Date(), "find", success);
        }

        return result;
    }

    @Override
    public <T> List<T> find(Query query, Class<T> entityClass, String collectionName)
    {
        return underlying.find(query, entityClass, collectionName);
    }

    @Override
    public <T> T findById(Object id, Class<T> entityClass)
    {
        return underlying.findById(id, entityClass);
    }

    @Override
    public <T> T findById(Object id, Class<T> entityClass, String collectionName)
    {
        return underlying.findById(id, entityClass, collectionName);
    }

    @Override
    public <T> T findAndModify(Query query, Update update, Class<T> entityClass)
    {
        return underlying.findAndModify(query, update, entityClass);
    }

    @Override
    public <T> T findAndModify(Query query, Update update, Class<T> entityClass, String collectionName)
    {
        return underlying.findAndModify(query, update, entityClass, collectionName);
    }

    @Override
    public <T> T findAndModify(Query query, Update update, FindAndModifyOptions options, Class<T> entityClass)
    {
        return underlying.findAndModify(query, update, options, entityClass);
    }

    @Override
    public <T> T findAndModify(Query query, Update update, FindAndModifyOptions options, Class<T> entityClass, String collectionName)
    {
        return underlying.findAndModify(query, update, options, entityClass, collectionName);
    }

    @Override
    public <T> T findAndRemove(Query query, Class<T> entityClass)
    {
        T result = null;
        Date start = new Date();
        boolean success = false;
        try
        {
            try
            {
                result = underlying.findAndRemove(query, entityClass);
            }
            catch (org.springframework.dao.DataAccessResourceFailureException darf)
            {
                if (darf.getRootCause().getClass() != java.net.SocketTimeoutException.class)
                {
                    throw darf;
                }
                result = underlying.findAndRemove(query, entityClass);
            }
        }
        finally
        {
            sendTelemetry(start, new Date(), "findAndRemove", success);
        }

        return result;
    }

    @Override
    public <T> T findAndRemove(Query query, Class<T> entityClass, String collectionName)
    {
        return underlying.findAndRemove(query, entityClass, collectionName);
    }

    @Override
    public long count(Query query, Class<?> entityClass)
    {
        return underlying.count(query, entityClass);
    }

    @Override
    public long count(Query query, String collectionName)
    {
        return underlying.count(query, collectionName);
    }

    @Override
    public void insert(Object objectToSave)
    {
        Date start = new Date();
        boolean success = false;
        try
        {
            try
            {
                underlying.insert(objectToSave);
            }
            catch (org.springframework.dao.DataAccessResourceFailureException darf)
            {
                if (darf.getRootCause().getClass() != java.net.SocketTimeoutException.class)
                {
                    throw darf;
                }
                underlying.insert(objectToSave);
            }
        }
        finally
        {
            sendTelemetry(start, new Date(), "insert", success);
        }
    }

    @Override
    public void insert(Object objectToSave, String collectionName)
    {
        underlying.insert(objectToSave, collectionName);
    }

    @Override
    public void insert(Collection<? extends Object> batchToSave, Class<?> entityClass)
    {
        underlying.insert(batchToSave, entityClass);
    }

    @Override
    public void insert(Collection<? extends Object> batchToSave, String collectionName)
    {
        underlying.insert(batchToSave, collectionName);
    }

    @Override
    public void insertAll(Collection<? extends Object> objectsToSave)
    {
        underlying.insertAll(objectsToSave);
    }

    @Override
    public void save(Object objectToSave)
    {
        Date start = new Date();
        boolean success = false;
        try
        {
            try
            {
                underlying.save(objectToSave);
            }
            catch (org.springframework.dao.DataAccessResourceFailureException darf)
            {
                if (darf.getRootCause().getClass() != java.net.SocketTimeoutException.class)
                {
                    throw darf;
                }
                underlying.save(objectToSave);
            }
        }
        finally
        {
            sendTelemetry(start, new Date(), "save", success);
        }

    }

    @Override
    public void save(Object objectToSave, String collectionName)
    {
        underlying.save(objectToSave, collectionName);
    }

    @Override
    public WriteResult upsert(Query query, Update update, Class<?> entityClass)
    {
        return underlying.upsert(query, update, entityClass);
    }

    @Override
    public WriteResult upsert(Query query, Update update, String collectionName)
    {
        return underlying.upsert(query, update, collectionName);
    }

    @Override
    public WriteResult upsert(Query query, Update update, Class<?> entityClass, String collectionName)
    {
        return underlying.upsert(query, update, entityClass, collectionName);
    }

    @Override
    public WriteResult updateFirst(Query query, Update update, Class<?> entityClass)
    {
        return underlying.updateFirst(query, update, entityClass);
    }

    @Override
    public WriteResult updateFirst(Query query, Update update, String collectionName)
    {
        return underlying.updateFirst(query, update, collectionName);
    }

    @Override
    public WriteResult updateFirst(Query query, Update update, Class<?> entityClass, String collectionName)
    {
        return underlying.updateFirst(query, update, entityClass, collectionName);
    }

    @Override
    public WriteResult updateMulti(Query query, Update update, Class<?> entityClass)
    {
        return underlying.updateMulti(query, update, entityClass);
    }

    @Override
    public WriteResult updateMulti(Query query, Update update, String collectionName)
    {
        return underlying.updateMulti(query, update, collectionName);
    }

    @Override
    public WriteResult updateMulti(Query query, Update update, Class<?> entityClass, String collectionName)
    {
        return underlying.updateMulti(query, update, entityClass, collectionName);
    }

    @Override
    public WriteResult remove(Object object)
    {
        return underlying.remove(object);
    }

    @Override
    public WriteResult remove(Object object, String collection)
    {
        return underlying.remove(object, collection);
    }

    @Override
    public WriteResult remove(Query query, Class<?> entityClass)
    {
        return underlying.remove(query, entityClass);
    }

    @Override
    public WriteResult remove(Query query, Class<?> entityClass, String collectionName)
    {
        return underlying.remove(query, entityClass, collectionName);
    }

    @Override
    public WriteResult remove(Query query, String collectionName)
    {
        return underlying.remove(query, collectionName);
    }

    @Override
    public <T> List<T> findAllAndRemove(Query query, String collectionName)
    {
        return underlying.findAllAndRemove(query, collectionName);
    }

    @Override
    public <T> List<T> findAllAndRemove(Query query, Class<T> entityClass)
    {
        return underlying.findAllAndRemove(query, entityClass);
    }

    @Override
    public <T> List<T> findAllAndRemove(Query query, Class<T> entityClass, String collectionName)
    {
        return underlying.findAllAndRemove(query, entityClass, collectionName);
    }

    @Override
    public MongoConverter getConverter()
    {
        return underlying.getConverter();
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/MongoOrderRepository.java
================================================
package smpl.ordering.repositories.mongodb;

import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import smpl.ordering.BadRequestException;
import smpl.ordering.ConflictingRequestException;
import smpl.ordering.TestPath;
import smpl.ordering.models.*;
import smpl.ordering.repositories.OrderRepository;
import smpl.ordering.repositories.QuoteRepository;
import smpl.ordering.repositories.mongodb.models.OrderDetails;
import smpl.ordering.repositories.mongodb.models.QuoteDetails;

import java.text.DateFormat;
import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class MongoOrderRepository
        implements OrderRepository, TestPath
{
    @Override
    public boolean hasOrder(String id)
    {
        Query findExisting = new Query(Criteria.where("orderId").is(id));
        return operations.exists(findExisting, OrderDetails.class);
    }

    @Override
    public Order getOrder(String id)
    {
        OrderDetails existing = findExistingOrder(id);
        return (existing != null) ? existing.toOrder() : null;
    }

    private OrderDetails findExistingOrder(String id)
    {
        Query findExisting = new Query(Criteria.where("orderId").is(id));
        return operations.findOne(findExisting, OrderDetails.class);
    }

    @Override
    public List<Order> getOrdersByStatus(OrderStatus status)
    {
        List<OrderDetails> found;
        if (status == OrderStatus.None)
        {
            found = operations.findAll(OrderDetails.class);
        }
        else
        {
            Query findExisting = new Query(Criteria.where("status").is(status));
            found = operations.find(findExisting, OrderDetails.class);
        }

        List<Order> result = new ArrayList<>();
        if (found != null && found.size() > 0)
        {
            for (OrderDetails details : found)
            {
                result.add(details.toOrder());
            }
        }
        return result;
    }


    @Override
    public List<Order> getOrdersByDealerName(String dealer, OrderStatus status)
    {
        List<String> quotesIds = quotes.getQuoteIdsByDealerName(dealer);

        Criteria criteria = Criteria.where("quoteId").in(quotesIds);

        if (status != OrderStatus.None)
        {
            criteria = criteria.and("status").is(status);
        }

        Query findExisting = new Query(criteria);

        List<OrderDetails> found = operations.find(findExisting, OrderDetails.class);

        List<Order> result = new ArrayList<>();
        if (found != null && found.size() > 0)
        {
            for (OrderDetails details : found)
            {
                result.add(details.toOrder());
            }
        }
        return result;
    }

    @Override
    public Order getOrderByQuoteId(String id)
    {
        Query findExisting = new Query(Criteria.where("quoteId").is(id));
        OrderDetails existing = operations.findOne(findExisting, OrderDetails.class);
        return (existing != null) ? existing.toOrder() : null;
    }

    @Override
    public Order createOrder(String from) throws BadRequestException
    {
        Quote q = quotes.getQuote(from);
        if (q == null)
        {
            throw new BadRequestException(String.format("No such quote: %s", from));
        }

        Order assocOrder = getOrderByQuoteId(from);

        if (assocOrder != null)
        {
            throw new ConflictingRequestException(String.format("The quote has already been used to create an order: %s", assocOrder.getOrderId()));
        }

        Order result = new Order();
        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);
        result.setOrderDate(df.format(new Date()));
        result.setOrderId(String.format("order-%s", from));
        result.setQuoteId(from);
        result.setStatus(OrderStatus.Created);

        operations.insert(new OrderDetails(result));

        return result;
    }

    @Override
    public boolean updateOrder(String id, Order order, String eTag)
    {
        OrderDetails existing = findExistingOrder(id);
        return (existing != null) && saveOrder(id, order, existing);
    }

    private boolean saveOrder(String id, Order order, OrderDetails existing)
    {
        order.setOrderId(id); // Just to make sure

        OrderDetails details = new OrderDetails(order);
        details.setId(existing.getId());

        operations.save(details);

        return true;
    }

    @Override
    public boolean updateOrder(String id, OrderUpdateInfo info, String eTag) throws BadRequestException
    {
        OrderDetails existing = findExistingOrder(id);

        Order old = existing.toOrder();
        old.addEvent(info.getEventInfo());
        old.setStatus(info.getStatus());
        return saveOrder(id, old, existing);
    }

    @Override
    public boolean removeOrder(String id, String eTag)
    {
        Query findExisting = new Query(Criteria.where("orderId").is(id));
        OrderDetails existing = operations.findAndRemove(findExisting, OrderDetails.class);
        return existing != null;
    }

    public MongoOrderRepository(MongoTemplate template, QuoteRepository quotes)
    {
        this.operations = new MongoOperationsWithRetry(template);
        this.quotes = quotes;
    }

    static
    {
        s_counter = new AtomicLong(0L);
    }

    private static AtomicLong s_counter;
    private final QuoteRepository quotes;

    private final MongoOperations operations;

    @Override
    public void reset()
    {
        operations.dropCollection("orders");
        s_counter = new AtomicLong(0L);
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/MongoQuoteRepository.java
================================================
package smpl.ordering.repositories.mongodb;

import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import smpl.ordering.BadRequestException;
import smpl.ordering.TestPath;
import smpl.ordering.models.*;
import smpl.ordering.repositories.DealersRepository;
import smpl.ordering.repositories.QuoteRepository;
import smpl.ordering.repositories.mongodb.models.QuoteDetails;

import java.util.*;

public class MongoQuoteRepository
        implements QuoteRepository, TestPath
{
    @Override
    public Quote getQuote(String id)
    {
        QuoteDetails existing = findExistingQuote(id);
        return (existing != null) ? existing.toQuote() : null;
    }

    private QuoteDetails findExistingQuote(String id)
    {
        Query findExisting = new Query(Criteria.where("quoteId").is(id));
        return operations.findOne(findExisting, QuoteDetails.class);
    }

    @Override
    public List<Quote> getQuotesByCustomerName(String customerName)
    {
        // TODO: figure out a way to not bring all quotes into memory just to
        //       do the filtering. The database should filter for us.

        //Query findExisting = new Query(Criteria.where("customerName").is(customerName));
        List<QuoteDetails> found = operations.findAll(QuoteDetails.class);

        List<Quote> result = new ArrayList<>();

        if (found != null)
        {
            for (QuoteDetails q : found)
            {
                String cName = q.getCustomerName();
                if (cName != null && cName.toLowerCase().contains(customerName.toLowerCase()))
                {
                    result.add(q.toQuote());
                }
            }
        }
        return result;
    }

    @Override
    public List<String> getQuoteIdsByDealerName(String dealerName)
    {
        List<QuoteDetails> foundQueries = operations.find(new Query(Criteria.where("dealerName").is(dealerName)), QuoteDetails.class);
        List<String> quotesIds = new ArrayList<>();
        for (QuoteDetails q : foundQueries)
        {
            quotesIds.add(q.getQuoteId());
        }

        return quotesIds;
    }

    @Override
    public Quote createQuote(Quote from) throws BadRequestException
    {
        Quote quote = new Quote(from);

        DealerInfo info = dealers.getDealer(from.getDealerName());
        if (info == null)
        {
            dealers.upsertDealer(new DealerInfo(from.getDealerName()), null);
        }

        String id = quote.getQuoteId();

        if (id == null || id.isEmpty())
        {
            quote.setQuoteId(String.format("%d", s_counter.nextInt() & 0x7FFFFFFF));
        }
        else
        {
            if (getQuote(id) != null)
            {
                throw new BadRequestException(String.format("Duplicate: the quote '%s' already exists", id));
            }
        }

        operations.insert(new QuoteDetails(quote));

        return quote;
    }

    @Override
    public boolean updateQuote(String id, Quote from, String eTag)
    {
        QuoteDetails existing = findExistingQuote(id);
        if (existing == null) return false;

        from.setQuoteId(id); // Just to make sure...

        DealerInfo info = dealers.getDealer(from.getDealerName());
        if (info == null)
        {
            dealers.upsertDealer(new DealerInfo(from.getDealerName()), null);
        }

        QuoteDetails details = new QuoteDetails(from);
        details.setId(existing.getId());

        operations.save(details);

        return true;
    }

    @Override
    public boolean removeQuote(String id, String eTag)
    {
        Query findExisting = new Query(Criteria.where("quoteId").is(id));
        QuoteDetails existing = operations.findAndRemove(findExisting, QuoteDetails.class);
        return existing != null;
    }

    public MongoQuoteRepository(MongoTemplate template, DealersRepository dealers)
    {
        this.operations = new MongoOperationsWithRetry(template);
        this.dealers = dealers;
    }

    static
    {
        s_counter = new Random();
    }

    private final DealersRepository dealers;

    private static final Random s_counter;
    private final MongoOperations operations;

    @Override
    public void reset()
    {
        operations.dropCollection("quotes");
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/MongoShipmentRepository.java
================================================
package smpl.ordering.repositories.mongodb;

import org.springframework.data.mongodb.core.MongoOperations;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import smpl.ordering.BadRequestException;
import smpl.ordering.ConflictingRequestException;
import smpl.ordering.TestPath;
import smpl.ordering.models.*;
import smpl.ordering.repositories.OrderRepository;
import smpl.ordering.repositories.ShipmentRepository;
import smpl.ordering.repositories.mongodb.models.ShipmentDetails;

import java.util.ArrayList;
import java.util.List;

/**
 * MongoDB-based shipment repository implementation class
 */
public class MongoShipmentRepository implements ShipmentRepository, TestPath
{
    @Override
    public List<ShipmentRecord> getShipments(OrderStatus status)
    {
        List<Order> ordrs = orders.getOrdersByStatus(status);
        List<String> oids = new ArrayList<>();
        for (Order o : ordrs)
        {
            oids.add(o.getOrderId());
        }

        Query q = new Query(Criteria.where("orderId").in(oids));
        List<ShipmentDetails> details = operations.find(q, ShipmentDetails.class);

        List<ShipmentRecord> result = new ArrayList<>();
        if (details != null)
        {
            for (ShipmentDetails d : details)
            {
                result.add(d.toShipmentRecord());
            }
        }

        return result;
    }

    @Override
    public ShipmentRecord getShipmentById(String id)
    {
        Query q = new Query(Criteria.where("orderId").is(id));
        ShipmentDetails existing = operations.findOne(q, ShipmentDetails.class);
        return (existing != null) ? existing.toShipmentRecord() : null;
    }

    @Override
    public ShipmentRecord createShipment(ShipmentRecord info) throws BadRequestException
    {
        Order assocOrder = orders.getOrder(info.getOrderId());
        if (assocOrder == null)
        {
            throw new BadRequestException(String.format("Order '%s' could not be found: ", info.getOrderId()));
        }

        ShipmentDetails existing = findExistingShipmentDetails(info.getOrderId());
        if (existing != null)
        {
            throw new ConflictingRequestException(String.format("A shipment record for order '%s' already exists", info.getOrderId()));
        }

        operations.insert(new ShipmentDetails(info));
        return new ShipmentRecord(info);
    }

    private ShipmentDetails findExistingShipmentDetails(String id)
    {
        Query q = new Query(Criteria.where("orderId").is(id));
        return operations.findOne(q, ShipmentDetails.class);
    }

    @Override
    public boolean addEvent(String id, ShipmentEventInfo event)
    {
        ShipmentDetails existing = findExistingShipmentDetails(id);
        if (existing == null) return false;

        ShipmentRecord result = existing.toShipmentRecord();
        result.addEvent(event);
        return saveUpdates(existing, result);
    }

    private boolean saveUpdates(ShipmentDetails existing, ShipmentRecord result)
    {
        ShipmentDetails updated = new ShipmentDetails(result);
        updated.setId(existing.getId());

        operations.save(updated);

        return true;
    }

    @Override
    public boolean updateShipment(ShipmentRecord info)
    {
        ShipmentDetails existing = findExistingShipmentDetails(info.getOrderId());
        return (existing != null) && saveUpdates(existing, info);
    }

    @Override
    public boolean removeShipment(String id, String eTag)
    {
        Query findExisting = new Query(Criteria.where("orderId").is(id));
        ShipmentDetails existing = operations.findAndRemove(findExisting, ShipmentDetails.class);
        return existing != null;
    }

    public MongoShipmentRepository(MongoTemplate template, OrderRepository orders)
    {
        this.operations = new MongoOperationsWithRetry(template);
        this.orders = orders;
    }

    private final OrderRepository orders;
    private final MongoOperations operations;

    @Override
    public void reset()
    {
        operations.dropCollection("shipments");
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/models/CatalogItem.java
================================================
package smpl.ordering.repositories.mongodb.models;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;

@Document(collection = "catalog")
public class CatalogItem
{
    public CatalogItem()
    {
    }

    public CatalogItem(smpl.ordering.models.CatalogItem from)
    {
        this.skuNumber = from.getSkuNumber();
        this.description = from.getDescription();
        this.price = from.getPrice();
        this.inventory = from.getInventory();
        this.leadTime = from .getLeadTime();
    }

    public smpl.ordering.models.CatalogItem toCatalogItem()
    {
        int calculatedLeadTime = (inventory > 0 ) ? 0 : leadTime;

        smpl.ordering.models.CatalogItem result = new smpl.ordering.models.CatalogItem();
        result.setSkuNumber(skuNumber);
        result.setDescription(description);
        result.setPrice(price);
        result.setInventory(inventory);
        result.setLeadTime(calculatedLeadTime);
        return result;
    }

    @Id
    private String id;

    public String getId()
    {
        return id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    @Indexed
    private String skuNumber;
    private String description;
    private double price;
    private int inventory;
    private int leadTime;
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/models/Dealer.java
================================================
package smpl.ordering.repositories.mongodb.models;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;
import smpl.ordering.models.DealerInfo;

@Document(collection = "dealers")
public class Dealer
{
    @Id
    private String id;

    @Indexed
    private String name;
    private String contact;
    private String address;
    private String email;
    private String phone;

    public Dealer()
    {
    }

    public Dealer(DealerInfo from)
    {
        this.name = from.getName();
        this.contact = from.getContact();
        this.address = from.getAddress();
        this.email = from.getEmail();
        this.phone = from.getPhone();
    }

    public DealerInfo toDealerInfo()
    {
        DealerInfo result = new DealerInfo();
        result.setName(name);
        result.setContact(contact);
        result.setAddress(address);
        result.setEmail(email);
        result.setPhone(phone);
        return result;
    }

    public String getId()
    {
        return id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/models/OrderDetails.java
================================================
package smpl.ordering.repositories.mongodb.models;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;
import smpl.ordering.models.Order;
import smpl.ordering.models.OrderEventInfo;
import smpl.ordering.models.OrderStatus;

import java.util.List;

@Document(collection = "orders")
public class OrderDetails
{
    public String getId()
    {
        return this.id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    @Id
    private String id;

    @Indexed
    private String orderId;
    @Indexed
    private String quoteId;

    private String orderDate;

    @Indexed
    private OrderStatus status;
    private OrderEventInfo[] events;

    public OrderDetails()
    {
    }

    public OrderDetails(Order from)
    {
        this.orderId = from.getOrderId();
        this.quoteId = from.getQuoteId();
        this.orderDate = from.getOrderDate();
        this.status = from.getStatus();

        List<OrderEventInfo> es = from.getEvents();
        this.events = (es != null && es.size() > 0) ?
                es.toArray(new OrderEventInfo[es.size()]) :
                new OrderEventInfo[0];
    }

    public Order toOrder()
    {
        Order result = new Order();
        result.setOrderId(orderId);
        result.setQuoteId(quoteId);
        result.setStatus(status);
        result.setOrderDate(orderDate);
        if (events != null)
        {
            for (OrderEventInfo item : events)
            {
                result.addEvent(item);
            }
        }
        return result;
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/models/QuoteDetails.java
================================================
package smpl.ordering.repositories.mongodb.models;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;
import smpl.ordering.models.QuoteItemInfo;
import smpl.ordering.models.Quote;

import java.util.List;

@Document(collection = "quotes")
public class QuoteDetails
{
    @Id
    private String id;

    public String getQuoteId()
    {
        return quoteId;
    }

    @Indexed
    private String quoteId;

    private String validUntil;

    private String customerName;

    public String getDealerName()
    {
        return dealerName;
    }

    @Indexed
    private String dealerName;
    private QuoteItemInfo[] quoteItems;
    private double totalCost;
    private double discount;
    private String city;
    private String postalCode;
    private String state;

    public QuoteDetails()
    {
    }

    public QuoteDetails(Quote from)
    {
        this.quoteId = from.getQuoteId();
        this.validUntil = from.getValidUntil();
        this.customerName = from.getCustomerName();
        this.dealerName = from.getDealerName();
        this.totalCost = from.getTotalCost();
        this.discount = from.getDiscount();
        this.city = from.getCity();
        this.postalCode = from.getPostalCode();
        this.state = from.getState();

        List<QuoteItemInfo> ai = from.getQuoteItems();
        this.quoteItems = (ai != null && ai.size() > 0) ?
                ai.toArray(new QuoteItemInfo[ai.size()]) :
                new QuoteItemInfo[0];
    }

    public Quote toQuote()
    {
        Quote result = new Quote();
        result.setQuoteId(quoteId);
        result.setValidUntil(validUntil);
        result.setCustomerName(customerName);
        result.setDealerName(dealerName);
        result.setTotalCost(totalCost);
        result.setDiscount(discount);
        result.setCity(city);
        result.setPostalCode(postalCode);
        result.setState(state);
        if (quoteItems != null)
        {
            for (QuoteItemInfo item : quoteItems)
            {
                result.addQuoteItem(item.getSkuNumber(), item.getAmount());
            }
        }
        return result;
    }

    public String getCustomerName()
    {
        return customerName;
    }

    public String getId()
    {
        return id;
    }

    public void setId(String id)
    {
        this.id = id;
    }
}



================================================
FILE: src/Backend/OrderService/src/main/java/smpl/ordering/repositories/mongodb/models/ShipmentDetails.java
================================================
package smpl.ordering.repositories.mongodb.models;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;
import smpl.ordering.models.DeliveryAddress;
import smpl.ordering.models.PhoneInfo;
import smpl.ordering.models.ShipmentEventInfo;
import smpl.ordering.models.ShipmentRecord;

@Document(collection = "shipments")
public class ShipmentDetails
{
    public String getId()
    {
        return id;
    }

    public void setId(String id)
    {
        this.id = id;
    }

    @Id
    private String id;

    @Indexed
    private String orderId;

    private ShipmentEventInfo[] events;

    private DeliveryAddress deliveryAddress;

    private String contactName;

    private PhoneInfo primaryContactPhone;

    private PhoneInfo alternateContactPhone;

    public ShipmentDetails()
    {
    }

    public ShipmentDetails(ShipmentRecord from)
    {
        this.orderId = from.getOrderId();
        this.events = (from.getEvents() != null) ?
                from.getEvents().toArray(new ShipmentEventInfo[from.getEvents().size()]) :
                new ShipmentEventInfo[0];
        this.deliveryAddress = from.getDeliveryAddress();
        this.contactName = from.getContactName();
        this.primaryContactPhone = from.getPrimaryContactPhone();
        this.alternateContactPhone = from.getAlternateContactPhone();
    }

    public ShipmentRecord toShipmentRecord()
    {
        ShipmentRecord result = new ShipmentRecord();
        result.setOrderId(orderId);
        result.setDeliveryAddress(deliveryAddress);
        result.setPrimaryContactPhone(primaryContactPhone);
        result.setContactName(contactName);
        result.setAlternateContactPhone(alternateContactPhone);
        if (events != null)
        {
            for (ShipmentEventInfo info : events)
            {
                result.addEvent(info);
            }
        }
        return result;
    }
}



================================================
FILE: src/Backend/OrderService/src/main/resources/application.properties
================================================
# suppress inspection "UnusedProperty" for whole file
###########
#
# This properties file is intended for use with debugging, staging and production system deployment. Not
# suitable for configuring unit test execution.
#
###########

#
# Service configuration. These apply when running under Spring Boot Actuator, not when deploying under
# an application server, for which configuration is done separately.
#
server.port: 8080
management.port: 8081
management.address: 127.0.0.1

#
# Configuration elements specific to the Fabrikant ordering service.
#
ordering.storage: mongodb
ordering.pingMessage: Configuration data is from inside the WAR
ordering.validationMessage: This is version 1.0.3

#
# Default MongoDB configuration parameters. Override on Tomcat7 production system by placing
# an application.properties file in the root Tomcat7 directory.
#
mongodb.host: localhost
mongodb.database: ordering





================================================
FILE: src/Backend/OrderService/src/main/resources/ApplicationInsights.xml
================================================
<?xml version="1.0" encoding="utf-8"?>
<ApplicationInsights xmlns="http://schemas.microsoft.com/ApplicationInsights/2013/Settings" schemaVersion="2014-05-30">
    <!--
      Learn more about Application Insights configuration with ApplicationInsights.config here:
      http://go.microsoft.com/fwlink/?LinkID=513840
    -->
    <InstrumentationKey></InstrumentationKey>
    <TelemetryModules>
        <Add type="com.microsoft.applicationinsights.web.extensibility.modules.WebRequestTrackingTelemetryModule"/>
        <Add type="com.microsoft.applicationinsights.web.extensibility.modules.WebSessionTrackingTelemetryModule"/>
        <Add type="com.microsoft.applicationinsights.web.extensibility.modules.WebUserTrackingTelemetryModule"/>
    </TelemetryModules>
    <ContextInitializers>
    </ContextInitializers>
    <TelemetryInitializers>
        <Add type="com.microsoft.applicationinsights.web.extensibility.initializers.WebOperationIdTelemetryInitializer"/>
        <Add type="com.microsoft.applicationinsights.web.extensibility.initializers.WebOperationNameTelemetryInitializer"/>
        <Add type="com.microsoft.applicationinsights.web.extensibility.initializers.WebSessionTelemetryInitializer"/>
        <Add type="com.microsoft.applicationinsights.web.extensibility.initializers.WebUserTelemetryInitializer"/>
        <Add type="com.microsoft.applicationinsights.web.extensibility.initializers.WebUserAgentTelemetryInitializer"/>
    </TelemetryInitializers>
    <TelemetryChannel>
        <DeveloperMode>true</DeveloperMode>
    </TelemetryChannel>
    <Channel>
        <!--<Type>com.microsoft.applicationinsights.channel.StdOutChannel</Type>-->
        <!--<EndpointAddress>http://localhost:8888/v2/track</EndpointAddress>-->
    </Channel>
</ApplicationInsights>


================================================
FILE: src/Backend/OrderService/src/main/resources/buildinfo.properties
================================================
build.number: 0.1.#
build.timestamp: 2015-05-02T13:11:31-04:00



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/ConfigurationRule.java
================================================
package smpl.ordering;

import org.junit.rules.TestRule;
import org.junit.runner.Description;
import org.junit.runners.model.Statement;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

/**
 * This JUnit rule is used to enforce the availability of an ApplicationContext, which is essential for
 * creating beans and auto-wiring.
 */
public class ConfigurationRule
        implements TestRule
{
    @Override
    public Statement apply(Statement statement, Description description)
    {
        AnnotationConfigApplicationContext context =
                new AnnotationConfigApplicationContext(TestOrderingConfiguration.class);
        return statement;
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/TestOrderingConfiguration.java
================================================
package smpl.ordering;

import com.microsoft.applicationinsights.TelemetryClient;
import com.microsoft.applicationinsights.TelemetryConfiguration;
import com.mongodb.MongoClient;
import com.mongodb.MongoClientOptions;
import com.mongodb.ServerAddress;
import org.springframework.beans.BeansException;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.mongodb.core.MongoTemplate;
import smpl.ordering.repositories.RepositoryFactory;

import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

@Configuration
@ComponentScan
@EnableAutoConfiguration
public class TestOrderingConfiguration
        implements ApplicationContextAware
{
    public
    @Bean
    MongoTemplate mongoTemplate() throws Exception
    {
        Properties props = PropertyHelper.getProperties();

        MongoClientOptions.Builder options = MongoClientOptions.builder();
        options.socketKeepAlive(false);

        // Compared to the product configuration, this is a bit primitive, but trying to autowire the unit test
        // configuration turned out to be rather complicated, so getting properties manually is a better
        // way to go.
        String mongoHost = props.getProperty("mongodb.host");
        String mongoPort = System.getenv("MONGO_PORT"); // Anticipating use within a docker container.

        if (!Utility.isNullOrEmpty(mongoPort))
        {
            URL portUrl = new URL(mongoPort.replace("tcp:", "http:"));
            mongoHost = portUrl.getHost();
        }

        String mongoDB = props.getProperty("mongodb.database");

        if (s_mongoClient == null)
        {
            if (mongoDB != null && !mongoDB.isEmpty() && mongoHost != null && !mongoHost.isEmpty())
            {
                List<ServerAddress> hosts = new ArrayList<>();
                for (String host : mongoHost.split(","))
                {
                    hosts.add(new ServerAddress(host));
                }
                s_mongoClient = new MongoClient(hosts, options.build());

            }
            else
            {
                s_mongoClient = new MongoClient();
            }
        }

        return new MongoTemplate(s_mongoClient, mongoDB);
    }

    public
    @Bean
    TelemetryClient getTelemetryClient()
    {
        if (TelemetryConfiguration.getActive() == null)
        {
            return null;
        }

        TelemetryClient client = new TelemetryClient(TelemetryConfiguration.getActive());
        return client;
    }

    public
    @Bean
    RepositoryFactory repositoryFactory()
    {
        // See comments about manually getting properties earlier in the file.
        Properties props = PropertyHelper.getProperties();
        String storage = props.getProperty("ordering.storage");
        RepositoryFactory.reset(storage);
        return RepositoryFactory.getFactory();
    }

    private static ApplicationContext applicationContext;

    private static MongoClient s_mongoClient;

    @Override
    public void setApplicationContext(ApplicationContext context) throws BeansException
    {
        applicationContext = context;
    }

    public static ApplicationContext getApplicationContext()
    {
        return applicationContext;
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/UtilityTest.java
================================================
package smpl.ordering;

import com.microsoft.applicationinsights.TelemetryClient;
import org.junit.Rule;
import org.junit.Test;

import javax.validation.constraints.AssertFalse;

import static org.junit.Assert.*;

public class UtilityTest
{
    @Rule
    public ConfigurationRule rule = new ConfigurationRule();

    @Test
    public void testIsNullOrEmpty() throws Exception
    {
        assertTrue(Utility.isNullOrEmpty(null));
        assertTrue(Utility.isNullOrEmpty(""));
        assertFalse(Utility.isNullOrEmpty("test"));
        assertFalse(Utility.isNullOrEmpty(" "));
    }

    @Test
    public void testGetTelemetryClient() throws Exception
    {
        // Verify that the Telemetry client used for unit tests is disabled.
        TelemetryClient client = Utility.getTelemetryClient();
        assertTrue(true);//client.isDisabled());
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/controllers/CatalogControllerTest.java
================================================
package smpl.ordering.controllers;

import org.junit.Before;
import org.junit.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import smpl.ordering.TestPath;
import smpl.ordering.models.CatalogItem;
import smpl.ordering.repositories.CatalogItemsRepository;
import smpl.ordering.repositories.RepositoryFactory;

import java.util.List;

import static org.junit.Assert.*;

@SuppressWarnings("unchecked")
public class CatalogControllerTest
{
    @Before
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");

        // Make sure the repository is empty.
        CatalogItemsRepository catalog = RepositoryFactory.getCatalogItemsRepository();
        ((TestPath) catalog).reset();

        controller = new CatalogController();
    }

    @Test
    public void testAddCatalogItem() throws Exception
    {
        ResponseEntity response =
                controller.addCatalogItem(new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        // Negative test case

        response = controller.addCatalogItem(new CatalogItem("", "Shelving", 11.50, 4, 3));
        assertNotNull(response);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());

        response = controller.addCatalogItem(new CatalogItem("ACC-0001", "Shelving", 11.50, 4, 3));
        assertNotNull(response);
        assertEquals(HttpStatus.CONFLICT, response.getStatusCode());
    }

    @Test
    public void testUpsertCatalogItem() throws Exception
    {
        ResponseEntity response =
                controller.upsertCatalogItem("ACC-0001", new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3));
        assertNotNull(response);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());

        response = controller.addCatalogItem(new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response =
                controller.upsertCatalogItem("ACC-0001", new CatalogItem("ACC-0001", "Shelving", 12.50, 4, 3));
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        ResponseEntity<CatalogItem> getResponse = controller.getCatalogItem("ACC-0001");
        assertNotNull(getResponse);
        assertNotNull(getResponse.getBody());
        assertEquals(HttpStatus.OK, getResponse.getStatusCode());

        CatalogItem catalogItem = getResponse.getBody();
        assertEquals("ACC-0001", catalogItem.getSkuNumber());
        assertEquals(12.50, catalogItem.getPrice(), 0.01);
    }

    @Test
    public void testGetCatalogItems() throws Exception
    {
        {
            ResponseEntity<List<CatalogItem>> response = controller.getCatalogItems();
            assertNotNull(response);
            assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());

            List<CatalogItem> list = response.getBody();
            assertNull(list);
        }

        controller.addCatalogItem(new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3));
        controller.addCatalogItem(new CatalogItem("ACC-0002", "Refrigeration Unit", 2500, 2, 7));
        controller.addCatalogItem(new CatalogItem("ACC-0003", "Freezer Unit", 4500, 4, 5));

        {
            ResponseEntity<List<CatalogItem>> response = controller.getCatalogItems();
            assertNotNull(response);
            assertEquals(HttpStatus.OK, response.getStatusCode());

            List<CatalogItem> list = response.getBody();
            assertEquals(3, list.size());
        }
    }

    @Test
    public void testGetCatalogItem() throws Exception
    {
        {
            ResponseEntity<CatalogItem> response = controller.getCatalogItem("ACC-0002");
            assertNotNull(response);
            assertNull(response.getBody());
            assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        }

        controller.addCatalogItem(new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3));
        controller.addCatalogItem(new CatalogItem("ACC-0002", "Refrigeration Unit", 2500, 2, 7));
        controller.addCatalogItem(new CatalogItem("ACC-0003", "Freezer Unit", 4500, 4, 5));

        {
            ResponseEntity<CatalogItem> response = controller.getCatalogItem("ACC-0002");
            assertNotNull(response);
            assertNotNull(response.getBody());
            assertEquals(HttpStatus.OK, response.getStatusCode());

            CatalogItem catalogItem = response.getBody();
            assertEquals("ACC-0002", catalogItem.getSkuNumber());
        }
    }

    @Test
    public void testRemoveCatalogItem() throws Exception
    {
        ResponseEntity response = controller.addCatalogItem(new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.removeCatalogItem("ACC-0001");
        assertNotNull(response);
        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());

        ResponseEntity<CatalogItem> getResponse = controller.getCatalogItem("ACC-0001");
        assertNotNull(getResponse);
        assertEquals(HttpStatus.NOT_FOUND, getResponse.getStatusCode());
    }

    private CatalogController controller;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/controllers/DealerControllerTest.java
================================================
package smpl.ordering.controllers;

import org.junit.Before;
import org.junit.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import smpl.ordering.TestPath;
import smpl.ordering.models.DealerInfo;
import smpl.ordering.repositories.DealersRepository;
import smpl.ordering.repositories.DealersRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;

import java.util.List;

import static org.junit.Assert.*;

@SuppressWarnings("unchecked")
public class DealerControllerTest
{

    @Before
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");

        // Make sure the repository is empty.
        DealersRepository dealers = RepositoryFactory.getDealersRepository();
        ((TestPath) dealers).reset();

        controller = new DealerController();
    }

    @Test
    public void testAddDealer() throws Exception
    {
        ResponseEntity response = controller.addDealer(DealersRepositoryTest.createDealer("DLR-1"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        // Negative test case

        response = controller.addDealer(DealersRepositoryTest.createDealer(null));
        assertNotNull(response);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());

        response = controller.addDealer(DealersRepositoryTest.createDealer(""));
        assertNotNull(response);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());

        response = controller.addDealer(DealersRepositoryTest.createDealer("DLR-1"));
        assertNotNull(response);
        assertEquals(HttpStatus.CONFLICT, response.getStatusCode());
    }

    @Test
    public void testUpdateDealer() throws Exception
    {
        ResponseEntity response = controller.addDealer(DealersRepositoryTest.createDealer("DLR-1"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        DealerInfo update = DealersRepositoryTest.createDealer("DLR-1");
        update.setContact("Jane Doe");

        response = controller.updateDealer("DLR-1", update);
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        ResponseEntity<DealerInfo> getDealer = controller.getDealer("DLR-1");
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        update = getDealer.getBody();
        assertNotNull(update);
        assertEquals("Jane Doe", update.getContact());

        // Negative tests

        update.setName(null);
        response = controller.updateDealer("DLR-1", update);
        assertNotNull(response);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());

        update.setName("");
        response = controller.updateDealer("DLR-1", update);
        assertNotNull(response);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());

        update = DealersRepositoryTest.createDealer("DLR-2");
        response = controller.updateDealer("DLR-2", update);
        assertNotNull(response);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
    }

    @Test
    public void testGetDealers() throws Exception
    {
        {
            ResponseEntity<List<DealerInfo>> response = controller.getDealers();
            assertNotNull(response);
            assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
            assertNull(response.getBody());
        }

        createDealers();

        {
            ResponseEntity<List<DealerInfo>> response = controller.getDealers();
            assertNotNull(response);
            assertEquals(HttpStatus.OK, response.getStatusCode());

            List<DealerInfo> dealers = response.getBody();
            assertNotNull(dealers);
            assertEquals(4, dealers.size());
        }
    }

    private void createDealers()
    {
        controller.addDealer(DealersRepositoryTest.createDealer("DLR-1"));
        controller.addDealer(DealersRepositoryTest.createDealer("DLR-2"));
        controller.addDealer(DealersRepositoryTest.createDealer("DLR-3"));
        controller.addDealer(DealersRepositoryTest.createDealer("DLR-4"));
    }

    @Test
    public void testGetDealer() throws Exception
    {
        {
            ResponseEntity<DealerInfo> response = controller.getDealer("DLR-1");
            assertNotNull(response);
            assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
            assertNull(response.getBody());
        }

        createDealers();

        {
            ResponseEntity<DealerInfo> response = controller.getDealer("DLR-1");
            assertNotNull(response);
            assertEquals(HttpStatus.OK, response.getStatusCode());

            DealerInfo dealer = response.getBody();
            assertNotNull(dealer);
            assertEquals("DLR-1", dealer.getName());
        }
    }

    @Test
    public void testRemoveDealer() throws Exception
    {
        createDealers();

        {
            ResponseEntity<List<DealerInfo>> response = controller.getDealers();
            assertNotNull(response);
            assertEquals(HttpStatus.OK, response.getStatusCode());

            List<DealerInfo> dealers = response.getBody();
            assertNotNull(dealers);
            assertEquals(4, dealers.size());
        }

        ResponseEntity remove = controller.removeDealer("DLR-1");
        assertNotNull(remove);
        assertEquals(HttpStatus.NO_CONTENT, remove.getStatusCode());

        {
            ResponseEntity<List<DealerInfo>> response = controller.getDealers();
            assertNotNull(response);
            assertEquals(HttpStatus.OK, response.getStatusCode());

            List<DealerInfo> dealers = response.getBody();
            assertNotNull(dealers);
            assertEquals(3, dealers.size());
        }
    }

    private DealerController controller;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/controllers/OrderControllerTest.java
================================================
package smpl.ordering.controllers;

import org.junit.Before;
import org.junit.Test;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import smpl.ordering.TestPath;
import smpl.ordering.models.*;
import smpl.ordering.repositories.QuoteRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;

import java.net.URI;
import java.text.DateFormat;
import java.util.Date;
import java.util.List;

import static org.junit.Assert.*;

@SuppressWarnings("unchecked")
public class OrderControllerTest
{

    @Before
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");

        // Make sure the repositories are empty.
        ((TestPath) RepositoryFactory.getDealersRepository()).reset();
        ((TestPath) RepositoryFactory.getCatalogItemsRepository()).reset();
        ((TestPath) RepositoryFactory.getQuoteRepository()).reset();
        ((TestPath) RepositoryFactory.getOrderRepository()).reset();

        quotes = new QuoteController();
        controller = new OrderController();
    }

    @Test
    public void testCreateOrder() throws Exception
    {
        ResponseEntity response = quotes.createQuote(QuoteRepositoryTest.createQuote("quote-4711"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.createOrder("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        Order order = ((ResponseEntity<Order>) response).getBody();
        assertEquals("quote-4711", order.getQuoteId());
        HttpHeaders headers = response.getHeaders();
        assertEquals(new URI("/orders/" + order.getOrderId()), headers.getLocation());

        response = controller.getOrderById(order.getOrderId());
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals("quote-4711", order.getQuoteId());
    }

    @Test
    public void testGetOrderById() throws Exception
    {
        ResponseEntity response = controller.getOrderById("order-not-there");
        assertNotNull(response);
        assertNull(response.getBody());
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());

        response = quotes.createQuote(QuoteRepositoryTest.createQuote("quote-4711"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.createOrder("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        Order refOrder = ((ResponseEntity<Order>) response).getBody();
        assertNotNull(refOrder);

        response = controller.getOrderById(refOrder.getOrderId());
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        Order order = ((ResponseEntity<Order>) response).getBody();
        assertNotNull(order);

        assertEquals(refOrder, order);
    }

    @Test
    public void testGetQuotesByDealerName() throws Exception
    {
        ResponseEntity response = controller.getOrdersByDealerName("DLR-1", OrderStatus.None);
        assertNotNull(response);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());

        List<Order> orders = ((ResponseEntity<List<Order>>) response).getBody();
        assertNull(orders);

        response = quotes.createQuote(QuoteRepositoryTest.createQuote("quote-4711"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.createOrder("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        Order refOrder = ((ResponseEntity<Order>) response).getBody();
        assertNotNull(refOrder);

        response = controller.getOrdersByDealerName("DLR-1", OrderStatus.Created);
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        orders = ((ResponseEntity<List<Order>>) response).getBody();
        assertNotNull(orders);
        assertEquals(1, orders.size());

        assertEquals(refOrder, orders.get(0));

        // Case insensitive.

        response = controller.getOrdersByDealerName("dlr-1", OrderStatus.Created);
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        // optional dealer
        response = controller.getOrdersByDealerName("", OrderStatus.Created);
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        // optional dealer, status
        response = controller.getOrdersByDealerName("", OrderStatus.None);
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }

    @Test
    public void testAddEvent() throws Exception
    {
        ResponseEntity response = quotes.createQuote(QuoteRepositoryTest.createQuote("quote-4711"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.createOrder("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        Order refOrder = ((ResponseEntity<Order>) response).getBody();
        assertNotNull(refOrder);

        response = controller.addEvent(refOrder.getOrderId(), new OrderEventInfo("testAddEvent-1"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.addEvent(refOrder.getOrderId(), new OrderEventInfo("testAddEvent-2"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.addEvent(refOrder.getOrderId(), new OrderEventInfo("1/1/2000", "testAddEvent-3"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.getOrderById(refOrder.getOrderId());
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        Order order = ((ResponseEntity<Order>) response).getBody();
        assertNotNull(order);
        assertNotNull(order.getEvents());
        assertEquals(3, order.getEvents().size());

        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);
        String today = df.format(new Date());

        for (int i = 0; i < order.getEvents().size(); ++i)
        {
            assertEquals(today, order.getEvents().get(i).getDate());
            assertTrue(order.getEvents().get(i).getComments().startsWith("testAddEvent"));
        }
    }

    @Test
    public void testUpdate() throws Exception
    {
        ResponseEntity response = quotes.createQuote(QuoteRepositoryTest.createQuote("quote-4711"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.createOrder("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        Order refOrder = ((ResponseEntity<Order>) response).getBody();
        assertNotNull(refOrder);

        response = controller.updateStatus(refOrder.getOrderId(), new OrderUpdateInfo(OrderStatus.Confirmed, "testUpdate-1"));
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        response = controller.updateStatus(refOrder.getOrderId(), new OrderUpdateInfo(OrderStatus.Started, "testUpdate-2"));
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        response = controller.updateStatus(refOrder.getOrderId(), new OrderUpdateInfo(OrderStatus.Built, "testUpdate-3"));
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        response = controller.updateStatus(refOrder.getOrderId(), new OrderUpdateInfo(OrderStatus.Shipped, "testUpdate-4"));
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        response = controller.getOrderById(refOrder.getOrderId());
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        Order order = ((ResponseEntity<Order>) response).getBody();
        assertNotNull(order);
        assertNotNull(order.getEvents());
        assertEquals(4, order.getEvents().size());

        DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);
        String today = df.format(new Date());

        for (int i = 0; i < order.getEvents().size(); ++i)
        {
            assertEquals(today, order.getEvents().get(i).getDate());
            assertTrue(order.getEvents().get(i).getComments().startsWith("testUpdate"));
        }
    }

    private QuoteController quotes;
    private OrderController controller;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/controllers/QuoteControllerTest.java
================================================
package smpl.ordering.controllers;

import org.junit.Before;
import org.junit.Test;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import smpl.ordering.TestPath;
import smpl.ordering.models.Quote;
import smpl.ordering.repositories.QuoteRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;

import java.net.URI;
import java.util.List;

import static org.junit.Assert.*;

@SuppressWarnings("unchecked")
public class QuoteControllerTest
{

    @Before
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");

        // Make sure the repositories are empty.
        ((TestPath) RepositoryFactory.getDealersRepository()).reset();
        ((TestPath) RepositoryFactory.getCatalogItemsRepository()).reset();
        ((TestPath) RepositoryFactory.getQuoteRepository()).reset();

        controller = new QuoteController();
    }


    @SuppressWarnings("ResultOfMethodCallIgnored")
    @Test
    public void testCreateQuote() throws Exception
    {
        ResponseEntity response = controller.createQuote(QuoteRepositoryTest.createQuote("quote-4711"));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        Quote q = ((ResponseEntity<Quote>) response).getBody();
        assertNotNull(q);
        assertEquals("quote-4711", q.getQuoteId());
        HttpHeaders headers = response.getHeaders();
        assertEquals(new URI("/quotes/quote-4711"), headers.getLocation());

        response = controller.createQuote(QuoteRepositoryTest.createQuote(null));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        q = ((ResponseEntity<Quote>) response).getBody();
        assertNotNull(q);
        // The default quote id is a random integer. We'll get an exception if not.
        Integer.parseInt(q.getQuoteId());
        headers = response.getHeaders();
        assertEquals(new URI("/quotes/" + q.getQuoteId()), headers.getLocation());

        response = controller.createQuote(QuoteRepositoryTest.createQuote(""));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        q = ((ResponseEntity<Quote>) response).getBody();
        assertNotNull(q);
        // The default quote id is a random integer. We'll get an exception if not.
        Integer.parseInt(q.getQuoteId());
        headers = response.getHeaders();
        assertEquals(new URI("/quotes/" + q.getQuoteId()), headers.getLocation());

        response = controller.createQuote(QuoteRepositoryTest.createQuote("quote-4711"));
        assertNotNull(response);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
    }

    @Test
    public void testUpdateQuote() throws Exception
    {
        Quote q = QuoteRepositoryTest.createQuote("quote-4711");

        ResponseEntity response = controller.updateQuote("quote-4711", q);
        assertNotNull(response);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());

        response = controller.createQuote(q);
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.updateQuote("quote-4711", q);
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        response = controller.getQuoteById("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        q = ((ResponseEntity<Quote>) response).getBody();
        assertNotNull(q);
        assertEquals("quote-4711", q.getQuoteId());
    }

    @Test
    public void testGetQuoteById() throws Exception
    {
        ResponseEntity response = controller.getQuoteById("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());

        createNewQuote();
    }

    private void createNewQuote()
    {
        Quote q = QuoteRepositoryTest.createQuote("quote-4711");
        ResponseEntity response = controller.createQuote(q);
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.getQuoteById("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());
    }

    @Test
    public void testGetQuotesByCustomerName() throws Exception
    {
        ResponseEntity response = controller.getQuotesByCustomerName("cust-");
        assertNotNull(response);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());

        Quote q = QuoteRepositoryTest.createQuote("quote-4711");
        response = controller.createQuote(q);
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.getQuotesByCustomerName("cust-");
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        List<Quote> quotes = ((ResponseEntity<List<Quote>>) response).getBody();
        assertNotNull(quotes);
        assertEquals(1, quotes.size());

        controller.createQuote(QuoteRepositoryTest.createQuote("quote-4712"));

        response = controller.getQuotesByCustomerName("cust-");
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        quotes = ((ResponseEntity<List<Quote>>) response).getBody();
        assertNotNull(quotes);
        assertEquals(2, quotes.size());
    }

    @Test
    public void testDeleteQuote() throws Exception
    {
        ResponseEntity response = controller.deleteQuote("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());

        createNewQuote();

        response = controller.deleteQuote("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());

        response = controller.getQuoteById("quote-4711");
        assertNotNull(response);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
    }


    private QuoteController controller;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/controllers/ShipmentControllerTest.java
================================================
package smpl.ordering.controllers;

import org.junit.Before;
import org.junit.Test;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import smpl.ordering.TestPath;
import smpl.ordering.models.*;
import smpl.ordering.repositories.QuoteRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;
import smpl.ordering.repositories.ShipmentRepositoryTest;

import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

@SuppressWarnings("unchecked")
public class ShipmentControllerTest
{
    @Before
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");

        // Make sure the repositories are empty.
        ((TestPath) RepositoryFactory.getDealersRepository()).reset();
        ((TestPath) RepositoryFactory.getCatalogItemsRepository()).reset();
        ((TestPath) RepositoryFactory.getQuoteRepository()).reset();
        ((TestPath) RepositoryFactory.getOrderRepository()).reset();
        ((TestPath) RepositoryFactory.getShipmentRepository()).reset();

        quotes = new QuoteController();
        orders = new OrderController();
        controller = new ShipmentController();

    }

    @Test
    public void testCreateShipment()
    {
        ShipmentRecord info = ShipmentRepositoryTest.createShipmentRecord("order-quote-4711");

        ResponseEntity response = controller.createShipmentRecord(info);
        assertNotNull(response);
        assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());

        createQuoteAndOrder("quote-4711");

        response = controller.createShipmentRecord(info);
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());
    }

    @Test
    public void testGetAllShipments()
    {
        Order order = createQuoteAndOrder("quote-4711");

        ResponseEntity response = controller.createShipmentRecord(ShipmentRepositoryTest.createShipmentRecord(order.getOrderId()));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.getShipments(OrderStatus.None);
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        List<ShipmentRecord> list = ((ResponseEntity<List<ShipmentRecord>>) response).getBody();
        assertNotNull(list);
        assertEquals(1, list.size());
        assertNotNull(list.get(0).getEvents());
        assertEquals(order.getOrderId(), list.get(0).getOrderId());
    }

    @Test
    public void testGetShipmentsByStatus()
    {
        Order order = createQuoteAndOrder("quote-4711");

        ResponseEntity response = controller.createShipmentRecord(ShipmentRepositoryTest.createShipmentRecord(order.getOrderId()));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.getShipments(OrderStatus.Created);
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        List<ShipmentRecord> list = ((ResponseEntity<List<ShipmentRecord>>) response).getBody();
        assertNotNull(list);
        assertEquals(1, list.size());
        assertNotNull(list.get(0).getEvents());
        assertEquals(order.getOrderId(), list.get(0).getOrderId());

        response = orders.updateStatus(order.getOrderId(), new OrderUpdateInfo(OrderStatus.Shipped, "The thing has shipped"));
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        response = controller.getShipments(OrderStatus.Shipped);
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        list = ((ResponseEntity<List<ShipmentRecord>>) response).getBody();
        assertNotNull(list);
        assertEquals(1, list.size());
        assertNotNull(list.get(0).getEvents());
        assertEquals(order.getOrderId(), list.get(0).getOrderId());

        response = controller.getShipments(OrderStatus.Delivered);
        assertNotNull(response);
        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
    }

    @Test
    public void testUpdateShipment()
    {
        Order order = createQuoteAndOrder("quote-4711");

        ShipmentRecord record = ShipmentRepositoryTest.createShipmentRecord(order.getOrderId());

        ResponseEntity response = controller.createShipmentRecord(record);
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.getShipment(order.getOrderId());
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        ShipmentRecord rec = ((ResponseEntity<ShipmentRecord>) response).getBody();
        assertNotNull(rec);
        assertNotNull(rec.getEvents());
        assertEquals(0, rec.getEvents().size());

        record.setContactName("John Jones");

        controller.updateShipment(record.getOrderId(), record);

        response = controller.getShipment(record.getOrderId());
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        rec = ((ResponseEntity<ShipmentRecord>) response).getBody();
        assertNotNull(rec);
        assertEquals(rec.getContactName(), "John Jones");
        assertNotNull(rec.getEvents());
        assertEquals(0, rec.getEvents().size());
    }

    @Test
    public void testAddEventToShipment()
    {
        Order order = createQuoteAndOrder("quote-4711");

        ShipmentRecord record = ShipmentRepositoryTest.createShipmentRecord(order.getOrderId());

        ResponseEntity response = controller.createShipmentRecord(record);
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = controller.getShipment(order.getOrderId());
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        ShipmentRecord rec = ((ResponseEntity<ShipmentRecord>) response).getBody();
        assertNotNull(rec);
        assertNotNull(rec.getEvents());
        assertEquals(0, rec.getEvents().size());

        controller.addEvent(record.getOrderId(), new ShipmentEventInfo("12/13/2014", "The truck is on its way..."));

        response = controller.getShipment(record.getOrderId());
        assertNotNull(response);
        assertEquals(HttpStatus.OK, response.getStatusCode());

        rec = ((ResponseEntity<ShipmentRecord>) response).getBody();
        assertNotNull(rec);
        assertNotNull(rec.getEvents());
        assertEquals(1, rec.getEvents().size());
        assertEquals("The truck is on its way...", rec.getEvents().get(0).getComments());
    }

    @SuppressWarnings("SameParameterValue")
    private Order createQuoteAndOrder(String id)
    {
        ResponseEntity response = quotes.createQuote(QuoteRepositoryTest.createQuote(id));
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        response = orders.createOrder(id);
        assertNotNull(response);
        assertEquals(HttpStatus.CREATED, response.getStatusCode());

        return ((ResponseEntity<Order>) response).getBody();
    }


    private QuoteController quotes;
    private OrderController orders;
    private ShipmentController controller;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/CatalogItemsRepositoryTest.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.TestPath;
import smpl.ordering.models.CatalogItem;

import java.util.List;

import static org.junit.Assert.*;

public class CatalogItemsRepositoryTest
{
    protected void setUp() throws Exception
    {
        catalog = RepositoryFactory.getCatalogItemsRepository();
        ((TestPath) catalog).reset();

        catalog.upsertCatalogItem("ACC-0001", new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3), null);
        catalog.upsertCatalogItem("ACC-0002", new CatalogItem("ACC-0002", "Refrigeration Unit", 2500, 4, 3), null);
        catalog.upsertCatalogItem("ACC-0003", new CatalogItem("ACC-0003", "Freezer Unit", 4500, 4, 3), null);
    }

    protected void testGetCatalogItems()
    {
        List<CatalogItem> list = catalog.getCatalogItems();
        assertNotNull(list);
        assertEquals(3, list.size());
        assertEquals("ACC-0001", list.get(0).getSkuNumber());
        assertEquals("ACC-0002", list.get(1).getSkuNumber());
        assertEquals("ACC-0003", list.get(2).getSkuNumber());

        catalog.upsertCatalogItem("ACC-0004", new CatalogItem("ACC-0004", "Shelving", 13.50, 4, 3), null);
        list = catalog.getCatalogItems();
        assertEquals(4, list.size());

        assertEquals("ACC-0004", list.get(3).getSkuNumber());
    }

    protected void testGetCatalogItem()
    {
        assertEquals(10.50, catalog.getCatalogItem("ACC-0001").getPrice(), 0.01);
        assertEquals(2500, catalog.getCatalogItem("ACC-0002").getPrice(), 0.10);
        assertEquals(4500, catalog.getCatalogItem("ACC-0003").getPrice(), 0.10);
    }

    protected void testUpsertCatalogItem()
    {
        assertTrue(catalog.upsertCatalogItem("ACC-0001", new CatalogItem("ACC-0001", "Shelving", 11.50, 4, 3), null));
        assertFalse(catalog.upsertCatalogItem("ACC-0004", new CatalogItem("ACC-0004", "Shelving", 13.50, 4, 3), null));
        assertEquals(11.50, catalog.getCatalogItem("ACC-0001").getPrice(), 0.01);
    }

    protected void testRemoveCatalogItem()
    {
        assertTrue(catalog.removeCatalogItem("ACC-0001", null));
        assertFalse(catalog.removeCatalogItem("ACC-0004", null));
        List<CatalogItem> list = catalog.getCatalogItems();
        assertEquals(2, list.size());
        assertTrue(catalog.removeCatalogItem("ACC-0002", null));
        assertTrue(catalog.removeCatalogItem("ACC-0003", null));
        list = catalog.getCatalogItems();
        assertEquals(0, list.size());
    }

    private static CatalogItemsRepository catalog;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/DealersRepositoryTest.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.TestPath;
import smpl.ordering.models.DealerInfo;

import java.util.List;

import static org.junit.Assert.*;

public class DealersRepositoryTest
{
    public void setUp() throws Exception
    {
        repository = RepositoryFactory.getDealersRepository();
        ((TestPath) repository).reset();

        repository.upsertDealer(createDealer("DLR-1"), null);
        repository.upsertDealer(createDealer("DLR-2"), null);
        repository.upsertDealer(createDealer("DLR-3"), null);
        repository.upsertDealer(createDealer("DLR-4"), null);
    }

    public void testGetDealers()
    {
        List<DealerInfo> dealers = repository.getDealers();
        assertNotNull(dealers);
        assertEquals(4, dealers.size());
        for (DealerInfo info : dealers)
        {
            assertEquals("John Doe", info.getContact());
        }
        assertEquals("DLR-1", dealers.get(0).getName());
        assertEquals("DLR-2", dealers.get(1).getName());
        assertEquals("DLR-3", dealers.get(2).getName());
        assertEquals("DLR-4", dealers.get(3).getName());
    }

    public void testGetDealer()
    {
        DealerInfo dealer = repository.getDealer("DLR-1");
        assertEquals("DLR-1@tempuri.org", dealer.getEmail());
        dealer = repository.getDealer("DLR-5");
        assertNull(dealer);
    }

    public void testUpsertDealer()
    {
        DealerInfo dealer = repository.getDealer("DLR-1");
        assertEquals("DLR-1@tempuri.org", dealer.getEmail());
        dealer.setEmail("jd@tempuri.org");
        assertTrue(repository.upsertDealer(dealer, null));
        dealer = repository.getDealer("DLR-1");
        assertEquals("jd@tempuri.org", dealer.getEmail());

        assertFalse(repository.upsertDealer(createDealer("DLR-5"), null));
        dealer = repository.getDealer("DLR-5");
        assertNotNull(dealer);
        assertEquals("DLR-5@tempuri.org", dealer.getEmail());

        assertEquals(5, repository.getDealers().size());
    }

    public void testRemoveDealer()
    {
        assertTrue(repository.removeDealer("DLR-1", null));
        assertEquals(3, repository.getDealers().size());

        assertFalse(repository.removeDealer("DLR-5", null));

        assertTrue(repository.removeDealer("DLR-2", null));
        assertTrue(repository.removeDealer("DLR-3", null));
        assertTrue(repository.removeDealer("DLR-4", null));

        assertFalse(repository.removeDealer("DLR-2", null));
    }

    public static DealerInfo createDealer(String name)
    {
        DealerInfo info = new DealerInfo();
        info.setName(name);
        info.setPhone("425-555-1212");
        info.setContact("John Doe");
        info.setEmail(name + "@tempuri.org");
        info.setAddress("1234 Main St., Redmond, WA 98052");
        return info;
    }

    private DealersRepository repository;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/OrderRepositoryTest.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.ConflictingRequestException;
import smpl.ordering.TestPath;
import smpl.ordering.models.*;

import java.util.List;

import static org.junit.Assert.*;

@SuppressWarnings("EmptyCatchBlock")
public class OrderRepositoryTest
{
    public void setUp() throws Exception
    {
        // Set up some data for the order tests to access.

        DealersRepository dealers = RepositoryFactory.getDealersRepository();
        ((TestPath)dealers).reset();

        dealers.upsertDealer(DealersRepositoryTest.createDealer("DLR-1"), null);
        dealers.upsertDealer(DealersRepositoryTest.createDealer("DLR-2"), null);
        dealers.upsertDealer(DealersRepositoryTest.createDealer("DLR-3"), null);
        dealers.upsertDealer(DealersRepositoryTest.createDealer("DLR-4"), null);

        CatalogItemsRepository catalog = RepositoryFactory.getCatalogItemsRepository();
        ((TestPath)catalog).reset();

        catalog.upsertCatalogItem("ACC-0001", new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3), null);
        catalog.upsertCatalogItem("ACC-0002", new CatalogItem("ACC-0002", "Refrigeration Unit", 2500, 2, 7), null);
        catalog.upsertCatalogItem("ACC-0003", new CatalogItem("ACC-0003", "Freezer Unit", 4500, 4, 5), null);

        QuoteRepository quotes = RepositoryFactory.getQuoteRepository();
        ((TestPath)quotes).reset();
        repository = RepositoryFactory.getOrderRepository();
        ((TestPath)repository).reset();

        for (int i = 0; i < 10; ++i)
        {
            Quote template = quotes.createQuote(QuoteRepositoryTest.createQuote(String.format("quote-%s", i)));
            repository.createOrder(template.getQuoteId());
        }
    }

    public void testHasOrder()
    {
        assertTrue(repository.hasOrder("order-quote-0"));
        assertFalse(repository.hasOrder("order-not-there"));
    }

    public void testGetOrder()
    {
        Order o1 = repository.getOrder("order-quote-0");
        assertNotNull(o1);
        assertNull(repository.getOrder("order-not-there"));

        String qid = o1.getQuoteId();
        assertEquals("quote-0", qid);
    }

    public void testGetOrdersByQuoteId()
    {
        Order order = repository.getOrderByQuoteId("quote-100");
        assertNull(order);

        order = repository.getOrderByQuoteId("quote-1");
        assertNotNull(order);
        assertEquals("quote-1", order.getQuoteId());
    }

    public void testGetOrdersByStatus()
    {
        List<Order> orders = repository.getOrdersByStatus(OrderStatus.Delivered);
        assertNotNull(orders);
        assertEquals(0, orders.size());

        orders = repository.getOrdersByStatus(OrderStatus.Created);
        assertNotNull(orders);
        assertEquals(10, orders.size());
    }


    public void testGetOrdersByDealerName()
    {
        List<Order> orders = repository.getOrdersByDealerName("DLR-1", OrderStatus.Created);
        assertNotNull(orders);
        assertEquals(10, orders.size());

        orders = repository.getOrdersByDealerName("DLR-100", OrderStatus.Created);
        assertNotNull(orders);
        assertEquals(0, orders.size());

        orders = repository.getOrdersByDealerName("DLR-1", OrderStatus.Confirmed);
        assertNotNull(orders);
        assertEquals(0, orders.size());
    }

    public void testCreateOrder() throws Exception
    {
        QuoteRepository quotes = RepositoryFactory.getQuoteRepository();

        Quote template = quotes.createQuote(QuoteRepositoryTest.createQuote("quote-4711"));
        Order o1 = repository.createOrder(template.getQuoteId());

        assertNotNull(o1);
        assertEquals(o1.getQuoteId(), "quote-4711");
        assertEquals(0, o1.getEvents().size());
        assertEquals(OrderStatus.Created, o1.getStatus());

        List<Order> orders = repository.getOrdersByDealerName("DLR-1", OrderStatus.Created);
        assertNotNull(orders);
        assertEquals(11, orders.size());

        try {
            // Duplicate orders...
            assertNull(repository.createOrder(template.getQuoteId()));
        } catch (ConflictingRequestException bre) { }
    }

    public void testUpdateOrder() throws Exception
    {
        QuoteRepository quotes = RepositoryFactory.getQuoteRepository();

        Quote template = quotes.createQuote(QuoteRepositoryTest.createQuote("quote-4712"));
        Order o1 = repository.createOrder(template.getQuoteId());
        assertNotNull(o1);
        assertEquals(o1.getQuoteId(), "quote-4712");
        assertEquals(0, o1.getEvents().size());
        assertEquals(OrderStatus.Created, o1.getStatus());

        String orderId = o1.getOrderId();

        OrderEventInfo info = new OrderEventInfo();
        info.setDate("1/1/2001");
        info.setComments("This is a unit test");
        o1.addEvent(info);
        repository.updateOrder(o1.getOrderId(), o1, null);

        Order o2 = repository.getOrder(orderId);
        assertNotNull(o2);
        assertEquals(o2.getQuoteId(), "quote-4712");
        assertEquals(1, o2.getEvents().size());

        info = o2.getEvents().get(0);
        assertEquals("This is a unit test", info.getComments());
        assertEquals("1/1/2001", info.getDate());
    }

    public void testUpdateOrder1() throws Exception
    {
        QuoteRepository quotes = RepositoryFactory.getQuoteRepository();

        Quote template = quotes.createQuote(QuoteRepositoryTest.createQuote("quote-4713"));
        Order o1 = repository.createOrder(template.getQuoteId());
        assertNotNull(o1);
        assertEquals(o1.getQuoteId(), "quote-4713");
        assertEquals(0, o1.getEvents().size());
        assertEquals(OrderStatus.Created, o1.getStatus());

        String orderId = o1.getOrderId();

        OrderEventInfo info = new OrderEventInfo();
        info.setDate("1/2/2001");
        info.setComments("This is a unit test");
        OrderUpdateInfo update = new OrderUpdateInfo();
        update.setStatus(OrderStatus.Confirmed);
        update.setEventInfo(info);
        repository.updateOrder(o1.getOrderId(), update, null);

        Order o2 = repository.getOrder(orderId);
        assertNotNull(o2);
        assertEquals(o2.getQuoteId(), "quote-4713");
        assertEquals(1, o2.getEvents().size());
        assertEquals(OrderStatus.Confirmed, o2.getStatus());

        info = o2.getEvents().get(0);
        assertEquals("This is a unit test", info.getComments());
        assertEquals("1/2/2001", info.getDate());
    }

    private OrderRepository repository;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/QuoteRepositoryTest.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.BadRequestException;
import smpl.ordering.TestPath;
import smpl.ordering.models.CatalogItem;
import smpl.ordering.models.QuoteItemInfo;
import smpl.ordering.models.Quote;
import smpl.ordering.repositories.mock.test.MockDealersRepositoryTest;

import java.util.List;

import static org.junit.Assert.*;

@SuppressWarnings("EmptyCatchBlock")
public class QuoteRepositoryTest
{
    public void setUp() throws Exception
    {
        // Set up some data for the quote tests to access.

        repository = RepositoryFactory.getQuoteRepository();
        ((TestPath) repository).reset();

        DealersRepository dealers = RepositoryFactory.getDealersRepository();
        ((TestPath) dealers).reset();

        dealers.upsertDealer(MockDealersRepositoryTest.createDealer("DLR-1"), null);
        dealers.upsertDealer(MockDealersRepositoryTest.createDealer("DLR-2"), null);
        dealers.upsertDealer(MockDealersRepositoryTest.createDealer("DLR-3"), null);
        dealers.upsertDealer(MockDealersRepositoryTest.createDealer("DLR-4"), null);

        CatalogItemsRepository catalog = RepositoryFactory.getCatalogItemsRepository();
        ((TestPath) catalog).reset();

        catalog.upsertCatalogItem("ACC-0001", new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3), null);
        catalog.upsertCatalogItem("ACC-0002", new CatalogItem("ACC-0002", "Refrigeration Unit", 2500, 2, 7), null);
        catalog.upsertCatalogItem("ACC-0003", new CatalogItem("ACC-0003", "Freezer Unit", 4500, 4, 5), null);

        for (int i = 0; i < 10; ++i)
        {
            repository.createQuote(createQuote(String.format("quote-%s", i)));
        }
    }

    public void testGetQuote()
    {
        Quote q1 = repository.getQuote("quote-0");
        assertNotNull(q1);
        assertNull(repository.getQuote("quote-100"));

        assertEquals("quote-0", q1.getQuoteId());
        assertEquals("cust-quote-0", q1.getCustomerName());
        assertEquals(2, q1.getQuoteItems().size());

        QuoteItemInfo a0 = q1.getQuoteItems().get(0);
        QuoteItemInfo a1 = q1.getQuoteItems().get(1);

        assertTrue(
            ("ACC-0001".equals(a0.getSkuNumber()) && "ACC-0003".equals(a1.getSkuNumber())) ||
            ("ACC-0001".equals(a1.getSkuNumber()) && "ACC-0003".equals(a0.getSkuNumber())));
        assertTrue(
            (15 == a0.getAmount() && 1 == a1.getAmount()) ||
            (15 == a1.getAmount() && 1 == a0.getAmount()));
    }

    public void testGetQuotesByCustomerName()
    {
        List<Quote> q1 = repository.getQuotesByCustomerName("cust-quote-7");
        assertNotNull(q1);
        assertEquals(1, q1.size());
        List<Quote> q3 = repository.getQuotesByCustomerName("non-existent");
        assertNotNull(q3);
        assertTrue(q3.isEmpty());

        List<Quote> q2 = repository.getQuotesByCustomerName("cust-quote");
        assertNotNull(q2);
        assertEquals(10, q2.size());
    }

    public void testCreateQuote() throws Exception
    {
        Quote template = createQuote("New-Quote-1");

        Quote q1 = repository.createQuote(template);

        assertEquals(template, q1);

        try
        {
            // Duplicate
            repository.createQuote(template);
            fail("Duplicate quote not caught.");
        }
        catch (BadRequestException bre)
        {
        }
    }

    public void testUpdateQuote()
    {
        Quote q1 = repository.getQuote("quote-5");
        assertNotNull(q1);

        q1.setState("WA");
        assertTrue(repository.updateQuote("quote-5", q1, null));

        Quote q2 = repository.getQuote("quote-5");
        assertEquals(q1, q2);

        assertFalse(repository.updateQuote("quote-16", q1, null));
    }

    public void testRemoveQuote()
    {
        assertTrue(repository.removeQuote("quote-5", null));
        assertFalse(repository.removeQuote("quote-16", null));
        List<Quote> q2 = repository.getQuotesByCustomerName("cust-quote");
        assertNotNull(q2);
        assertEquals(9, q2.size());
    }

    public static Quote createQuote(String quoteId)
    {
        Quote quote = new Quote();
        quote.setQuoteId(quoteId);
        quote.setDealerName("DLR-1");
        quote.setCustomerName("cust-" + quoteId);
        quote.addQuoteItem("ACC-0001", 15);
        quote.addQuoteItem("ACC-0003", 1);
        return quote;
    }

    private QuoteRepository repository;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/ShipmentRepositoryTest.java
================================================
package smpl.ordering.repositories;

import smpl.ordering.BadRequestException;
import smpl.ordering.TestPath;
import smpl.ordering.models.*;

import java.util.List;

import static org.junit.Assert.*;

@SuppressWarnings("EmptyCatchBlock")
public class ShipmentRepositoryTest
{
    public void setUp() throws Exception
    {
        // Set up some data for the order tests to access.

        DealersRepository dealers = RepositoryFactory.getDealersRepository();
        ((TestPath) dealers).reset();

        dealers.upsertDealer(DealersRepositoryTest.createDealer("DLR-1"), null);
        dealers.upsertDealer(DealersRepositoryTest.createDealer("DLR-2"), null);
        dealers.upsertDealer(DealersRepositoryTest.createDealer("DLR-3"), null);
        dealers.upsertDealer(DealersRepositoryTest.createDealer("DLR-4"), null);

        CatalogItemsRepository catalog = RepositoryFactory.getCatalogItemsRepository();
        ((TestPath) catalog).reset();

        catalog.upsertCatalogItem("ACC-0001", new CatalogItem("ACC-0001", "Shelving", 10.50, 4, 3), null);
        catalog.upsertCatalogItem("ACC-0002", new CatalogItem("ACC-0002", "Refrigeration Unit", 2500, 2, 7), null);
        catalog.upsertCatalogItem("ACC-0003", new CatalogItem("ACC-0003", "Freezer Unit", 4500, 4, 5), null);

        QuoteRepository quotes = RepositoryFactory.getQuoteRepository();
        ((TestPath) quotes).reset();
        orders = RepositoryFactory.getOrderRepository();
        ((TestPath) orders).reset();

        shipments = RepositoryFactory.getShipmentRepository();
        ((TestPath) shipments).reset();

        for (int i = 0; i < 10; ++i)
        {
            Quote template = quotes.createQuote(QuoteRepositoryTest.createQuote(String.format("quote-%s", i)));
            Order order = orders.createOrder(template.getQuoteId());
            if (i < 5)
            {
                shipments.createShipment(createShipmentRecord(order.getOrderId()));
                order.setStatus(OrderStatus.Shipped);
                orders.updateOrder(order.getOrderId(), order, null);
            }
        }
    }

    public void testGetShipments()
    {
        List<ShipmentRecord> records = shipments.getShipments(OrderStatus.None);
        assertNotNull(records);
        assertEquals(5, records.size());

        records = shipments.getShipments(OrderStatus.Delivered);
        assertNotNull(records);
        assertEquals(0, records.size());

        records = shipments.getShipments(OrderStatus.Shipped);
        assertNotNull(records);
        assertEquals(5, records.size());
    }

    public void testGetShipmentById()
    {
        ShipmentRecord record = shipments.getShipmentById("order-quote-0");
        assertNotNull(record);
        assertNotNull(record.getEvents());
        assertEquals(0, record.getEvents().size());
    }

    public void testCreateShipment() throws BadRequestException
    {
        List<ShipmentRecord> records = shipments.getShipments(OrderStatus.None);
        assertNotNull(records);
        assertEquals(5, records.size());

        try
        {
            // Duplicate shipment record
            Order o = orders.getOrder("order-quote-0");
            shipments.createShipment(createShipmentRecord(o.getOrderId()));
            fail("Should have seen an exception");
        }
        catch (BadRequestException bre)
        {
        }

        Order o = orders.getOrder("order-quote-5");
        ShipmentRecord newShipment = shipments.createShipment(createShipmentRecord(o.getOrderId()));
        assertNotNull(newShipment);
        assertEquals(o.getOrderId(), newShipment.getOrderId());

        records = shipments.getShipments(OrderStatus.None);
        assertNotNull(records);
        assertEquals(6, records.size());
    }

    public void testUpdateShipment()
    {
        ShipmentRecord record = shipments.getShipmentById("order-quote-0");
        assertNotNull(record);
        assertNotNull(record.getEvents());
        assertEquals(0, record.getEvents().size());

        record.addEvent("12/1/2014", "This is just a test.");

        shipments.updateShipment(record);

        getShipment("order-quote-0");
    }

    private void getShipment(String id)
    {
        ShipmentRecord record;
        record = shipments.getShipmentById(id);
        assertNotNull(record);
        assertNotNull(record.getEvents());
        assertEquals(1, record.getEvents().size());

        assertEquals("12/1/2014", record.getEvents().get(0).getDate());
        assertEquals("This is just a test.", record.getEvents().get(0).getComments());
    }

    public void testAddEvent()
    {
        ShipmentRecord record = shipments.getShipmentById("order-quote-0");
        assertNotNull(record);
        assertNotNull(record.getEvents());
        assertEquals(0, record.getEvents().size());

        shipments.addEvent("order-quote-0", new ShipmentEventInfo("12/1/2014", "This is just a test."));

        getShipment("order-quote-0");
    }

    public static ShipmentRecord createShipmentRecord(String orderId)
    {
        ShipmentRecord result = new ShipmentRecord();
        result.setOrderId(orderId);
        result.setDeliveryDate("02/02/2015");
        result.setContactName("Jane Smith");
        result.setPrimaryContactPhone(new PhoneInfo("206-555-1212", "Mobile"));
        result.setAlternateContactPhone(new PhoneInfo("206-555-1111", "Work"));
        result.setDeliveryAddress(new DeliveryAddress("123 Main Street", "Bellevue", "WA", "98006", "Near KFC"));
        return result;
    }

    private OrderRepository orders;
    private ShipmentRepository shipments;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mock/test/MockCatalogItemsRepositoryTest.java
================================================
package smpl.ordering.repositories.mock.test;

import org.junit.Before;
import org.junit.Test;
import smpl.ordering.repositories.CatalogItemsRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;

public class MockCatalogItemsRepositoryTest extends CatalogItemsRepositoryTest
{
    @Before
    @Override
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");
        super.setUp();
    }

    @Test
    @Override
    public void testGetCatalogItems()
    {
        super.testGetCatalogItems();
    }

    @Test
    @Override
    public void testGetCatalogItem()
    {
        super.testGetCatalogItem();
    }

    @Test
    @Override
    public void testUpsertCatalogItem()
    {
        super.testUpsertCatalogItem();
    }

    @Test
    @Override
    public void testRemoveCatalogItem()
    {
        super.testRemoveCatalogItem();
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mock/test/MockDealersRepositoryTest.java
================================================
package smpl.ordering.repositories.mock.test;

import org.junit.Before;
import org.junit.Test;
import smpl.ordering.repositories.DealersRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;

@SuppressWarnings("EmptyMethod")
public class MockDealersRepositoryTest
        extends DealersRepositoryTest
{
    @Before
    @Override
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");
        super.setUp();
    }

    @Test
    @Override
    public void testGetDealers()
    {
        super.testGetDealers();
    }

    @Test
    @Override
    public void testGetDealer()
    {
        super.testGetDealer();
    }

    @Test
    @Override
    public void testUpsertDealer()
    {
        super.testUpsertDealer();
    }

    @Test
    @Override
    public void testRemoveDealer()
    {
        super.testRemoveDealer();
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mock/test/MockOrderRepositoryTest.java
================================================
package smpl.ordering.repositories.mock.test;

import org.junit.Before;
import org.junit.Test;

import smpl.ordering.repositories.*;

@SuppressWarnings("EmptyMethod")
public class MockOrderRepositoryTest
        extends OrderRepositoryTest
{

    @Before
    @Override
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");
        super.setUp();
    }

    @Test
    @Override
    public void testHasOrder()
    {
        super.testHasOrder();
    }

    @Test
    @Override
    public void testGetOrder()
    {
        super.testGetOrder();
    }

    @Test
    @Override
    public void testGetOrdersByQuoteId()
    {
        super.testGetOrdersByQuoteId();
    }

    @Test
    @Override
    public void testGetOrdersByStatus()
    {
        super.testGetOrdersByStatus();
    }

    @Test
    @Override
    public void testGetOrdersByDealerName()
    {
        super.testGetOrdersByDealerName();
    }

    @Test
    @Override
    public void testCreateOrder() throws Exception
    {
        super.testCreateOrder();
    }

    @Test
    @Override
    public void testUpdateOrder() throws Exception
    {
        super.testUpdateOrder();
    }

    @Test
    @Override
    public void testUpdateOrder1() throws Exception
    {
        super.testUpdateOrder1();
    }

    private OrderRepository repository;
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mock/test/MockQuoteRepositoryTest.java
================================================
package smpl.ordering.repositories.mock.test;

import org.junit.Before;
import org.junit.Test;
import smpl.ordering.repositories.*;

@SuppressWarnings("EmptyMethod")
public class MockQuoteRepositoryTest
        extends QuoteRepositoryTest
{
    @Before
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");
        super.setUp();
    }

    @Test
    public void testGetQuote()
    {
        super.testGetQuote();
    }

    @Test
    public void testGetQuotesByCustomerName()
    {
        super.testGetQuotesByCustomerName();
    }

    @Test
    public void testCreateQuote() throws Exception
    {
        super.testCreateQuote();
    }

    @Test
    public void testUpdateQuote()
    {
        super.testUpdateQuote();
    }

    @Test
    public void testRemoveQuote()
    {
        super.testRemoveQuote();
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mock/test/MockShipmentRepositoryTest.java
================================================
package smpl.ordering.repositories.mock.test;

import org.junit.Before;
import org.junit.Test;
import smpl.ordering.BadRequestException;
import smpl.ordering.repositories.RepositoryFactory;
import smpl.ordering.repositories.ShipmentRepositoryTest;

@SuppressWarnings("EmptyMethod")
public class MockShipmentRepositoryTest extends ShipmentRepositoryTest
{
    @Before
    @Override
    public void setUp() throws Exception
    {
        // Make sure we're using memory-based repositories.
        RepositoryFactory.reset("memory");
        super.setUp();
    }

    @Override
    @Test
    public void testGetShipmentById()
    {
        super.testGetShipmentById();
    }

    @Override
    @Test
    public void testGetShipments()
    {
        super.testGetShipments();
    }

    @Override
    @Test
    public void testCreateShipment() throws BadRequestException
    {
        super.testCreateShipment();
    }

    @Override
    @Test
    public void testUpdateShipment()
    {
        super.testUpdateShipment();
    }

    @Override
    @Test
    public void testAddEvent()
    {
        super.testAddEvent();
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mongodb/test/IntegrationTests.java
================================================
package smpl.ordering.repositories.mongodb.test;

public interface IntegrationTests{

}


================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mongodb/test/MongoCatalogItemsRepositoryTest.java
================================================
package smpl.ordering.repositories.mongodb.test;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import smpl.ordering.ConfigurationRule;
import smpl.ordering.repositories.CatalogItemsRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;

@Category(IntegrationTests.class)
public class MongoCatalogItemsRepositoryTest extends CatalogItemsRepositoryTest
{
    @Rule
    public ConfigurationRule rule = new ConfigurationRule();

    @Before
    @Override
    public void setUp() throws Exception
    {
        // Make sure we're using a clean repository.
        RepositoryFactory.reset("mongodb");
        super.setUp();
    }

    @Test
    @Override
    public void testGetCatalogItems()
    {
        super.testGetCatalogItems();
    }

    @Test
    @Override
    public void testGetCatalogItem()
    {
        super.testGetCatalogItem();
    }

    @Test
    @Override
    public void testUpsertCatalogItem()
    {
        super.testUpsertCatalogItem();
    }

    @Test
    @Override
    public void testRemoveCatalogItem()
    {
        super.testRemoveCatalogItem();
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mongodb/test/MongoDealersRepositoryTest.java
================================================
package smpl.ordering.repositories.mongodb.test;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import smpl.ordering.ConfigurationRule;
import smpl.ordering.repositories.DealersRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;


@SuppressWarnings("EmptyMethod")
@Category(IntegrationTests.class)
public class MongoDealersRepositoryTest
        extends DealersRepositoryTest
{
    @Rule
    public ConfigurationRule rule = new ConfigurationRule();

    @Before
    @Override
    public void setUp() throws Exception
    {
        // Make sure we're using a clean repository.
        RepositoryFactory.reset("mongodb");
        super.setUp();
    }

    @Test
    @Override
    public void testGetDealers()
    {
        super.testGetDealers();
    }

    @Test
    @Override
    public void testGetDealer()
    {
        super.testGetDealer();
    }

    @Test
    @Override
    public void testUpsertDealer()
    {
        super.testUpsertDealer();
    }

    @Test
    @Override
    public void testRemoveDealer()
    {
        super.testRemoveDealer();
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mongodb/test/MongoOrderRepositoryTest.java
================================================
package smpl.ordering.repositories.mongodb.test;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import smpl.ordering.ConfigurationRule;
import smpl.ordering.repositories.OrderRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;

@SuppressWarnings("EmptyMethod")
@Category(IntegrationTests.class)
public class MongoOrderRepositoryTest
        extends OrderRepositoryTest
{
    @Rule
    public ConfigurationRule rule = new ConfigurationRule();

    @Before
    @Override
    public void setUp() throws Exception
    {
        // Make sure we're using a clean repository.
        RepositoryFactory.reset("mongodb");
        super.setUp();
    }

    @Test
    @Override

    public void testHasOrder()
    {
        super.testHasOrder();
    }

    @Test
    @Override
    public void testGetOrder()
    {
        super.testGetOrder();
    }

    @Test
    @Override
    public void testGetOrdersByQuoteId()
    {
        super.testGetOrdersByQuoteId();
    }

    @Test
    @Override
    public void testGetOrdersByStatus()
    {
        super.testGetOrdersByStatus();
    }

    @Test
    @Override
    public void testGetOrdersByDealerName()
    {
        super.testGetOrdersByDealerName();
    }

    @Test
    @Override
    public void testCreateOrder() throws Exception
    {
        super.testCreateOrder();
    }

    @Test
    @Override
    public void testUpdateOrder() throws Exception
    {
        super.testUpdateOrder();
    }

    @Test
    @Override
    public void testUpdateOrder1() throws Exception
    {
        super.testUpdateOrder1();
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mongodb/test/MongoQuoteRepositoryTest.java
================================================
package smpl.ordering.repositories.mongodb.test;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import smpl.ordering.ConfigurationRule;
import smpl.ordering.repositories.QuoteRepositoryTest;
import smpl.ordering.repositories.RepositoryFactory;

@SuppressWarnings("EmptyMethod")
@Category(IntegrationTests.class)
public class MongoQuoteRepositoryTest
        extends QuoteRepositoryTest
{
    @Rule
    public ConfigurationRule rule = new ConfigurationRule();

    @Before
    @Override
    public void setUp() throws Exception
    {
        // Make sure we're using a clean repository.
        RepositoryFactory.reset("mongodb");
        super.setUp();
    }

    @Test
    @Override
    public void testGetQuote()
    {
        super.testGetQuote();
    }

    @Test
    @Override
    public void testGetQuotesByCustomerName()
    {
        super.testGetQuotesByCustomerName();
    }

    @Test
    @Override
    public void testCreateQuote() throws Exception
    {
        super.testCreateQuote();
    }

    @Test
    @Override
    public void testUpdateQuote()
    {
        super.testUpdateQuote();
    }

    @Test
    @Override
    public void testRemoveQuote()
    {
        super.testRemoveQuote();
    }
}



================================================
FILE: src/Backend/OrderService/src/test/java/smpl/ordering/repositories/mongodb/test/MongoShipmentRepositoryTest.java
================================================
package smpl.ordering.repositories.mongodb.test;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import smpl.ordering.BadRequestException;
import smpl.ordering.ConfigurationRule;
import smpl.ordering.repositories.RepositoryFactory;
import smpl.ordering.repositories.ShipmentRepositoryTest;

@SuppressWarnings("EmptyMethod")
@Category(IntegrationTests.class)
public class MongoShipmentRepositoryTest extends ShipmentRepositoryTest
{
    @Rule
    public ConfigurationRule rule = new ConfigurationRule();

    @Before
    @Override
    public void setUp() throws Exception
    {
        // Make sure we're using a clean repository.
        RepositoryFactory.reset("mongodb");
        super.setUp();
    }

    @Override
    @Test
    public void testGetShipmentById()
    {
        super.testGetShipmentById();
    }

    @Override
    @Test
    public void testGetShipments()
    {
        super.testGetShipments();
    }

    @Override
    @Test
    public void testCreateShipment() throws BadRequestException
    {
        super.testCreateShipment();
    }

    @Override
    @Test
    public void testUpdateShipment()
    {
        super.testUpdateShipment();
    }

    @Override
    @Test
    public void testAddEvent()
    {
        super.testAddEvent();
    }

}



================================================
FILE: src/Backend/OrderService/src/test/resources/application.properties
================================================
###########
# This properties file is intended to be used for running unit tests.
###########

#
# Service configuration, applies to Spring Boot, not when deploying under
# an application server, for which configuration is done separately.
#
server.port: 8080
management.port: 8081
management.address: 127.0.0.1

#
# Configuration elements specific to the Fabrikant ordering service.
# Test against in-memory repositories except for those tests that are explicitly testing
# persistent store-based repositories.
#
ordering.storage: memory
ordering.pingMessage: Testing
ordering.validationMessage: Testing

# MongoDB server used for unit tests.
mongodb.host: localhost
# Use a database separate from the production database.
mongodb.database: orderingtest




================================================
FILE: src/Clients/README.md
================================================
# Building the Client #

The MRP client is a static website.  The build process here creates a single archive (war) file that is used by the Tomcat host for the site.

## Windows ##

Building on Windows the following command is used to build the client WAR file.

```
.\gradlew.bat build

```
This creates the ```mrp.war``` in the ```./build/libs``` directory.

## Linux ##

Building on Linux the following command is used to build the client WAR file.

```
# ensure the 'gradlew' is executable
chmod +x gradlew

# now build
./gradlew build

```

## Cleaning all builds ##

### Windows ###

Run ```removeBuild.bat``` to remove the ```./build``` directory.

### Linux ###

On Linux remove the ```./build``` with the following command to 'clean'

```
rm -rf ./build
```

## MRP.war file ##

Ensure you copy or move the ```./build/libs/mrp.war``` file to your location needed to run.




================================================
FILE: src/Clients/gradlew
================================================
#!/usr/bin/env bash

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn ( ) {
    echo "$*"
}

die ( ) {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
esac

# For Cygwin, ensure paths are in UNIX format before anything is touched.
if $cygwin ; then
    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
fi

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >&-
APP_HOME="`pwd -P`"
cd "$SAVED" >&-

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=$((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$args0" ;;
        (2) set -- "$args0" "$args1" ;;
        (3) set -- "$args0" "$args1" "$args2" ;;
        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
function splitJvmOpts() {
    JVM_OPTS=("$@")
}
eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"

exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"



================================================
FILE: src/Clients/gradlew.bat
================================================
@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS=

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto init

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto init

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:init
@rem Get command-line arguments, handling Windowz variants

if not "%OS%" == "Windows_NT" goto win9xME_args
if "%@eval[2+2]" == "4" goto 4NT_args

:win9xME_args
@rem Slurp the command line arguments.
set CMD_LINE_ARGS=
set _SKIP=2

:win9xME_args_slurp
if "x%~1" == "x" goto execute

set CMD_LINE_ARGS=%*
goto execute

:4NT_args
@rem Get arguments from the 4NT Shell from JP Software
set CMD_LINE_ARGS=%$

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar

@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega



================================================
FILE: src/Clients/removeBuild.bat
================================================
rd /S /Q build > NUL 2>&1



================================================
FILE: src/Clients/gradle/wrapper/gradle-wrapper.properties
================================================
#Wed Jan 28 14:56:44 PST 2015
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=http\://services.gradle.org/distributions/gradle-2.1-bin.zip



================================================
FILE: src/Clients/Web/default.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Parts Unlimited</title>

    <!-- WinJS references -->
    <link href="winjs/css/ui-light.css" rel="stylesheet" />
    <script src="winjs/js/winjs.js"></script>

    <!-- Fabrikam references -->
    <link href="css/default.css" rel="stylesheet" />
    <script src="js/serverconfig.js"></script>
    <script src="js/data.js"></script>
    <script src="js/navigator.js"></script>
    <script src="js/date.js"></script>
    <script src="js/default.js"></script>
    <script src="controls/edittools/edittools.js"></script>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places"></script>
</head>
<body>
    <ul class="navigation">
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Home', icon: 'url(images/FabrikamIcon.png)', page:'main' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Dealers', icon: 'url(images/DealersIcon.png)', page:'dealers' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Quotes', icon: 'url(images/QuoteIcon.png)', page:'quotes' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Orders', icon: 'url(images/OrderIcon.png)', page:'orders' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Deliveries', icon: 'url(images/DeliveryIcon.png)', page:'deliveries' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Catalog', icon: 'url(images/CatalogIcon.png)', page:'catalog' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Settings', icon: 'url(images/SettingsIcon.png)', page:'settings' }"></div>
    </ul>

    <div id="progressUnderlay" class="progressUnderlay"></div>
    <div id="progressContainer" class="progressContainer">
        <div class="progressMessageContainer win-type-x-large">
            <h2 id="progressMessage">Starting...</h2>
        </div>
        <progress id="progressRing" style="color: #09F;" class="win-large win-ring progressLocation"></progress>
    </div>

    <input type="checkbox" id="nav-trigger" class="nav-trigger" />
    <label for="nav-trigger"></label>
    <div id="contenthost" data-win-control="Application.PageControlNavigator" data-win-options="{home: 'pages/main/main.html'}"></div>
    <div id="confirmdialog">
        <div data-win-control="WinJS.UI.ContentDialog" data-win-options="{
             title: 'The title',
             primaryCommandText: 'Yes',
             secondaryCommandText: 'No'
        }">
        </div>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/index.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Parts Unlimited MRP - Demo</title>

    <!-- WinJS references -->
    <link href="winjs/css/ui-light.css" rel="stylesheet" />
    <script src="winjs/js/winjs.js"></script>

    <!-- Parts Unlimited references -->
    <link href="css/default.css" rel="stylesheet" />
    <script src="js/serverconfig.js"></script>
    <script src="js/data.js"></script>
    <script src="js/navigator.js"></script>
    <script src="js/date.js"></script>
    <script src="js/default.js"></script>
    <script src="controls/edittools/edittools.js"></script>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?libraries=places"></script>
</head>
<body>
    <ul class="navigation">
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Home', icon: 'url(images/FabrikamIcon.png)', page:'main' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Dealers', icon: 'url(images/DealersIcon.png)', page:'dealers' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Quotes', icon: 'url(images/QuoteIcon.png)', page:'quotes' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Orders', icon: 'url(images/OrderIcon.png)', page:'orders' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Deliveries', icon: 'url(images/DeliveryIcon.png)', page:'deliveries' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Catalog', icon: 'url(images/CatalogIcon.png)', page:'catalog' }"></div>
        <div class="navigationButton" data-win-control="WinJS.UI.NavBarCommand" data-win-options="{ label: 'Settings', icon: 'url(images/SettingsIcon.png)', page:'settings' }"></div>
    </ul>

    <div id="progressUnderlay" class="progressUnderlay"></div>
    <div id="progressContainer" class="progressContainer">
        <div class="progressMessageContainer win-type-x-large">
            <h2 id="progressMessage">Starting...</h2>
        </div>
        <progress id="progressRing" style="color: #09F;" class="win-large win-ring progressLocation"></progress>
    </div>

    <input type="checkbox" id="nav-trigger" class="nav-trigger" />
    <label for="nav-trigger"></label>
    <div id="contenthost" data-win-control="Application.PageControlNavigator" data-win-options="{home: 'pages/main/main.html'}"></div>
    <div id="confirmdialog">
        <div data-win-control="WinJS.UI.ContentDialog" data-win-options="{
             title: 'The title',
             primaryCommandText: 'Yes',
             secondaryCommandText: 'No'
        }">
        </div>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/controls/edittools/edittools.css
================================================
﻿.edittools {
    display: block;
    height: 40px;
}

.edit-tools-button {
    min-width: 60px;
    min-height: 40px;
    width: 60px;
    margin: 0px;
    padding: 0px;
    height: 40px;
    background-color: transparent;
    border: none;
    font-family: "Segoe UI Symbol", "Symbols";
    font-size: 18pt;
}



================================================
FILE: src/Clients/Web/controls/edittools/edittools.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>edittools</title>

    <link href="edittools.css" rel="stylesheet" />
    <script src="edittools.js"></script>
</head>
<body>
    <div id="edittools-template" class="edittools win-disposable">
        <button id="edit-tools-delete" class="edit-tools-button" type="button" title="Delete">
            <label class="edit-tools-button-label" data-label="delete"></label>
        </button>
        <button id="edit-tools-save" class="edit-tools-button" type="button" title="Save">
            <label class="edit-tools-button-label" data-label="save"></label>
        </button>
        <button id="edit-tools-edit" class="edit-tools-button" type="button" title="Add">
            <label class="edit-tools-button-label" data-label="add"></label>
        </button>
        <button id="edit-tools-edit" class="edit-tools-button" type="button" title="Order">
            <label class="edit-tools-button-label" data-label="edit"></label>
        </button>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/controls/edittools/edittools.js
================================================
﻿(function () {
    "use strict";

    var controlTemplate = null;
    var templateInitPromise = null;

    // This will load and cache the control's template.
    // This happens the first time an instance of the control is created, or when you call Controls.EditTools.cacheControlTemplate
    function loadControlTemplate() {
        if (!templateInitPromise) {
            var controlFragment = document.createElement("div");
            templateInitPromise = WinJS.UI.Fragments.render("controls/edittools/edittools.html", controlFragment).then(function () {
                controlTemplate = new WinJS.Binding.Template(controlFragment.querySelector("#edittools-template"));
                controlTemplate._renderImpl = controlTemplate._compileTemplate({ target: "render" });
            });
        }
        return templateInitPromise;
    }

    var EditTools = WinJS.Class.define(function (element, options) {
        var options = options || {};
        this.element = element || document.createElement("div");
        this.element.winControl = this;
        WinJS.UI.setOptions(this, options);

        this.controlInitialized = false;
        var that = this;
        this.initPromise = loadControlTemplate().then(function () {
            that.element.className = controlTemplate.element.className;
            return controlTemplate.render(options.dataSource, that.element).then(
                function (element) {
                    that._initialize();
                    that.controlInitialized = true;
                });
        });
    }
    , {
        _initialize: function () {
            var that = this;
            var labels = this.element.querySelectorAll(".edit-tools-button-label");
            for (var n = 0; n < labels.length; n++) {
                var label = labels[n];
                if (WinJS.UI.AppBarIcon[label.dataset.label]) {
                    label.textContent = WinJS.UI.AppBarIcon[label.dataset.label];
                }
                else {
                    label.textContent = label.dataset.label;
                }
                label.parentElement.dataset.label = label.dataset.label;
            }

            var buttons = this.getButtons();
            Object.keys(buttons).forEach(function (buttonKey) {
                var button = buttons[buttonKey];
                button.addEventListener("click", function () {
                    that.dispatchEvent("click", {
                        sender: button,
                        label: this.dataset.label
                    });
                });
            });
        },

        ensureInitialized: function () {
            return this.initPromise;
        },

        dispose: function () {
            // TODO: Control clean-up
            this._disposed = true;
        },

        getButtons: function () {
            var buttons = {};
            var buttonElements = this.element.querySelectorAll(".edit-tools-button");
            for (var n = 0; n < buttonElements.length; n++) {
                var buttonElement = buttonElements[n];
                buttons[buttonElement.dataset.label] = buttonElement;
            }
            return buttons;
        }
    },
    {
        cacheControlTemplate: function () {
            return loadControlTemplate();
        },
    });

    WinJS.Namespace.define("Controls", {
        EditTools: EditTools,
    });
})();

WinJS.Class.mix(Controls.EditTools,
    WinJS.Utilities.createEventProperties("click"),
    WinJS.UI.DOMEventMixin);


================================================
FILE: src/Clients/Web/css/default.css
================================================
﻿body {
    overflow-x: hidden;
    font-weight: 400;
}

input[type=text] {
    font-size: 9pt;
}

select {
    font-size: 9pt;
    padding: 2px 10px 5px 6px;
    min-height: 28px;
    margin-bottom: 8px;
    margin-top: 8px;
    height: 28px;
}

/*
Weight and size definitions for typographic classes and elements.
*/
h1, .win-type-xx-large {
    font-size: 42pt;
    font-weight: 200;
    letter-spacing: 0;
    line-height: 1.1429; /* 64px when font-size is 42pt */
}

h2, .win-type-x-large {
    font-size: 20pt;
    font-weight: 200;
    line-height: 1.2; /* 32px when font-size is 20pt */
}

h3, .win-type-large {
    font-size: 11pt;
    font-weight: 600;
    line-height: 1.3636; /* 20px when font-size is 11pt */
}

h4, .win-type-medium, code, pre, samp {
    font-size: 11pt;
    font-weight: 400;
    line-height: 1.3636; /* 20px when font-size is 11pt */
}

body, h5, .win-type-small, legend {
    font-size: 11pt;
    font-weight: 300;
    line-height: 1.3636; /* 20px when font-size is 11pt */
}

.win-type-x-small {
    font-size: 11pt;
    font-weight: 300;
    line-height: 1.3636; /* 20px when font-size is 11pt */
}

h6, caption, figcaption, small, .win-type-xx-small {
    font-size: 9pt;
    font-weight: 400;
    line-height: 1.6667; /* 20px when font-size is 9pt */
}

h1, h2, h3, h4, h5, h6 {
    margin-top: 0;
    margin-bottom: 0;
}

#launchpad {
    height: 300px;
    width: 640px;
    margin-left: auto;
    margin-right: auto;
    margin-top: 100px;
}

#companylogo {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

#launchtiles {
    display: flex;
    margin-top: 100px;
}

.launchtile {
    width: 140px;
    height: 85px;
    background-color: #E0E0E0;
    margin: 10px;
}

.launchtilelogo {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

.launchtiletitle {
    text-align: center;
}

.launchtileinner {
}

#contenthost {
    min-width: 100%;
    min-height: 100%;
    background-color: #fff;
    position: absolute;
    top: 0;
    bottom: 100%;
    left: 0;
    z-index: 1;
}

.titlearea {
    float: left;
    height: 40px;
    margin-top: 3px;
}

.fragment {
    height: 100%;
    width: 100%;
}

    .fragment section[role=main] {
        margin: auto 40px;
        height: calc(100% - 60px);
    }

.navigation {
    margin: 0px;
    padding: 52px 0px 0px 10px;
    list-style: none;
    background: #E0E0E0;
    width: 400px;
    height: 100%;
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 0;
}

.header-cover {
    position: fixed;
    top: 0px;
    left: 0px;
    height: 44px;
    width: 100%;
    background-color: #E0E0E0;
    z-index: 1;
}

.nav-cover {
    position: fixed;
    top: 0px;
    left: 0px;
    height: 44px;
    width: 70px;
    background-color: #E0E0E0;
    z-index: 2;
}

.nav-trigger {
    position: absolute;
    clip: rect(0, 0, 0, 0);
}

label[for="nav-trigger"] {
    position: fixed;
    top: 0px;
    left: 0px;
    z-index: 2;
    width: 52px;
    height: 44px;
    cursor: pointer;
    background-image: url('../images/hamburger.png');
    background-size: 30px;
    background-repeat: no-repeat;
    background-position-x: 12px;
    background-position-y: 10px;
    background-color: #C0C0C0;
}

.nav-trigger:checked + label {
    left: 200px;
}

.nav-trigger:checked ~ #contenthost {
    left: 200px;
    box-shadow: 0 0 5px 5px rgba(0,0,0,0.5);
}

.nav-trigger + label, #contenthost {
    transition: ease-in-out left 0.3s;
}

.navigationButton {
}

.win-navbarcommand-button,
.win-navbarcommand-splitbutton {
    background-color: transparent;
    color: #000000;
}

h2 {
    font-size: 28px;
    font-weight: 100;
    font-family: arial;
}

.progressUnderlay {
    position: absolute;
    left: 0px;
    top: 44px;
    width: 100%;
    height: 100%;
    z-index: 90;
    background-color: black;
    opacity: 0.0;
    transition-property: opacity;
    transition-timing-function: ease;
    transition-duration: 0.3s;
}

.progressContainer {
    display: flex;
    justify-content: center;
    align-content: center;
    flex-direction: column;
    width: 350px;
    height: 240px;
    position: absolute;
    top: calc(50% - 125px);
    left: calc(50% - 175px);
    z-index: 100;
    color: black;
    margin-left: 12px;
    margin-top: 0px;
    background-color: black;
    opacity: 0.75;
}

.progressMessageContainer {
    color: #09F;
    margin-bottom: 10px;
}

#progressMessage {
    display: flex;
    justify-content: center;
    align-content: center;
    flex-direction: row;
    margin-bottom: 10px;
}

.progressLocation {
    display: block;
    margin-left: auto;
    margin-right: auto;
    color: #09F;
}

.page-header {
    background-color: #E0E0E0;
    height: 44px;
}

.page-header-home {
    float: left;
    margin-left: 60px;
    margin-right: 10px;
    padding: 0px;
    display: inline;
    background-color: transparent;
    border-style: none;
    height: 44px;
    min-width: 60px;
}

    .page-header-home img {
        margin-top: 2px;
        height: 40px;
    }

.edittools {
    margin-left: 10px;
    margin-top: 10px;
}

.itemListView {
    float: left;
    margin-top: 10px;
    width: 320px;
    height: calc(100% - 100px);
}

.listItem {
    margin: 14px;
}

.list-item-entry-small {
    font-size: 12px;
    font-weight: 400;
}

.editDetail {
    float: left;
    margin-top: 10px;
    margin-left: 20px;
    width: 50%;
    background: #F0F0F0;
    padding: 10px;
    max-height: calc(100% - 120px);
    overflow-y: auto;
}

    .editDetail .horizontalDetail {
        display: inline-block;
        width: 100%;
    }

        .editDetail .horizontalDetail .horizontalDetailCol {
            display: inline-block;
            width: 32%;
        }

    .editDetail input[type=text] {
        float: left;
        width: calc(100% - 20px);
    }

    .editDetail .selectinput {
        float: left;
        width: calc(100% - 20px);
    }

    .editDetail .inputlabel {
        float: left;
        width: 30%;
        font-size: 11pt;
        font-weight: 600;
        line-height: 1.3636;
    }

    .editDetail .horizontalDetail .inputlabel {
        height: 24px;
        margin-top: 12px;
        width: 46%;
    }

    .editDetail .buttonlabel {
        margin-right: 8px;
        font-weight: 400;
    }

    .editDetail .horizontalDetail input {
        height: 24px;
        margin-right: 0px;
        width: 50%;
    }

.detailExpander {
    display: inline-block;
    width: 100%;
}

.pagePopup .win-contentdialog .win-contentdialog-dialog {
    max-width: 768px;
    max-height: 640px;
}

.pagePopup .win-contentdialog .win-contentdialog-scroller {
    height: 380px;
    overflow: hidden;
}

.pagePopup .fragment {
    height: 360px;
    overflow: hidden;
}

    .pagePopup .fragment section[role=main] {
        margin: auto 0px;
        height: 100%;
    }

.pagePopup .itemListView {
    height: calc(100% - 50px);
    max-height: calc(100% - 50px);
    width: calc(50% - 22px);
    margin-top: 0px;
}

.pagePopup .editDetail {
    float: right;
    max-height: calc(100% - 60px);
    margin-left: 10px;
    width: calc(50% - 22px);
    margin-top: 0px;
}

    .pagePopup .editDetail input[type=text] {
        width: 100%;
    }

.pagePopup .edittools {
}

#confirmdialog {
    z-index: 1000;
}

.textinput-multiline {
}

.win-container.win-selected .win-selectionborder {
    border-width: 2px;
    border-style: solid;
}

html.win-hoverable .win-container.win-selected:hover .win-selectionborder {
    border-width: 2px;
    border-style: solid;
}

.win-selectioncheckmarkbackground {
    display: none;
}



================================================
FILE: src/Clients/Web/js/data.js
================================================
﻿(function () {
    "use strict";

    var rest_headers = { "Content-type": "application/json", "Pragma": "no-cache", "Cache-Control": "no-cache", "If-Modified-Since": new Date(0).toUTCString() };

    var dealers = new WinJS.Binding.List().createSorted(function (l, r) {
        return l.name < r.name ? -1 : l.name === r.name ? 0 : 1;
    });

    var catalog = new WinJS.Binding.List().createSorted(function (l, r) {
        return l.skuNumber < r.skuNumber ? -1 : l.skuNumber === r.skuNumber ? 0 : 1;
    });

    var quotes = new WinJS.Binding.List().createSorted(function (l, r) {
        return l.validUntil < r.validUntil ? -1 : l.validUntil === r.validUntil ? 0 : 1;
    });

    var orders = new WinJS.Binding.List().createSorted(function (l, r) {
        return l.orderDate < r.orderDate ? -1 : l.orderDate === r.orderDate ? 0 : 1;
    });

    var deliveries = new WinJS.Binding.List().createSorted(function (l, r) {
        return l.deliveryDate > r.deliveryDate ? -1 : l.deliveryDate === r.deliveryDate ? 0 : 1;
    });

    WinJS.Namespace.define("Data", {
        dealers: dealers,
        dealersGet: dealersGet,
        dealerSave: dealerSave,
        dealerDelete: dealerDelete,
        dealerCreate: dealerCreate,
        catalog: catalog,
        catalogGet: catalogGet,
        catalogSave: catalogSave,
        catalogDelete: catalogDelete,
        catalogCreate: catalogCreate,
        catalogFindSku: catalogFindSku,
        quotes: quotes,
        quotesGet: quotesGet,
        quoteGetById: quoteGetById,
        quoteSave: quoteSave,
        quoteDelete: quoteDelete,
        quoteCreate: quoteCreate,
        orders: orders,
        ordersGet: ordersGet,
        orderGetById: orderGetById,
        orderSave: orderSave,
        orderDelete: orderDelete,
        orderCreateFromQuote: orderCreateFromQuote,
        orderFindById: orderFindById,
        deliveries: deliveries,
        deliveriesGet: deliveriesGet,
        deliverySave: deliverySave,
        deliveryDelete: deliveryDelete,
        deliveryCreateFromOrder: deliveryCreateFromOrder,
        deliveryFindById: deliveryFindById
    });

    function deliveriesGet() {

        return WinJS.xhr({ url: baseAddress + "/shipments", headers: rest_headers }).then(function (response) {
            if (response.status == 0) {
                reporterror("Could not retrieve deliveries", "Unfortunately, the server could not be contacted in order to retrieve delivery details.", "");
                return false;
            }
            Data.deliveries.splice(0, Data.deliveries.length);
            var theDeliveries = JSON.parse(response.responseText);
            theDeliveries.forEach(function processDealerData(deliveryData) {
                if (!deliveryData.deliveryDate) {
                    deliveryData.deliveryDate = Date.today().addMonths(2).toString("M/d/yyyy");
                }
                Data.deliveries.push(WinJS.Binding.as(deliveryData));
            });
            return WinJS.Promise.wrap(Data.deliveries);
        }, function (err) {
            reporterror("Could not retrieve deliveries", "Unfortunately, the server could not be contacted in order to retrieve delivery details.", err);
            return WinJS.Promise.wrap(null);
        });
    }

    function deliverySaveEdits(delivery) {
        var rawdelivery = delivery;
        if (delivery.backingData) {
            rawdelivery = delivery.backingData;
        }
        return WinJS.xhr({
            type: 'put',
            url: baseAddress + "/shipments/" + encodeURIComponent(delivery.orderId),
            headers: rest_headers,
            data: JSON.stringify(rawdelivery),
        }).then(function (response) {
            return WinJS.Promise.wrap(delivery);
        }, function (response) {
            return WinJS.Promise.wrap(null);
        });
    }

    function deliverySaveNew(delivery) {
        var rawdelivery = delivery;
        if (delivery.backingData) {
            rawdelivery = delivery.backingData;
        }
        return WinJS.xhr({
            type: 'post',
            url: baseAddress + "/shipments",
            headers: rest_headers,
            data: JSON.stringify(rawdelivery),
        }).then(function (response) {
            return WinJS.Promise.wrap(delivery);
        }, function (response) {
            return WinJS.Promise.wrap(null);
        });
    }

    function deliverySave(delivery, original) {
        if (delivery.__new) {
            return deliverySaveNew(delivery).then(function (saveddelivery) {
                return orderSave(delivery.__order, original.__order).then(function () {
                    return saveddelivery;
                });
            });
        }
        else {
            return deliverySaveEdits(delivery, original).then(function (saveddelivery) {
                return orderSave(delivery.__order, original.__order).then(function () {
                    return saveddelivery;
                });
            });
        }
    }

    function deliveryDelete(delivery) {
        return WinJS.xhr({
            type: 'delete',
            url: baseAddress + "/shipments/" + encodeURIComponent(delivery.orderId)
        }).then(function (response) {
            if (response.status == 204) {
                var index = deliveries.indexOf(delivery);
                if (index > -1) {
                    deliveries.splice(index, 1);
                }
            }
            else if (response.status == 0) {
                reporterror("Could not delete delivery", "Unfortunately, the server could not be contacted in order to retrieve delivery details.", "");
                return false;
            }
            return WinJS.Promise.wrap(true);
        }, function (response) {
            return WinJS.Promise.wrap(false);
        });
    }


    function deliveryCreateFromOrder(order) {
        return WinJS.Promise.as(WinJS.Binding.as({
            "orderId": order.orderId,
            "deliveryDate": Date.today().addMonths(1).toString("M/d/yyyy"),
            "events": [],
            "deliveryAddress": {
                "street": "",
                "city": order.__quote.city,
                "state": "",
                "postalCode": order.__quote.postalCode,
                "specialInstructions": ""
            },
            "contactName": order.__quote.customerName,
            "primaryContactPhone": {
                "phoneNumber": "",
                "kind": "Mobile"
            },
            "alternateContactPhone": {
                "phoneNumber": "",
                "kind": "Work"
            }
        })).then(function (delivery) {
            delivery.__new = true;
            Data.deliveries.push(delivery);
            return delivery;
        });
    }

    function deliveryFindById(orderId) {
        for (var n = 0; n < deliveries.length; n++) {
            if (deliveries.getAt(n).orderId == orderId) {
                return n;
            }
        }
        return -1;
    }


    function orderFindById(orderId) {
        for (var n = 0; n < orders.length; n++) {
            if (orders.getAt(n).orderId == orderId) {
                return n;
            }
        }
        return -1;
    }

    function ordersGet(dealer, status) {

        if (!dealer) {
            dealer = "";
        }

        if (!status) {
            status = "None";
        }

        return WinJS.xhr({ url: baseAddress + "/orders?dealer=" + encodeURIComponent(dealer) + "&status=" + encodeURIComponent(status), headers: rest_headers }).then(function (response) {
            Data.orders.splice(0, Data.orders.length);
            var theDealers = JSON.parse(response.responseText);
            theDealers.forEach(function processDealerData(orderData) {
                orders.push(WinJS.Binding.as(orderData));
            });
            return WinJS.Promise.wrap(orders);
        }, function (err) {
            reporterror("Could not retrieve orders", "Unfortunately, the server could not be contacted in order to retrieve order details.", err);
            return WinJS.Promise.wrap(null);
        });
    }

    function orderDelete(order) {
        return WinJS.xhr({
            type: 'delete',
            url: baseAddress + "/orders/" + encodeURIComponent(order.orderId)
        }).then(function (response) {
            if (response.status == 204) {
                var index = orders.indexOf(order);
                if (index > -1) {
                    orders.splice(index, 1);
                }
            }
            else if (response.status == 0) {
                reporterror("Could not delete order", "Unfortunately, the server could not be contacted in order to retrieve order details.", "");
                return false;
            }
            return WinJS.Promise.wrap(true);
        }, function (response) {
            return WinJS.Promise.wrap(false);
        });
    }

    function orderGetById(orderId) {

        return WinJS.xhr({ url: baseAddress + "/orders/" + encodeURIComponent(orderId) + "?unique=" + Date.now(), headers: rest_headers }).then(function (response) {
            Data.orders.splice(0, Data.orders.length);
            var orderData = JSON.parse(response.responseText);

            var order = WinJS.Binding.as(orderData);

            return Data.quoteGetById(order.quoteId).then(function (quote) {
                order.__quote = quote;
                return order;
            });
        });
    }

    function orderAddEvent(orderId, event) {
        return WinJS.xhr({
            type: 'post',
            url: baseAddress + "/orders/" + encodeURIComponent(orderId) + "/events",
            headers: rest_headers,
            data: JSON.stringify(event),
        }).then(function (response) {
            return WinJS.Promise.wrap(event);
        }, function (response) {
            return WinJS.Promise.wrap(null);
        });
    }

    function orderSave(order, original) {
        if (order.__new) {
            return orderSaveNew(order).then(function (savedorder) {
                return quoteSave(order.__quote).then(function () {
                    return savedorder;
                });
            });
        }
        else {
            return orderSaveEdits(order, original).then(function (savedorder) {
                return quoteSave(order.__quote).then(function () {
                    return savedorder;
                });
            });
        }
    }

    function orderSaveEdits(order, original) {

        return orderSaveEditsToStatus(order, original).then(function () {
            var raworder = order;
            if (order.backingData) {
                raworder = order.backingData;
            }
            return WinJS.xhr({
                type: 'put',
                url: baseAddress + "/orders/" + encodeURIComponent(raworder.orderId),
                headers: rest_headers,
                data: JSON.stringify(raworder),
            }).then(function (response) {
                return WinJS.Promise.wrap(order);
            }, function (response) {
                return WinJS.Promise.wrap(null);
            });
        });
    }

    function orderSaveEditsToStatus(order, original) {
        var statusSave = WinJS.Promise.as(order);
        var statusChangeEvent = { date: Date.now().toString("M/d/yyyy hh:mm:ss tt"), comments: "Status change: " + order.status };

        if (order.status != original.status) {
            statusSave = WinJS.xhr({
                type: 'put',
                url: baseAddress + "/orders/" + encodeURIComponent(order.orderId) + "/status",
                headers: rest_headers,
                data: JSON.stringify({ status: order.status, eventInfo: statusChangeEvent }),
            }).then(function (response) {
                order.events.push(statusChangeEvent);
                return WinJS.Promise.wrap(order);
            }, function (response) {
                return WinJS.Promise.wrap(null);
            });
        }

        return statusSave;
    }

    function orderSaveEditsIndividually(order, original) {
        var raworder = order;
        if (order.backingData) {
            raworder = order.backingData;
        }

        var statusSave = orderSaveEditsToStatus(order, original);
        var eventSave = WinJS.Promise.as(order.events);

        if (order.events.length != original.events.length || JSON.stringify(order.events) != JSON.stringify(original.events)) {
            var toAdd = [];

            var eventMap = {};
            var originalEventMap = {};

            for (var n = 0; n < order.events.length; n++) {
                var theDate = new Date(order.events[n].date).toString("M/d/yyyy hh:mm:ss tt");
                eventMap[theDate + order.events[n].comments] = order.events[n];
            }

            for (var n = 0; n < original.events.length; n++) {
                var theDate = new Date(original.events[n].date).toString("M/d/yyyy hh:mm:ss tt");
                originalEventMap[theDate + original.events[n].comments] = original.events[n];
            }

            Object.keys(eventMap).forEach(function (extraKey) {
                if (!originalEventMap[extraKey]) {
                    toAdd.push(eventMap[extraKey]);
                }
            });

            var a = 1;
        }

        var promises = [];

        promises.push(statusSave);

        for (var n = 0; n < toAdd.length; n++) {
            promises.push(orderAddEvent(order.orderId, toAdd[n]));
        }

        return WinJS.Promise.join(promises).then(function (results) {
            return results;
        });
    }

    function orderSaveNew(order) {
        return WinJS.xhr({
            type: 'post',
            url: baseAddress + "/orders",
            headers: rest_headers,
            data: JSON.stringify({ fromQuote: order.__quote.quoteId }),
        }).then(function (response) {
            if (response.status == 201) {
                //orders.push(order);
                return orderGetById("order-" + order.__quote.quoteId);
            }
            return WinJS.Promise.wrap(order);
        }, function (response) {
            return WinJS.Promise.wrap(null);
        });
    }

    function orderCreateFromQuote(quote) {
        return WinJS.xhr({
            type: 'post',
            url: baseAddress + "/orders?fromQuote=" + encodeURIComponent(quote.quoteId),
            headers: rest_headers,
            data: JSON.stringify({}),
        }).then(function (response) {
            if (response.status == 201) {
                var orderData = JSON.parse(response.responseText);
                var order = WinJS.Binding.as(orderData);
                return order;
            }
            else {
                return null;
            }
        }, function (response) {
            if (response.status == 409) {
                return orderGetById("order-" + quote.quoteId);
            }
            return WinJS.Promise.wrap(null);
        });
    }

    function quotesGet(search) {

        return WinJS.xhr({ url: baseAddress + "/quotes?name=" + encodeURIComponent(search) + "&unique=" + Date.now(), headers: rest_headers }).then(function (response) {
            if (response.status == 0) {
                reporterror("Could not retrieve quotes", "Unfortunately, the server could not be contacted in order to retrieve quote details.", "");
                return false;
            }
            Data.quotes.splice(0, Data.quotes.length);
            var theDealers = JSON.parse(response.responseText);
            theDealers.forEach(function processDealerData(quoteData) {
                quotes.push(WinJS.Binding.as(quoteData));
            });
            return WinJS.Promise.wrap(quotes);
        }, function (err) {
            reporterror("Could not retrieve quotes", "Unfortunately, the server could not be contacted in order to retrieve quote details.", err);
            return WinJS.Promise.wrap(null);
        });
    }
    function quoteDelete(quote) {
        return WinJS.xhr({
            type: 'delete',
            url: baseAddress + "/quotes/" + encodeURIComponent(quote.quoteId)
        }).then(function (response) {
            if (response.status == 204) {
                var index = quotes.indexOf(quote);
                if (index > -1) {
                    quotes.splice(index, 1);
                }
            }
            return WinJS.Promise.wrap(true);
        }, function (response) {
            return WinJS.Promise.wrap(false);
        });
    }

    function quoteGetById(quoteId) {

        return WinJS.xhr({ url: baseAddress + "/quotes/" + encodeURIComponent(quoteId) + "?unique=" + Date.now(), headers: rest_headers }).then(function (response) {
            var quoteData = JSON.parse(response.responseText);
            return WinJS.Binding.as(quoteData);
        });
    }

    function quoteSave(quote) {
        if (quote.__new) {
            return quoteSaveNew(quote);
        }
        else {
            return quoteSaveEdits(quote);
        }
    }

    function quoteSaveEdits(quote) {
        var rawquote = quote;
        if (quote.backingData) {
            rawquote = quote.backingData;
        }
        return WinJS.xhr({
            type: 'put',
            url: baseAddress + "/quotes/" + encodeURIComponent(quote.quoteId),
            headers: rest_headers,
            data: JSON.stringify(rawquote),
        }).then(function (response) {
            return WinJS.Promise.wrap(quote);
        }, function (response) {
            return WinJS.Promise.wrap(null);
        });
    }

    function quoteSaveNew(quote) {
        var rawquote = quote;
        if (quote.backingData) {
            rawquote = quote.backingData;
        }
        return WinJS.xhr({
            type: 'post',
            url: baseAddress + "/quotes",
            headers: rest_headers,
            data: JSON.stringify(rawquote),
        }).then(function (response) {
            if (response.status == 201) {
                quotes.push(quote);
            }
            return WinJS.Promise.wrap(quote);
        }, function (response) {
            return WinJS.Promise.wrap(null);
        });
    }

    function quoteCreate() {
        var newquote = WinJS.Binding.as({
            "quoteId": "",
            "validUntil": Date.today().addMonths(1).toString("M/d/yyyy"),
            "customerName": "",
            "dealerName": "",
            "comments": "",
            "terms": "60 days",
            "unitDescription": "",
            "unitCost": 0,
            "additionalItems": [],
            "totalCost": 0,
            "discount": 0,
            "height": 2.5,
            "width": 0,
            "depth": 0,
            "unit": "",
            "purpose": "Refrigerator",
            "ambientPeak": 30,
            "ambientAverage": 20,
            "buildOnSite": true,
            "city": "",
            "postalCode": "",
            "state": ""
        });
        newquote.__new = true;
        return newquote;
    }

    function catalogFindSku(sku) {
        var result = null;

        for (var n = 0; n < catalog.length; n++) {
            if (catalog.getAt(n).skuNumber == sku) {
                result = catalog.getAt(n);
                break;
            }
        }

        return result;
    }

    function catalogGet() {

        return WinJS.xhr({ url: baseAddress + "/catalog?unique=" + Date.now(), headers: rest_headers }).then(function (response) {
            if (response.status == 0) {
                reporterror("Could not retrieve datalog", "Unfortunately, the server could not be contacted in order to retrieve datalog details.", "");
                return null;
            }
            Data.catalog.splice(0, Data.catalog.length);
            var theCatalog = JSON.parse(response.responseText);
            theCatalog.forEach(function processCatalogData(catalogData) {
                catalog.push(WinJS.Binding.as(catalogData));
            });
            return WinJS.Promise.wrap(catalog);
        }, function (err) {
            reporterror("Could not retrieve catalog", "Unfortunately, the server could not be contacted in order to retrieve catalog details.", err);
            return WinJS.Promise.wrap(null);
        });
    }

    function catalogDelete(product) {
        return WinJS.xhr({
            type: 'delete',
            url: baseAddress + "/catalog/" + encodeURIComponent(product.skuNumber)
        }).then(function (response) {
            if (response.status == 204) {
                var index = catalog.indexOf(product);
                if (index > -1) {
                    catalog.splice(index, 1);
                }
            }
            return WinJS.Promise.wrap(true);
        }, function (response) {
            return WinJS.Promise.wrap(false);
        });
    }

    function catalogSave(catalog) {
        if (catalog.__new) {
            return catalogSaveNew(catalog);
        }
        else {
            return catalogSaveEdits(catalog);
        }
    }

    function catalogSaveEdits(product) {
        var rawProduct = product;
        if (product.backingData) {
            rawProduct = product.backingData;
        }
        return WinJS.xhr({
            type: 'put',
            url: baseAddress + "/catalog/" + encodeURIComponent(product.skuNumber),
            headers: rest_headers,
            data: JSON.stringify(rawProduct),
        }).then(function (response) {
            return WinJS.Promise.wrap(product);
        }, function (response) {
            return WinJS.Promise.wrap(null);
        });
    }

    function catalogSaveNew(product) {
        var rawProduct = product;
        if (product.backingData) {
            rawProduct = product.backingData;
        }
        return WinJS.xhr({
            type: 'post',
            url: baseAddress + "/catalog",
            headers: rest_headers,
            data: JSON.stringify(rawProduct),
        }).then(function (response) {
            if (response.status == 201) {
                catalog.push(product);
            }
            return WinJS.Promise.wrap(product);
        }, function (response) {
            if (response.status == 409) { // already exists (conflict)
                return catalogSaveEdits(product);
            }
            else {
                return WinJS.Promise.wrap(null);
            }
        });
    }


    function catalogCreate() {
        var newCatalog = WinJS.Binding.as({
            skuNumber: '',
            description: '',
            unit: '',
            unitPrice: ''
        });
        newCatalog.__new = true;
        return newCatalog;
    }

    function dealersGet() {

        return WinJS.xhr({ url: baseAddress + "/dealers?unique=" + Date.now(), headers: rest_headers }).then(function (response) {
            if (response.status == 0) {
                reporterror("Could not retrieve dealers", "Unfortunately, the server could not be contacted in order to retrieve dealer details.", "");
                return null;
            }
            Data.dealers.splice(0, Data.dealers.length);
            var theDealers = JSON.parse(response.responseText);
            theDealers.forEach(function processDealerData(dealerData) {
                dealers.push(WinJS.Binding.as(dealerData));
            });
            return WinJS.Promise.wrap(dealers);
        }, function (err) {
            reporterror("Could not retrieve dealers", "Unfortunately, the server could not be contacted in order to retrieve dealer details.", err);
            return WinJS.Promise.wrap(null);
        });
    }

    function dealerDelete(dealer) {
        return WinJS.xhr({
            type: 'delete',
            url: baseAddress + "/dealers/" + encodeURIComponent(dealer.name)
        }).then(function (response) {
            if (response.status == 204) {
                var index = dealers.indexOf(dealer);
                if (index > -1) {
                    dealers.splice(index, 1);
                }
            }
            return WinJS.Promise.wrap(true);
        }, function (response) {
            return WinJS.Promise.wrap(false);
        });
    }

    function dealerSave(dealer) {
        if (dealer.__new) {
            return dealerSaveNew(dealer);
        }
        else {
            return dealerSaveEdits(dealer);
        }
    }

    function dealerSaveEdits(dealer) {
        var rawDealer = dealer;
        if (dealer.backingData) {
            rawDealer = dealer.backingData;
        }
        return WinJS.xhr({
            type: 'put',
            url: baseAddress + "/dealers/" + encodeURIComponent(dealer.name),
            headers: rest_headers,
            data: JSON.stringify(rawDealer),
        }).then(function (response) {
            return WinJS.Promise.wrap(dealer);
        }, function (response) {
            return WinJS.Promise.wrap(null);
        });
    }

    function dealerSaveNew(dealer) {
        var rawDealer = dealer;
        if (dealer.backingData) {
            rawDealer = dealer.backingData;
        }
        return WinJS.xhr({
            type: 'post',
            url: baseAddress + "/dealers",
            headers: rest_headers,
            data: JSON.stringify(rawDealer),
        }).then(function (response) {
            if (response.status == 201) {
                dealers.push(dealer);
            }
            return WinJS.Promise.wrap(dealer);
        }, function (response) {
            return WinJS.Promise.wrap(null);
        });
    }

    function dealerCreate() {
        var newDealer = WinJS.Binding.as({
            name: '',
            contact: '',
            address: '',
            email: '',
            phone: ''
        });
        newDealer.__new = true;
        return newDealer;
    }

})();




================================================
FILE: src/Clients/Web/js/date.js
================================================
/**
 * Version: 1.0 Alpha-1 
 * Build Date: 13-Nov-2007
 * Copyright (c) 2006-2007, Coolite Inc. (http://www.coolite.com/). All rights reserved.
 * License: Licensed under The MIT License. See license.txt and http://www.datejs.com/license/. 
 * Website: http://www.datejs.com/ or http://www.coolite.com/datejs/
 */
Date.CultureInfo={name:"en-US",englishName:"English (United States)",nativeName:"English (United States)",dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],abbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],shortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],firstLetterDayNames:["S","M","T","W","T","F","S"],monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],abbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],amDesignator:"AM",pmDesignator:"PM",firstDayOfWeek:0,twoDigitYearMax:2029,dateElementOrder:"mdy",formatPatterns:{shortDate:"M/d/yyyy",longDate:"dddd, MMMM dd, yyyy",shortTime:"h:mm tt",longTime:"h:mm:ss tt",fullDateTime:"dddd, MMMM dd, yyyy h:mm:ss tt",sortableDateTime:"yyyy-MM-ddTHH:mm:ss",universalSortableDateTime:"yyyy-MM-dd HH:mm:ssZ",rfc1123:"ddd, dd MMM yyyy HH:mm:ss GMT",monthDay:"MMMM dd",yearMonth:"MMMM, yyyy"},regexPatterns:{jan:/^jan(uary)?/i,feb:/^feb(ruary)?/i,mar:/^mar(ch)?/i,apr:/^apr(il)?/i,may:/^may/i,jun:/^jun(e)?/i,jul:/^jul(y)?/i,aug:/^aug(ust)?/i,sep:/^sep(t(ember)?)?/i,oct:/^oct(ober)?/i,nov:/^nov(ember)?/i,dec:/^dec(ember)?/i,sun:/^su(n(day)?)?/i,mon:/^mo(n(day)?)?/i,tue:/^tu(e(s(day)?)?)?/i,wed:/^we(d(nesday)?)?/i,thu:/^th(u(r(s(day)?)?)?)?/i,fri:/^fr(i(day)?)?/i,sat:/^sa(t(urday)?)?/i,future:/^next/i,past:/^last|past|prev(ious)?/i,add:/^(\+|after|from)/i,subtract:/^(\-|before|ago)/i,yesterday:/^yesterday/i,today:/^t(oday)?/i,tomorrow:/^tomorrow/i,now:/^n(ow)?/i,millisecond:/^ms|milli(second)?s?/i,second:/^sec(ond)?s?/i,minute:/^min(ute)?s?/i,hour:/^h(ou)?rs?/i,week:/^w(ee)?k/i,month:/^m(o(nth)?s?)?/i,day:/^d(ays?)?/i,year:/^y((ea)?rs?)?/i,shortMeridian:/^(a|p)/i,longMeridian:/^(a\.?m?\.?|p\.?m?\.?)/i,timezone:/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt)/i,ordinalSuffix:/^\s*(st|nd|rd|th)/i,timeContext:/^\s*(\:|a|p)/i},abbreviatedTimeZoneStandard:{GMT:"-000",EST:"-0400",CST:"-0500",MST:"-0600",PST:"-0700"},abbreviatedTimeZoneDST:{GMT:"-000",EDT:"-0500",CDT:"-0600",MDT:"-0700",PDT:"-0800"}};
Date.getMonthNumberFromName=function(name){var n=Date.CultureInfo.monthNames,m=Date.CultureInfo.abbreviatedMonthNames,s=name.toLowerCase();for(var i=0;i<n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){return i;}}
return-1;};Date.getDayNumberFromName=function(name){var n=Date.CultureInfo.dayNames,m=Date.CultureInfo.abbreviatedDayNames,o=Date.CultureInfo.shortestDayNames,s=name.toLowerCase();for(var i=0;i<n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){return i;}}
return-1;};Date.isLeapYear=function(year){return(((year%4===0)&&(year%100!==0))||(year%400===0));};Date.getDaysInMonth=function(year,month){return[31,(Date.isLeapYear(year)?29:28),31,30,31,30,31,31,30,31,30,31][month];};Date.getTimezoneOffset=function(s,dst){return(dst||false)?Date.CultureInfo.abbreviatedTimeZoneDST[s.toUpperCase()]:Date.CultureInfo.abbreviatedTimeZoneStandard[s.toUpperCase()];};Date.getTimezoneAbbreviation=function(offset,dst){var n=(dst||false)?Date.CultureInfo.abbreviatedTimeZoneDST:Date.CultureInfo.abbreviatedTimeZoneStandard,p;for(p in n){if(n[p]===offset){return p;}}
return null;};Date.prototype.clone=function(){return new Date(this.getTime());};Date.prototype.compareTo=function(date){if(isNaN(this)){throw new Error(this);}
if(date instanceof Date&&!isNaN(date)){return(this>date)?1:(this<date)?-1:0;}else{throw new TypeError(date);}};Date.prototype.equals=function(date){return(this.compareTo(date)===0);};Date.prototype.between=function(start,end){var t=this.getTime();return t>=start.getTime()&&t<=end.getTime();};Date.prototype.addMilliseconds=function(value){this.setMilliseconds(this.getMilliseconds()+value);return this;};Date.prototype.addSeconds=function(value){return this.addMilliseconds(value*1000);};Date.prototype.addMinutes=function(value){return this.addMilliseconds(value*60000);};Date.prototype.addHours=function(value){return this.addMilliseconds(value*3600000);};Date.prototype.addDays=function(value){return this.addMilliseconds(value*86400000);};Date.prototype.addWeeks=function(value){return this.addMilliseconds(value*604800000);};Date.prototype.addMonths=function(value){var n=this.getDate();this.setDate(1);this.setMonth(this.getMonth()+value);this.setDate(Math.min(n,this.getDaysInMonth()));return this;};Date.prototype.addYears=function(value){return this.addMonths(value*12);};Date.prototype.add=function(config){if(typeof config=="number"){this._orient=config;return this;}
var x=config;if(x.millisecond||x.milliseconds){this.addMilliseconds(x.millisecond||x.milliseconds);}
if(x.second||x.seconds){this.addSeconds(x.second||x.seconds);}
if(x.minute||x.minutes){this.addMinutes(x.minute||x.minutes);}
if(x.hour||x.hours){this.addHours(x.hour||x.hours);}
if(x.month||x.months){this.addMonths(x.month||x.months);}
if(x.year||x.years){this.addYears(x.year||x.years);}
if(x.day||x.days){this.addDays(x.day||x.days);}
return this;};Date._validate=function(value,min,max,name){if(typeof value!="number"){throw new TypeError(value+" is not a Number.");}else if(value<min||value>max){throw new RangeError(value+" is not a valid value for "+name+".");}
return true;};Date.validateMillisecond=function(n){return Date._validate(n,0,999,"milliseconds");};Date.validateSecond=function(n){return Date._validate(n,0,59,"seconds");};Date.validateMinute=function(n){return Date._validate(n,0,59,"minutes");};Date.validateHour=function(n){return Date._validate(n,0,23,"hours");};Date.validateDay=function(n,year,month){return Date._validate(n,1,Date.getDaysInMonth(year,month),"days");};Date.validateMonth=function(n){return Date._validate(n,0,11,"months");};Date.validateYear=function(n){return Date._validate(n,1,9999,"seconds");};Date.prototype.set=function(config){var x=config;if(!x.millisecond&&x.millisecond!==0){x.millisecond=-1;}
if(!x.second&&x.second!==0){x.second=-1;}
if(!x.minute&&x.minute!==0){x.minute=-1;}
if(!x.hour&&x.hour!==0){x.hour=-1;}
if(!x.day&&x.day!==0){x.day=-1;}
if(!x.month&&x.month!==0){x.month=-1;}
if(!x.year&&x.year!==0){x.year=-1;}
if(x.millisecond!=-1&&Date.validateMillisecond(x.millisecond)){this.addMilliseconds(x.millisecond-this.getMilliseconds());}
if(x.second!=-1&&Date.validateSecond(x.second)){this.addSeconds(x.second-this.getSeconds());}
if(x.minute!=-1&&Date.validateMinute(x.minute)){this.addMinutes(x.minute-this.getMinutes());}
if(x.hour!=-1&&Date.validateHour(x.hour)){this.addHours(x.hour-this.getHours());}
if(x.month!==-1&&Date.validateMonth(x.month)){this.addMonths(x.month-this.getMonth());}
if(x.year!=-1&&Date.validateYear(x.year)){this.addYears(x.year-this.getFullYear());}
if(x.day!=-1&&Date.validateDay(x.day,this.getFullYear(),this.getMonth())){this.addDays(x.day-this.getDate());}
if(x.timezone){this.setTimezone(x.timezone);}
if(x.timezoneOffset){this.setTimezoneOffset(x.timezoneOffset);}
return this;};Date.prototype.clearTime=function(){this.setHours(0);this.setMinutes(0);this.setSeconds(0);this.setMilliseconds(0);return this;};Date.prototype.isLeapYear=function(){var y=this.getFullYear();return(((y%4===0)&&(y%100!==0))||(y%400===0));};Date.prototype.isWeekday=function(){return!(this.is().sat()||this.is().sun());};Date.prototype.getDaysInMonth=function(){return Date.getDaysInMonth(this.getFullYear(),this.getMonth());};Date.prototype.moveToFirstDayOfMonth=function(){return this.set({day:1});};Date.prototype.moveToLastDayOfMonth=function(){return this.set({day:this.getDaysInMonth()});};Date.prototype.moveToDayOfWeek=function(day,orient){var diff=(day-this.getDay()+7*(orient||+1))%7;return this.addDays((diff===0)?diff+=7*(orient||+1):diff);};Date.prototype.moveToMonth=function(month,orient){var diff=(month-this.getMonth()+12*(orient||+1))%12;return this.addMonths((diff===0)?diff+=12*(orient||+1):diff);};Date.prototype.getDayOfYear=function(){return Math.floor((this-new Date(this.getFullYear(),0,1))/86400000);};Date.prototype.getWeekOfYear=function(firstDayOfWeek){var y=this.getFullYear(),m=this.getMonth(),d=this.getDate();var dow=firstDayOfWeek||Date.CultureInfo.firstDayOfWeek;var offset=7+1-new Date(y,0,1).getDay();if(offset==8){offset=1;}
var daynum=((Date.UTC(y,m,d,0,0,0)-Date.UTC(y,0,1,0,0,0))/86400000)+1;var w=Math.floor((daynum-offset+7)/7);if(w===dow){y--;var prevOffset=7+1-new Date(y,0,1).getDay();if(prevOffset==2||prevOffset==8){w=53;}else{w=52;}}
return w;};Date.prototype.isDST=function(){console.log('isDST');return this.toString().match(/(E|C|M|P)(S|D)T/)[2]=="D";};Date.prototype.getTimezone=function(){return Date.getTimezoneAbbreviation(this.getUTCOffset,this.isDST());};Date.prototype.setTimezoneOffset=function(s){var here=this.getTimezoneOffset(),there=Number(s)*-6/10;this.addMinutes(there-here);return this;};Date.prototype.setTimezone=function(s){return this.setTimezoneOffset(Date.getTimezoneOffset(s));};Date.prototype.getUTCOffset=function(){var n=this.getTimezoneOffset()*-10/6,r;if(n<0){r=(n-10000).toString();return r[0]+r.substr(2);}else{r=(n+10000).toString();return"+"+r.substr(1);}};Date.prototype.getDayName=function(abbrev){return abbrev?Date.CultureInfo.abbreviatedDayNames[this.getDay()]:Date.CultureInfo.dayNames[this.getDay()];};Date.prototype.getMonthName=function(abbrev){return abbrev?Date.CultureInfo.abbreviatedMonthNames[this.getMonth()]:Date.CultureInfo.monthNames[this.getMonth()];};Date.prototype._toString=Date.prototype.toString;Date.prototype.toString=function(format){var self=this;var p=function p(s){return(s.toString().length==1)?"0"+s:s;};return format?format.replace(/dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?/g,function(format){switch(format){case"hh":return p(self.getHours()<13?self.getHours():(self.getHours()-12));case"h":return self.getHours()<13?self.getHours():(self.getHours()-12);case"HH":return p(self.getHours());case"H":return self.getHours();case"mm":return p(self.getMinutes());case"m":return self.getMinutes();case"ss":return p(self.getSeconds());case"s":return self.getSeconds();case"yyyy":return self.getFullYear();case"yy":return self.getFullYear().toString().substring(2,4);case"dddd":return self.getDayName();case"ddd":return self.getDayName(true);case"dd":return p(self.getDate());case"d":return self.getDate().toString();case"MMMM":return self.getMonthName();case"MMM":return self.getMonthName(true);case"MM":return p((self.getMonth()+1));case"M":return self.getMonth()+1;case"t":return self.getHours()<12?Date.CultureInfo.amDesignator.substring(0,1):Date.CultureInfo.pmDesignator.substring(0,1);case"tt":return self.getHours()<12?Date.CultureInfo.amDesignator:Date.CultureInfo.pmDesignator;case"zzz":case"zz":case"z":return"";}}):this._toString();};
Date.now=function(){return new Date();};Date.today=function(){return Date.now().clearTime();};Date.prototype._orient=+1;Date.prototype.next=function(){this._orient=+1;return this;};Date.prototype.last=Date.prototype.prev=Date.prototype.previous=function(){this._orient=-1;return this;};Date.prototype._is=false;Date.prototype.is=function(){this._is=true;return this;};Number.prototype._dateElement="day";Number.prototype.fromNow=function(){var c={};c[this._dateElement]=this;return Date.now().add(c);};Number.prototype.ago=function(){var c={};c[this._dateElement]=this*-1;return Date.now().add(c);};(function(){var $D=Date.prototype,$N=Number.prototype;var dx=("sunday monday tuesday wednesday thursday friday saturday").split(/\s/),mx=("january february march april may june july august september october november december").split(/\s/),px=("Millisecond Second Minute Hour Day Week Month Year").split(/\s/),de;var df=function(n){return function(){if(this._is){this._is=false;return this.getDay()==n;}
return this.moveToDayOfWeek(n,this._orient);};};for(var i=0;i<dx.length;i++){$D[dx[i]]=$D[dx[i].substring(0,3)]=df(i);}
var mf=function(n){return function(){if(this._is){this._is=false;return this.getMonth()===n;}
return this.moveToMonth(n,this._orient);};};for(var j=0;j<mx.length;j++){$D[mx[j]]=$D[mx[j].substring(0,3)]=mf(j);}
var ef=function(j){return function(){if(j.substring(j.length-1)!="s"){j+="s";}
return this["add"+j](this._orient);};};var nf=function(n){return function(){this._dateElement=n;return this;};};for(var k=0;k<px.length;k++){de=px[k].toLowerCase();$D[de]=$D[de+"s"]=ef(px[k]);$N[de]=$N[de+"s"]=nf(de);}}());Date.prototype.toJSONString=function(){return this.toString("yyyy-MM-ddThh:mm:ssZ");};Date.prototype.toShortDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortDatePattern);};Date.prototype.toLongDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.longDatePattern);};Date.prototype.toShortTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortTimePattern);};Date.prototype.toLongTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.longTimePattern);};Date.prototype.getOrdinal=function(){switch(this.getDate()){case 1:case 21:case 31:return"st";case 2:case 22:return"nd";case 3:case 23:return"rd";default:return"th";}};
(function(){Date.Parsing={Exception:function(s){this.message="Parse error at '"+s.substring(0,10)+" ...'";}};var $P=Date.Parsing;var _=$P.Operators={rtoken:function(r){return function(s){var mx=s.match(r);if(mx){return([mx[0],s.substring(mx[0].length)]);}else{throw new $P.Exception(s);}};},token:function(s){return function(s){return _.rtoken(new RegExp("^\s*"+s+"\s*"))(s);};},stoken:function(s){return _.rtoken(new RegExp("^"+s));},until:function(p){return function(s){var qx=[],rx=null;while(s.length){try{rx=p.call(this,s);}catch(e){qx.push(rx[0]);s=rx[1];continue;}
break;}
return[qx,s];};},many:function(p){return function(s){var rx=[],r=null;while(s.length){try{r=p.call(this,s);}catch(e){return[rx,s];}
rx.push(r[0]);s=r[1];}
return[rx,s];};},optional:function(p){return function(s){var r=null;try{r=p.call(this,s);}catch(e){return[null,s];}
return[r[0],r[1]];};},not:function(p){return function(s){try{p.call(this,s);}catch(e){return[null,s];}
throw new $P.Exception(s);};},ignore:function(p){return p?function(s){var r=null;r=p.call(this,s);return[null,r[1]];}:null;},product:function(){var px=arguments[0],qx=Array.prototype.slice.call(arguments,1),rx=[];for(var i=0;i<px.length;i++){rx.push(_.each(px[i],qx));}
return rx;},cache:function(rule){var cache={},r=null;return function(s){try{r=cache[s]=(cache[s]||rule.call(this,s));}catch(e){r=cache[s]=e;}
if(r instanceof $P.Exception){throw r;}else{return r;}};},any:function(){var px=arguments;return function(s){var r=null;for(var i=0;i<px.length;i++){if(px[i]==null){continue;}
try{r=(px[i].call(this,s));}catch(e){r=null;}
if(r){return r;}}
throw new $P.Exception(s);};},each:function(){var px=arguments;return function(s){var rx=[],r=null;for(var i=0;i<px.length;i++){if(px[i]==null){continue;}
try{r=(px[i].call(this,s));}catch(e){throw new $P.Exception(s);}
rx.push(r[0]);s=r[1];}
return[rx,s];};},all:function(){var px=arguments,_=_;return _.each(_.optional(px));},sequence:function(px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;if(px.length==1){return px[0];}
return function(s){var r=null,q=null;var rx=[];for(var i=0;i<px.length;i++){try{r=px[i].call(this,s);}catch(e){break;}
rx.push(r[0]);try{q=d.call(this,r[1]);}catch(ex){q=null;break;}
s=q[1];}
if(!r){throw new $P.Exception(s);}
if(q){throw new $P.Exception(q[1]);}
if(c){try{r=c.call(this,r[1]);}catch(ey){throw new $P.Exception(r[1]);}}
return[rx,(r?r[1]:s)];};},between:function(d1,p,d2){d2=d2||d1;var _fn=_.each(_.ignore(d1),p,_.ignore(d2));return function(s){var rx=_fn.call(this,s);return[[rx[0][0],r[0][2]],rx[1]];};},list:function(p,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return(p instanceof Array?_.each(_.product(p.slice(0,-1),_.ignore(d)),p.slice(-1),_.ignore(c)):_.each(_.many(_.each(p,_.ignore(d))),px,_.ignore(c)));},set:function(px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return function(s){var r=null,p=null,q=null,rx=null,best=[[],s],last=false;for(var i=0;i<px.length;i++){q=null;p=null;r=null;last=(px.length==1);try{r=px[i].call(this,s);}catch(e){continue;}
rx=[[r[0]],r[1]];if(r[1].length>0&&!last){try{q=d.call(this,r[1]);}catch(ex){last=true;}}else{last=true;}
if(!last&&q[1].length===0){last=true;}
if(!last){var qx=[];for(var j=0;j<px.length;j++){if(i!=j){qx.push(px[j]);}}
p=_.set(qx,d).call(this,q[1]);if(p[0].length>0){rx[0]=rx[0].concat(p[0]);rx[1]=p[1];}}
if(rx[1].length<best[1].length){best=rx;}
if(best[1].length===0){break;}}
if(best[0].length===0){return best;}
if(c){try{q=c.call(this,best[1]);}catch(ey){throw new $P.Exception(best[1]);}
best[1]=q[1];}
return best;};},forward:function(gr,fname){return function(s){return gr[fname].call(this,s);};},replace:function(rule,repl){return function(s){var r=rule.call(this,s);return[repl,r[1]];};},process:function(rule,fn){return function(s){var r=rule.call(this,s);return[fn.call(this,r[0]),r[1]];};},min:function(min,rule){return function(s){var rx=rule.call(this,s);if(rx[0].length<min){throw new $P.Exception(s);}
return rx;};}};var _generator=function(op){return function(){var args=null,rx=[];if(arguments.length>1){args=Array.prototype.slice.call(arguments);}else if(arguments[0]instanceof Array){args=arguments[0];}
if(args){for(var i=0,px=args.shift();i<px.length;i++){args.unshift(px[i]);rx.push(op.apply(null,args));args.shift();return rx;}}else{return op.apply(null,arguments);}};};var gx="optional not ignore cache".split(/\s/);for(var i=0;i<gx.length;i++){_[gx[i]]=_generator(_[gx[i]]);}
var _vector=function(op){return function(){if(arguments[0]instanceof Array){return op.apply(null,arguments[0]);}else{return op.apply(null,arguments);}};};var vx="each any all".split(/\s/);for(var j=0;j<vx.length;j++){_[vx[j]]=_vector(_[vx[j]]);}}());(function(){var flattenAndCompact=function(ax){var rx=[];for(var i=0;i<ax.length;i++){if(ax[i]instanceof Array){rx=rx.concat(flattenAndCompact(ax[i]));}else{if(ax[i]){rx.push(ax[i]);}}}
return rx;};Date.Grammar={};Date.Translator={hour:function(s){return function(){this.hour=Number(s);};},minute:function(s){return function(){this.minute=Number(s);};},second:function(s){return function(){this.second=Number(s);};},meridian:function(s){return function(){this.meridian=s.slice(0,1).toLowerCase();};},timezone:function(s){return function(){var n=s.replace(/[^\d\+\-]/g,"");if(n.length){this.timezoneOffset=Number(n);}else{this.timezone=s.toLowerCase();}};},day:function(x){var s=x[0];return function(){this.day=Number(s.match(/\d+/)[0]);};},month:function(s){return function(){this.month=((s.length==3)?Date.getMonthNumberFromName(s):(Number(s)-1));};},year:function(s){return function(){var n=Number(s);this.year=((s.length>2)?n:(n+(((n+2000)<Date.CultureInfo.twoDigitYearMax)?2000:1900)));};},rday:function(s){return function(){switch(s){case"yesterday":this.days=-1;break;case"tomorrow":this.days=1;break;case"today":this.days=0;break;case"now":this.days=0;this.now=true;break;}};},finishExact:function(x){x=(x instanceof Array)?x:[x];var now=new Date();this.year=now.getFullYear();this.month=now.getMonth();this.day=1;this.hour=0;this.minute=0;this.second=0;for(var i=0;i<x.length;i++){if(x[i]){x[i].call(this);}}
this.hour=(this.meridian=="p"&&this.hour<13)?this.hour+12:this.hour;if(this.day>Date.getDaysInMonth(this.year,this.month)){throw new RangeError(this.day+" is not a valid value for days.");}
var r=new Date(this.year,this.month,this.day,this.hour,this.minute,this.second);if(this.timezone){r.set({timezone:this.timezone});}else if(this.timezoneOffset){r.set({timezoneOffset:this.timezoneOffset});}
return r;},finish:function(x){x=(x instanceof Array)?flattenAndCompact(x):[x];if(x.length===0){return null;}
for(var i=0;i<x.length;i++){if(typeof x[i]=="function"){x[i].call(this);}}
if(this.now){return new Date();}
var today=Date.today();var method=null;var expression=!!(this.days!=null||this.orient||this.operator);if(expression){var gap,mod,orient;orient=((this.orient=="past"||this.operator=="subtract")?-1:1);if(this.weekday){this.unit="day";gap=(Date.getDayNumberFromName(this.weekday)-today.getDay());mod=7;this.days=gap?((gap+(orient*mod))%mod):(orient*mod);}
if(this.month){this.unit="month";gap=(this.month-today.getMonth());mod=12;this.months=gap?((gap+(orient*mod))%mod):(orient*mod);this.month=null;}
if(!this.unit){this.unit="day";}
if(this[this.unit+"s"]==null||this.operator!=null){if(!this.value){this.value=1;}
if(this.unit=="week"){this.unit="day";this.value=this.value*7;}
this[this.unit+"s"]=this.value*orient;}
return today.add(this);}else{if(this.meridian&&this.hour){this.hour=(this.hour<13&&this.meridian=="p")?this.hour+12:this.hour;}
if(this.weekday&&!this.day){this.day=(today.addDays((Date.getDayNumberFromName(this.weekday)-today.getDay()))).getDate();}
if(this.month&&!this.day){this.day=1;}
return today.set(this);}}};var _=Date.Parsing.Operators,g=Date.Grammar,t=Date.Translator,_fn;g.datePartDelimiter=_.rtoken(/^([\s\-\.\,\/\x27]+)/);g.timePartDelimiter=_.stoken(":");g.whiteSpace=_.rtoken(/^\s*/);g.generalDelimiter=_.rtoken(/^(([\s\,]|at|on)+)/);var _C={};g.ctoken=function(keys){var fn=_C[keys];if(!fn){var c=Date.CultureInfo.regexPatterns;var kx=keys.split(/\s+/),px=[];for(var i=0;i<kx.length;i++){px.push(_.replace(_.rtoken(c[kx[i]]),kx[i]));}
fn=_C[keys]=_.any.apply(null,px);}
return fn;};g.ctoken2=function(key){return _.rtoken(Date.CultureInfo.regexPatterns[key]);};g.h=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2]|[1-9])/),t.hour));g.hh=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2])/),t.hour));g.H=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3]|[0-9])/),t.hour));g.HH=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3])/),t.hour));g.m=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.minute));g.mm=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.minute));g.s=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.second));g.ss=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.second));g.hms=_.cache(_.sequence([g.H,g.mm,g.ss],g.timePartDelimiter));g.t=_.cache(_.process(g.ctoken2("shortMeridian"),t.meridian));g.tt=_.cache(_.process(g.ctoken2("longMeridian"),t.meridian));g.z=_.cache(_.process(_.rtoken(/^(\+|\-)?\s*\d\d\d\d?/),t.timezone));g.zz=_.cache(_.process(_.rtoken(/^(\+|\-)\s*\d\d\d\d/),t.timezone));g.zzz=_.cache(_.process(g.ctoken2("timezone"),t.timezone));g.timeSuffix=_.each(_.ignore(g.whiteSpace),_.set([g.tt,g.zzz]));g.time=_.each(_.optional(_.ignore(_.stoken("T"))),g.hms,g.timeSuffix);g.d=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1]|\d)/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));g.dd=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1])/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));g.ddd=g.dddd=_.cache(_.process(g.ctoken("sun mon tue wed thu fri sat"),function(s){return function(){this.weekday=s;};}));g.M=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d|\d)/),t.month));g.MM=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d)/),t.month));g.MMM=g.MMMM=_.cache(_.process(g.ctoken("jan feb mar apr may jun jul aug sep oct nov dec"),t.month));g.y=_.cache(_.process(_.rtoken(/^(\d\d?)/),t.year));g.yy=_.cache(_.process(_.rtoken(/^(\d\d)/),t.year));g.yyy=_.cache(_.process(_.rtoken(/^(\d\d?\d?\d?)/),t.year));g.yyyy=_.cache(_.process(_.rtoken(/^(\d\d\d\d)/),t.year));_fn=function(){return _.each(_.any.apply(null,arguments),_.not(g.ctoken2("timeContext")));};g.day=_fn(g.d,g.dd);g.month=_fn(g.M,g.MMM);g.year=_fn(g.yyyy,g.yy);g.orientation=_.process(g.ctoken("past future"),function(s){return function(){this.orient=s;};});g.operator=_.process(g.ctoken("add subtract"),function(s){return function(){this.operator=s;};});g.rday=_.process(g.ctoken("yesterday tomorrow today now"),t.rday);g.unit=_.process(g.ctoken("minute hour day week month year"),function(s){return function(){this.unit=s;};});g.value=_.process(_.rtoken(/^\d\d?(st|nd|rd|th)?/),function(s){return function(){this.value=s.replace(/\D/g,"");};});g.expression=_.set([g.rday,g.operator,g.value,g.unit,g.orientation,g.ddd,g.MMM]);_fn=function(){return _.set(arguments,g.datePartDelimiter);};g.mdy=_fn(g.ddd,g.month,g.day,g.year);g.ymd=_fn(g.ddd,g.year,g.month,g.day);g.dmy=_fn(g.ddd,g.day,g.month,g.year);g.date=function(s){return((g[Date.CultureInfo.dateElementOrder]||g.mdy).call(this,s));};g.format=_.process(_.many(_.any(_.process(_.rtoken(/^(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/),function(fmt){if(g[fmt]){return g[fmt];}else{throw Date.Parsing.Exception(fmt);}}),_.process(_.rtoken(/^[^dMyhHmstz]+/),function(s){return _.ignore(_.stoken(s));}))),function(rules){return _.process(_.each.apply(null,rules),t.finishExact);});var _F={};var _get=function(f){return _F[f]=(_F[f]||g.format(f)[0]);};g.formats=function(fx){if(fx instanceof Array){var rx=[];for(var i=0;i<fx.length;i++){rx.push(_get(fx[i]));}
return _.any.apply(null,rx);}else{return _get(fx);}};g._formats=g.formats(["yyyy-MM-ddTHH:mm:ss","ddd, MMM dd, yyyy H:mm:ss tt","ddd MMM d yyyy HH:mm:ss zzz","d"]);g._start=_.process(_.set([g.date,g.time,g.expression],g.generalDelimiter,g.whiteSpace),t.finish);g.start=function(s){try{var r=g._formats.call({},s);if(r[1].length===0){return r;}}catch(e){}
return g._start.call({},s);};}());Date._parse=Date.parse;Date.parse=function(s){var r=null;if(!s){return null;}
try{r=Date.Grammar.start.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};Date.getParseFunction=function(fx){var fn=Date.Grammar.formats(fx);return function(s){var r=null;try{r=fn.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};};Date.parseExact=function(s,fx){return Date.getParseFunction(fx)(s);};



================================================
FILE: src/Clients/Web/js/default.js
================================================
﻿// For an introduction to the Grid template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkID=232446
(function () {
    "use strict";

    var activation = null;
    var app = WinJS.Application;
    var nav = WinJS.Navigation;
    var sched = WinJS.Utilities.Scheduler;
    var ui = WinJS.UI;

    app.addEventListener("activated", function (args) {
        try {
            activation = Windows.ApplicationModel.Activation;
            if (args.detail.kind === activation.ActivationKind.launch) {
                if (args.detail.previousExecutionState !== activation.ApplicationExecutionState.terminated) {
                    // TODO: This application has been newly launched. Initialize
                    // your application here.
                } else {
                    // TODO: This application has been reactivated from suspension.
                    // Restore application state here.
                }
            }
        }
        catch (e) { }
        showProgress("Starting...");
        nav.history = app.sessionState.history || {};
        nav.history.current.initialPlaceholder = true;

        // Optimize the load of the application and while the splash screen is shown, execute high priority scheduled work.
        ui.disableAnimations();
        var p = ui.processAll().then(function () {
            Controls.EditTools.cacheControlTemplate();
            var navigationCommands = document.querySelectorAll('.navigationButton');
            for (var n = 0; n < navigationCommands.length; n++) {
                var navigationCommand = navigationCommands[n];
                navigationCommand.addEventListener('click', app.navbarInvoked);
            }
            hideProgress();
            return nav.navigate(nav.location || Application.navigator.home, nav.state);
        }).then(function () {
            return sched.requestDrain(sched.Priority.aboveNormal + 1);
        }).then(function () {
            ui.enableAnimations();
        });

        args.setPromise(p);
    });

    app.navbarInvoked = function (ev) {
        var navbarCommand = ev.currentTarget.winControl;
        if (navbarCommand.page == "main") {
            nav.back(nav.history.backStack.length);
        }
        else {
            var location = "pages/" + navbarCommand.page + "/" + navbarCommand.page + ".html";
            nav.navigate(location);
        }
        var trigger = document.querySelector(".nav-trigger");
        trigger.checked = false;
    }

    app.oncheckpoint = function (args) {
        // TODO: This application is about to be suspended. Save any state
        // that needs to persist across suspensions here. If you need to 
        // complete an asynchronous operation before your application is 
        // suspended, call args.setPromise().
        app.sessionState.history = nav.history;
    };

    app.start();
})();

logmessage = function (msg) {
    console.log(msg);
}

var _progressNeeded = false;

function showProgress(message) {
    _progressNeeded = true;
    WinJS.Promise.timeout(500).then(function () {
        if (!_progressNeeded) {
            return;
        }
        var progress = document.querySelector("#progressContainer");
        if (progress) {
            progress.style.display = "flex";
            var underlay = document.querySelector(".progressUnderlay");
            if (underlay) {
                underlay.style.display = "";
                WinJS.Promise.timeout(200).then(function () {
                    underlay.style.opacity = "0.45";
                });
            }

            var messageDiv = document.querySelector("#progressMessage");
            if (messageDiv) {
                messageDiv.textContent = message;
            }
        }
    });
}

function hideProgress() {
    _progressNeeded = false;
    var progress = document.querySelector("#progressContainer");
    if (progress) {
        progress.style.display = "none";
        var underlay = document.querySelector(".progressUnderlay");
        if (underlay) {
            underlay.style.display = "none";
            WinJS.Promise.timeout(200).then(function () {
                underlay.style.opacity = "0.0";
            });
        }
    }
}

function confirm(title, message, primary, secondary) {
    var contentDialogElement = document.querySelector("#confirmdialog");
    var contentDialog = contentDialogElement.firstElementChild.winControl;
    var messageElement = contentDialogElement.querySelector(".win-contentdialog-content");
    messageElement.textContent = message;
    messageElement.style.marginTop = "10px";
    contentDialog.title = title;
    contentDialog.primaryCommandText = primary;
    contentDialog.secondaryCommandText = secondary;

    WinJS.Promise.timeout(500).then(function () {
        contentDialogElement.querySelector(".win-contentdialog-secondarycommand").focus();
    });

    return contentDialog.show();
}

function reporterror(title, message, err) {
    var contentDialogElement = document.querySelector("#confirmdialog");
    var contentDialog = contentDialogElement.firstElementChild.winControl;
    var messageElement = contentDialogElement.querySelector(".win-contentdialog-content");
    messageElement.textContent = message;
    messageElement.style.marginTop = "10px";
    contentDialog.title = title;
    contentDialog.primaryCommandText = "OK";
    contentDialog.secondaryCommandText = undefined;

    WinJS.Promise.timeout(500).then(function () {
        contentDialogElement.querySelector(".win-contentdialog-secondarycommand").focus();
    });

    return contentDialog.show();
}

WinJS.Namespace.define("Binding.Mode", {
    twoway: WinJS.Binding.initializer(function (source, sourceProps, dest, destProps) {
        var destPath, event, sourcePath;
        WinJS.Binding.defaultBind(source, sourceProps, dest, destProps);
        switch (dest.nodeName) {
            case "INPUT":
                event = dest.type === "checkbox" ? "onclick" : "oninput";
                break;
            case "SELECT":
                event = "onchange";
        }
        if (event) {
            destPath = destProps.join(".");
            sourcePath = sourceProps.join(".");
            return dest[event] = function (event) {
                var d, property, s, sourceParent;
                d = WinJS.Utilities.getMember(destPath, dest);
                s = WinJS.Utilities.getMember(sourcePath, source);
                if (s !== d) {
                    if (sourceProps.length === 1) {
                        return source[sourcePath] = d;
                    } else {
                        property = sourceProps[sourceProps.length - 1];
                        sourceParent = sourceProps.slice(0, -1).join('.');
                        return WinJS.Utilities.getMember(sourceParent, source)[property] = d;
                    }
                }
            };
        }
    })
});


function popup(id, title, page, state) {
    var contentDialogElement = document.querySelector("#" + id);
    var contentDialog = contentDialogElement.firstElementChild.winControl;
    var messageElement = contentDialogElement.querySelector(".win-contentdialog-content");
    var popupContentPageControl = null;

    contentDialog.title = title;

    function cleanup(result) {
        if (popupContentPageControl && popupContentPageControl.unload) {
            popupContentPageControl.unload();
        }

        if (messageElement.childElementCount > 0) {
            var oldElement = messageElement.firstElementChild;
            // Cleanup and remove previous element 
            if (oldElement.winControl) {
                if (oldElement.winControl.unload) {
                    oldElement.winControl.unload();
                }
                oldElement.winControl.dispose();
            }
            oldElement.parentNode.removeChild(oldElement);
            oldElement.innerText = "";
        }

        return result;
    }

    return this._lastNavigationPromise = WinJS.Promise.as().then(function () {
        return WinJS.UI.Pages.render(page, messageElement, { popup: contentDialog, state: state });
    }).then(function (rendered) {
        popupContentPageControl = rendered;
        return contentDialog.show();
    }).then(cleanup, cleanup);

}

function addTextChangeEventHandler(element, handler) {
    /*
    onchange occurs only when you blur the textbox
    onkeyup & onkeypress doesn't always occur on text change
    onkeydown occurs on text change (but cannot track cut & paste with mouse click)
    onpaste & oncut occurs with keypress and even with the mouse right click.
    */

    element.onchange = handler;
    element.onkeyup = handler;
    element.onkeydown = handler;
    element.onpast = handler;
    element.oncut = handler;
}

function addAddressHandler(input, setDataItem) {
    try {
        var options = {
        };

        var autocomplete = new google.maps.places.Autocomplete(input, options);

        google.maps.event.addListener(autocomplete, 'place_changed', function () {
            var place = autocomplete.getPlace();
            if (place.geometry) {
                setDataItem(place);
            }
        });
    }
    catch (e) { }
}

function getPostCodeFromPlace(place) {
    var postcode = "";
    for (var i = 0; i < place.address_components.length; i++) {
        for (var j = 0; j < place.address_components[i].types.length; j++) {
            if (place.address_components[i].types[j] == "postal_code") {
                postcode = place.address_components[i].long_name;
                break;
            }
        }
    }
    return postcode;
}

function clone(obj) {
    return JSON.parse(JSON.stringify(obj));
};


================================================
FILE: src/Clients/Web/js/navigator.js
================================================
﻿(function () {
    "use strict";

    var nav = WinJS.Navigation;

    WinJS.Namespace.define("Application", {
        PageControlNavigator: WinJS.Class.define(
            // Define the constructor function for the PageControlNavigator.
            function PageControlNavigator(element, options) {
                this._element = element || document.createElement("div");
                this._element.appendChild(this._createPageElement());

                this.home = options.home;

                this._eventHandlerRemover = [];

                var that = this;
                function addRemovableEventListener(e, eventName, handler, capture) {
                    e.addEventListener(eventName, handler, capture);
                    that._eventHandlerRemover.push(function () {
                        e.removeEventListener(eventName, handler);
                    });
                };

                addRemovableEventListener(nav, 'navigating', this._navigating.bind(this), false);
                addRemovableEventListener(nav, 'navigated', this._navigated.bind(this), false);

                window.onresize = this._resized.bind(this);

                Application.navigator = this;
            }, {
                home: "",
                /// <field domElement="true" />
                _element: null,
                _lastNavigationPromise: WinJS.Promise.as(),
                _lastViewstate: 0,

                // This is the currently loaded Page object.
                pageControl: {
                    get: function () { return this.pageElement && this.pageElement.winControl; }
                },

                // This is the root element of the current page.
                pageElement: {
                    get: function () { return this._element.firstElementChild; }
                },

                // This function disposes the page navigator and its contents.
                dispose: function () {
                    if (this._disposed) {
                        return;
                    }

                    this._disposed = true;
                    WinJS.Utilities.disposeSubTree(this._element);
                    for (var i = 0; i < this._eventHandlerRemover.length; i++) {
                        this._eventHandlerRemover[i]();
                    }
                    this._eventHandlerRemover = null;
                },

                // Creates a container for a new page to be loaded into.
                _createPageElement: function () {
                    var element = document.createElement("div");
                    element.setAttribute("dir", window.getComputedStyle(this._element, null).direction);
                    element.style.position = "absolute";
                    element.style.visibility = "hidden";
                    element.style.width = "100%";
                    element.style.height = "100%";
                    return element;
                },

                // Retrieves a list of animation elements for the current page.
                // If the page does not define a list, animate the entire page.
                _getAnimationElements: function () {
                    if (this.pageControl && this.pageControl.getAnimationElements) {
                        return this.pageControl.getAnimationElements();
                    }
                    return this.pageElement;
                },

                _navigated: function () {
                    var homeButton = this.pageElement.querySelector(".page-header-home");
                    homeButton.addEventListener("click", function () {
                        nav.back(nav.history.backStack.length);
                    });
                    this.pageElement.style.visibility = "";
                    WinJS.UI.Animation.enterPage(this._getAnimationElements(), [{ top: "0px", left: "40px", rtlflip: true }]).done();
                },

                // Responds to navigation by adding new pages to the DOM. 
                _navigating: function (args) {
                    var newElement = this._createPageElement();
                    this._element.appendChild(newElement);

                    this._lastNavigationPromise.cancel();

                    var that = this;

                    function cleanup() {
                        if (that._element.childElementCount > 1) {
                            var oldElement = that._element.firstElementChild;
                            // Cleanup and remove previous element 
                            if (oldElement.winControl) {
                                if (oldElement.winControl.unload) {
                                    oldElement.winControl.unload();
                                }
                                oldElement.winControl.dispose();
                            }
                            oldElement.parentNode.removeChild(oldElement);
                            oldElement.innerText = "";
                        }
                    }

                    this._lastNavigationPromise = WinJS.Promise.as().then(function () {
                        return WinJS.UI.Pages.render(args.detail.location, newElement, args.detail.state);
                    }).then(cleanup, cleanup);

                    args.detail.setPromise(this._lastNavigationPromise);
                },

                // Responds to resize events and call the updateLayout function
                // on the currently loaded page.
                _resized: function (args) {
                    if (this.pageControl && this.pageControl.updateLayout) {
                        this.pageControl.updateLayout.call(this.pageControl, this.pageElement);
                    }
                },
            }
        )
    });
})();



================================================
FILE: src/Clients/Web/js/serverconfig.js
================================================
﻿// Release configuration
// Do not use the original (deleted that line), use the following one (OguzP)
var baseAddress = 'http://' + window.location.hostname + ':8080'


================================================
FILE: src/Clients/Web/pages/catalog/catalog.css
================================================
﻿.catalogDetail {
}



================================================
FILE: src/Clients/Web/pages/catalog/catalog.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>catalog</title>

    <link href="catalog.css" rel="stylesheet" />
    <script src="catalog.js"></script>
</head>
<body>
    <div class="catalog fragment">
        <header class="page-header" aria-label="Header content" role="banner">
            <button class="page-header-home">
                <img src="../../images/FabrikamIcon.png" />
            </button>
            <h2 class="titlearea win-type-ellipsis">
                <span class="pagetitle">Catalog</span>
            </h2>
        </header>
        <section class="page-section" aria-label="Main content" role="main">
            <!-- Simple template for the ListView instantiation  -->
            <div class="catalogItemTemplate" data-win-control="WinJS.Binding.Template" style="display: none">
                <div class="listItem catalogItem">
                    <div class="catalogItem-Detail">
                        <h3 data-win-bind="textContent: skuNumber"></h3>
                        <div class="list-item-entry-small" data-win-bind="textContent: description"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: unit"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: unitPrice"></div>
                    </div>
                </div>
            </div>

            <div class="edittools" data-win-control="Controls.EditTools" data-win-options="{  }"></div>

            <div id="listView"
                 class="itemListView catalogListView"
                 data-win-control="WinJS.UI.ListView"
                 data-win-options="{
                    itemDataSource: Data.catalog.dataSource,
                    itemTemplate: select('.catalogItemTemplate'),
                    selectionMode: 'single',
                    tapBehavior: 'directSelect',
                    swipeBehavior: 'select',
                    layout: { type: WinJS.UI.ListLayout }
                 }">
            </div>

            <div class="editDetail catalogDetail">
                <label class="inputlabel">Name:</label>
                <input id="skuNumber" class="textinput" type="text" data-win-bind="value: skuNumber Binding.Mode.twoway" />
                <br />
                <label class="inputlabel">Description:</label>
                <input id="description" class="textinput" type="text" data-win-bind="value: description Binding.Mode.twoway" />
                <br />
                <label class="inputlabel">Unit:</label>
                <input id="unit" class="textinput" type="text" data-win-bind="value: unit Binding.Mode.twoway" />
                <br />
                <label class="inputlabel">Price:</label>
                <input id="unitPrice" class="textinput" type="text" data-win-bind="value: unitPrice Binding.Mode.twoway" />
            </div>
        </section>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/pages/catalog/catalog.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";
    var nav = WinJS.Navigation;

    WinJS.UI.Pages.define("pages/catalog/catalog.html", {
        listViewControl: null,
        editTools: null,
        editButtons: null,
        currentItem: null,
        catalogDetailElement: null,
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {
            var subpage = element.querySelector(".page-section");
            var that = this;

            return WinJS.UI.processAll(element).then(function () {

                that.listViewControl = element.querySelector(".catalogListView").winControl;
                that.catalogDetailElement = element.querySelector(".catalogDetail");
                subpage.style.display = "none";
                showProgress("Loading...");
                return Data.catalogGet().then(function (catalog) {
                    if (!catalog) {
                        hideProgress();
                        nav.back(nav.history.backStack.length);
                        return;
                    }
                    that.editTools = subpage.querySelector(".edittools").winControl;
                    that.editButtons = that.editTools.getButtons();
                    that.editTools.addEventListener("click", that._buttonHandler.bind(that));
                    that.listViewControl.forceLayout();

                    that.editButtons['add'].disabled = false;
                    that.editButtons['edit'].style.display = "none";

                    that.listViewControl.onselectionchanged = function (arg) {
                        that.listViewControl.selection.getItems().then(function (items) {
                            if (items.length > 0) {
                                that.currentItem = items[0].data;
                                WinJS.Binding.processAll(that.catalogDetailElement, items[0].data);
                                //that.editButtons['delete'].disabled = false;
                                //that.editButtons['edit'].disabled = false;
                                //that.editButtons['save'].disabled = false;
                            }
                            else {
                                that.currentItem = null;
                                //that.editButtons['delete'].disabled = true;
                                //that.editButtons['edit'].disabled = true;
                                //that.editButtons['save'].disabled = true;
                            }
                        });
                    }
                    that.listViewControl.selection.add(0);
                    hideProgress();
                    subpage.style.display = "";

                    WinJS.UI.Animation.enterContent(subpage);
                });
            });
        },

        _buttonHandler: function (args) {
            if (!args.label || (this.currentItem == null && args.label != 'add')) {
                return;
            }
            var that = this;

            switch (args.label) {
                case 'save': {
                    Data.catalogSave(this.currentItem).then(function (saved) {
                        if (saved) {
                            var index = Data.catalog.indexOf(saved);
                            that.listViewControl.selection.clear();
                            that.listViewControl.selection.add(index);
                            that.listViewControl.ensureVisible(index);
                        }
                    });
                    break;
                }
                case 'delete': {
                    confirm("Delete Product", "Are you sure that you'd like to delete " + this.currentItem.skuNumber + "?", "Yes", "No").then(function (result) {
                        if (result.reason == "primary") {
                            var idx = Data.catalog.indexOf(that.currentItem) - 1;
                            if (idx < 0) {
                                idx = 0;
                            }
                            Data.catalogDelete(that.currentItem).then(function (deleted) {
                                that.listViewControl.selection.clear();
                                if (Data.catalog.length > 0) {
                                    that.listViewControl.selection.add(idx);
                                    that.listViewControl.ensureVisible(idx);
                                }
                            });
                        }
                    });
                    break;
                }
                case 'add': {
                    this.listViewControl.selection.clear();
                    this.currentItem = Data.catalogCreate();
                    WinJS.Binding.processAll(this.catalogDetailElement, this.currentItem);
                    that.catalogDetailElement.querySelector("#skuNumber").focus();

                    break;
                }
                default: {

                }
            }
        },

        unload: function () {
            // TODO: Respond to navigations away from this page.
        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();



================================================
FILE: src/Clients/Web/pages/dealers/dealers.css
================================================
﻿.dealerDetail {
}
Directory structure:
└── microsoft-partsunlimitedmrp/
    ├── README.md
    ├── CONTRIBUTING.md
    ├── CreateVMBasic.PNG
    ├── LICENSE
    ├── SECURITY.md
    ├── .travis.yml
    ├── deploy/
    │   ├── Build-MRP-App-Manually.md
    │   ├── deploy_mrp_app.sh
    │   ├── Install-Build-Dependencies.sh
    │   ├── install_mrp_dependencies.sh
    │   ├── MongoRecords.js
    │   ├── SSH-MRP-Artifacts.ps1
    │   ├── SSH-MRP-BDD-Security.ps1
    │   ├── azurestack/
    │   │   ├── readme.md
    │   │   ├── customscripts/
    │   │   │   ├── readme.md
    │   │   │   ├── install_updates.sh
    │   │   │   ├── chef/
    │   │   │   │   ├── readme.md
    │   │   │   │   └── install_chef.sh
    │   │   │   ├── jenkins/
    │   │   │   │   └── install_jenkins_1604.sh
    │   │   │   ├── linux_extension/
    │   │   │   │   └── manifest.json
    │   │   │   └── puppet/
    │   │   │       └── install_puppet_1604.sh
    │   │   └── instances/
    │   │       ├── chef_node/
    │   │       │   ├── readme.md
    │   │       │   └── AddChefNode.json
    │   │       ├── chef_standalone/
    │   │       │   ├── readme.md
    │   │       │   └── Chef.ChefServer/
    │   │       │       ├── Manifest.json
    │   │       │       ├── UIDefinition.json
    │   │       │       ├── DeploymentTemplates/
    │   │       │       │   └── ChefDeploy.json
    │   │       │       └── strings/
    │   │       │           └── resources.resjson
    │   │       ├── chef_workstation/
    │   │       │   ├── readme.md
    │   │       │   └── AddChefWorkstation.json
    │   │       ├── jenkins_mrp/
    │   │       │   ├── readme.md
    │   │       │   └── PartsUnlimitedMRP.MRPwithJenkins/
    │   │       │       ├── Manifest.json
    │   │       │       ├── UIDefinition.json
    │   │       │       ├── DeploymentTemplates/
    │   │       │       │   └── MRPwithJenkinsDeploy.json
    │   │       │       └── strings/
    │   │       │           └── resources.resjson
    │   │       ├── jenkins_standalone/
    │   │       │   ├── readme.md
    │   │       │   └── TheJenkinsProject.Jenkins/
    │   │       │       ├── Manifest.json
    │   │       │       ├── UIDefinition.json
    │   │       │       ├── DeploymentTemplates/
    │   │       │       │   └── JenkinsDeploy.json
    │   │       │       └── strings/
    │   │       │           └── resources.resjson
    │   │       ├── parts_unlimited_mrp_base/
    │   │       │   ├── readme.md
    │   │       │   ├── install_mrp_dependencies_1604.sh
    │   │       │   └── PartsUnlimited.Ubuntu1604/
    │   │       │       ├── Manifest.json
    │   │       │       ├── UIDefinition.json
    │   │       │       ├── DeploymentTemplates/
    │   │       │       │   └── PartsUnlimitedMRP.json
    │   │       │       └── strings/
    │   │       │           └── resources.resjson
    │   │       ├── parts_unlimited_SSH_mrp_base/
    │   │       │   ├── readme.md
    │   │       │   └── PartsUnlimitedSSH.Ubuntu1604/
    │   │       │       ├── Manifest.json
    │   │       │       ├── UIDefinition.json
    │   │       │       ├── DeploymentTemplates/
    │   │       │       │   └── PartsUnlimitedSSHMRP.json
    │   │       │       └── strings/
    │   │       │           └── resources.resjson
    │   │       ├── puppet_node/
    │   │       │   ├── readme.md
    │   │       │   └── AddPuppetNode.json
    │   │       ├── puppet_standalone/
    │   │       │   ├── readme.md
    │   │       │   └── Puppet.PuppetEnterprise/
    │   │       │       ├── Manifest.json
    │   │       │       ├── UIDefinition.json
    │   │       │       ├── DeploymentTemplates/
    │   │       │       │   └── PuppetDeploy.json
    │   │       │       └── strings/
    │   │       │           └── resources.resjson
    │   │       ├── ubuntu_server_1404_base/
    │   │       │   ├── readme.md
    │   │       │   └── Canonical.Ubuntu1404/
    │   │       │       ├── Manifest.json
    │   │       │       ├── UIDefinition.json
    │   │       │       ├── DeploymentTemplates/
    │   │       │       │   └── UbuntuServer1404.json
    │   │       │       └── strings/
    │   │       │           └── resources.resjson
    │   │       └── ubuntu_server_1604_base/
    │   │           ├── readme.md
    │   │           └── Canonical.UbuntuServer.1.0.0/
    │   │               ├── Manifest.json
    │   │               ├── UIDefinition.json
    │   │               ├── DeploymentTemplates/
    │   │               │   └── UbuntuServer1604.json
    │   │               └── strings/
    │   │                   └── resources.resjson
    │   └── docker/
    │       ├── BuildAndRun.sh
    │       ├── StopAndRemove.sh
    │       ├── Clients/
    │       │   ├── Dockerfile
    │       │   └── drop/
    │       │       └── PUT YOUR WAR FILE HERE
    │       ├── Database/
    │       │   ├── Dockerfile
    │       │   └── drop/
    │       │       └── MongoRecords.js
    │       └── Order/
    │           ├── Dockerfile
    │           └── drop/
    │               ├── PUT YOUR JAR FILE HERE
    │               └── run.sh
    ├── Labfiles/
    │   ├── ansible-azure-lab/
    │   │   ├── ARMtemplate-newVM.json
    │   │   ├── delete_vm.yml
    │   │   ├── httpd.yml
    │   │   ├── index.html
    │   │   ├── LICENSE
    │   │   ├── new_ARM_deployment.yml
    │   │   ├── new_vm_web.yml
    │   │   └── VERSION
    │   ├── AZ-400T05-ImplemntgAppInfra/
    │   │   └── Labfiles/
    │   │       ├── automate_nginx.sh
    │   │       ├── ansible/
    │   │       │   ├── ARMtemplate-newVM.json
    │   │       │   ├── create_vm.yml
    │   │       │   ├── cron.yml
    │   │       │   ├── delete_vm.yml
    │   │       │   ├── httpd.yml
    │   │       │   ├── index.html
    │   │       │   ├── new_ARM_deployment.yml
    │   │       │   ├── new_vm_web.yml
    │   │       │   └── nginx.yml
    │   │       └── M04/
    │   │           ├── DeployusingChef/
    │   │           │   └── final/
    │   │           │       └── default.rb
    │   │           └── Puppet/
    │   │               └── final/
    │   │                   └── init.pp
    │   ├── DevOps200.1x-PracticesandPrinciples/
    │   │   ├── Mod03/
    │   │   │   └── python-ci-example-master/
    │   │   │       ├── README.md
    │   │   │       ├── __init__.py
    │   │   │       ├── requirements.txt
    │   │   │       ├── .travis.yml
    │   │   │       └── app/
    │   │   │           ├── __init__.py
    │   │   │           ├── src/
    │   │   │           │   ├── __init__.py
    │   │   │           │   └── app.py
    │   │   │           └── tests/
    │   │   │               ├── __init__.py
    │   │   │               └── app-test.py
    │   │   └── Mod04/
    │   │       └── load_testing_locust-master/
    │   │           ├── README.md
    │   │           ├── __init__.py
    │   │           ├── locustfile.py
    │   │           └── app/
    │   │               ├── __init__.py
    │   │               └── app.py
    │   └── DevOps200.2x-InfrastructureasCode/
    │       ├── DeployusingChef/
    │       │   └── final/
    │       │       └── default.rb
    │       └── Puppet/
    │           └── final/
    │               └── init.pp
    └── src/
        ├── Backend/
        │   ├── IntegrationService/
        │   │   ├── gradlew
        │   │   ├── gradlew.bat
        │   │   ├── IntegrationService.iml
        │   │   ├── gradle/
        │   │   │   └── wrapper/
        │   │   │       └── gradle-wrapper.properties
        │   │   └── src/
        │   │       └── main/
        │   │           ├── java/
        │   │           │   └── integration/
        │   │           │       ├── Constants.java
        │   │           │       ├── Main.java
        │   │           │       ├── infrastructure/
        │   │           │       │   ├── ConfigurationHelpers.java
        │   │           │       │   └── ConfigurationManager.java
        │   │           │       ├── models/
        │   │           │       │   ├── QueueResponse.java
        │   │           │       │   ├── mrp/
        │   │           │       │   │   ├── CatalogItem.java
        │   │           │       │   │   ├── DeliveryAddress.java
        │   │           │       │   │   ├── Order.java
        │   │           │       │   │   ├── PhoneInfo.java
        │   │           │       │   │   ├── Quote.java
        │   │           │       │   │   ├── QuoteItemInfo.java
        │   │           │       │   │   ├── ShipmentEventInfo.java
        │   │           │       │   │   └── ShipmentRecord.java
        │   │           │       │   └── website/
        │   │           │       │       ├── OrderItem.java
        │   │           │       │       ├── OrderMessage.java
        │   │           │       │       ├── ProductItem.java
        │   │           │       │       └── ProductMessage.java
        │   │           │       ├── scheduled/
        │   │           │       │   ├── CreateOrderProcessTask.java
        │   │           │       │   └── UpdateProductProcessTask.java
        │   │           │       └── services/
        │   │           │           ├── MrpConnectService.java
        │   │           │           ├── QueueFactory.java
        │   │           │           └── QueueService.java
        │   │           └── resources/
        │   │               └── application.properties
        │   └── OrderService/
        │       ├── README
        │       ├── README.md
        │       ├── gradlew
        │       ├── gradlew.bat
        │       ├── removeBuild.bat
        │       ├── version.properties
        │       ├── buildSrc/
        │       │   └── src/
        │       │       └── main/
        │       │           └── groovy/
        │       │               └── com/
        │       │                   └── microsoft/
        │       │                       └── appinsights/
        │       │                           ├── BuildInformationTask.groovy
        │       │                           └── CleanBuildInformationTask.groovy
        │       ├── gradle/
        │       │   └── wrapper/
        │       │       └── gradle-wrapper.properties
        │       ├── scripts/
        │       │   ├── cat001.json
        │       │   ├── cat002.json
        │       │   ├── cat003.json
        │       │   ├── cat004.json
        │       │   ├── createorder.sh
        │       │   ├── dealer1.json
        │       │   ├── getenv.sh
        │       │   ├── quote1.json
        │       │   ├── quote2.json
        │       │   ├── schema.psql
        │       │   ├── setup.sh
        │       │   ├── setupdocker.sh
        │       │   └── update.sh
        │       └── src/
        │           ├── main/
        │           │   ├── java/
        │           │   │   └── smpl/
        │           │   │       └── ordering/
        │           │   │           ├── AppInsightsFilter.java
        │           │   │           ├── BadRequestException.java
        │           │   │           ├── ConflictingRequestException.java
        │           │   │           ├── MongoDBProperties.java
        │           │   │           ├── OrderingConfiguration.java
        │           │   │           ├── OrderingInitializer.java
        │           │   │           ├── OrderingServiceProperties.java
        │           │   │           ├── PostgresqlProperties.java
        │           │   │           ├── PropertyHelper.java
        │           │   │           ├── SimpleCORSFilter.java
        │           │   │           ├── TestPath.java
        │           │   │           ├── Utility.java
        │           │   │           ├── controllers/
        │           │   │           │   ├── CatalogController.java
        │           │   │           │   ├── DealerController.java
        │           │   │           │   ├── OrderController.java
        │           │   │           │   ├── PingController.java
        │           │   │           │   ├── QuoteController.java
        │           │   │           │   └── ShipmentController.java
        │           │   │           ├── models/
        │           │   │           │   ├── CatalogItem.java
        │           │   │           │   ├── DealerInfo.java
        │           │   │           │   ├── Delivery.java
        │           │   │           │   ├── DeliveryAddress.java
        │           │   │           │   ├── Order.java
        │           │   │           │   ├── OrderEventInfo.java
        │           │   │           │   ├── OrderStatus.java
        │           │   │           │   ├── OrderUpdateInfo.java
        │           │   │           │   ├── PhoneInfo.java
        │           │   │           │   ├── Quote.java
        │           │   │           │   ├── QuoteItemInfo.java
        │           │   │           │   ├── ShipmentEventInfo.java
        │           │   │           │   └── ShipmentRecord.java
        │           │   │           └── repositories/
        │           │   │               ├── CatalogItemsRepository.java
        │           │   │               ├── DealersRepository.java
        │           │   │               ├── OrderRepository.java
        │           │   │               ├── QuoteRepository.java
        │           │   │               ├── RepositoryFactory.java
        │           │   │               ├── ShipmentRepository.java
        │           │   │               ├── mock/
        │           │   │               │   ├── MockCatalogItemsRepository.java
        │           │   │               │   ├── MockDealersRepository.java
        │           │   │               │   ├── MockOrderRepository.java
        │           │   │               │   ├── MockQuoteRepository.java
        │           │   │               │   └── MockShipmentRepository.java
        │           │   │               └── mongodb/
        │           │   │                   ├── MongoCatalogItemsRepository.java
        │           │   │                   ├── MongoDealersRepository.java
        │           │   │                   ├── MongoOperationsWithRetry.java
        │           │   │                   ├── MongoOrderRepository.java
        │           │   │                   ├── MongoQuoteRepository.java
        │           │   │                   ├── MongoShipmentRepository.java
        │           │   │                   └── models/
        │           │   │                       ├── CatalogItem.java
        │           │   │                       ├── Dealer.java
        │           │   │                       ├── OrderDetails.java
        │           │   │                       ├── QuoteDetails.java
        │           │   │                       └── ShipmentDetails.java
        │           │   └── resources/
        │           │       ├── application.properties
        │           │       ├── ApplicationInsights.xml
        │           │       └── buildinfo.properties
        │           └── test/
        │               ├── java/
        │               │   └── smpl/
        │               │       └── ordering/
        │               │           ├── ConfigurationRule.java
        │               │           ├── TestOrderingConfiguration.java
        │               │           ├── UtilityTest.java
        │               │           ├── controllers/
        │               │           │   ├── CatalogControllerTest.java
        │               │           │   ├── DealerControllerTest.java
        │               │           │   ├── OrderControllerTest.java
        │               │           │   ├── QuoteControllerTest.java
        │               │           │   └── ShipmentControllerTest.java
        │               │           └── repositories/
        │               │               ├── CatalogItemsRepositoryTest.java
        │               │               ├── DealersRepositoryTest.java
        │               │               ├── OrderRepositoryTest.java
        │               │               ├── QuoteRepositoryTest.java
        │               │               ├── ShipmentRepositoryTest.java
        │               │               ├── mock/
        │               │               │   └── test/
        │               │               │       ├── MockCatalogItemsRepositoryTest.java
        │               │               │       ├── MockDealersRepositoryTest.java
        │               │               │       ├── MockOrderRepositoryTest.java
        │               │               │       ├── MockQuoteRepositoryTest.java
        │               │               │       └── MockShipmentRepositoryTest.java
        │               │               └── mongodb/
        │               │                   └── test/
        │               │                       ├── IntegrationTests.java
        │               │                       ├── MongoCatalogItemsRepositoryTest.java
        │               │                       ├── MongoDealersRepositoryTest.java
        │               │                       ├── MongoOrderRepositoryTest.java
        │               │                       ├── MongoQuoteRepositoryTest.java
        │               │                       └── MongoShipmentRepositoryTest.java
        │               └── resources/
        │                   └── application.properties
        └── Clients/
            ├── README.md
            ├── gradlew
            ├── gradlew.bat
            ├── removeBuild.bat
            ├── gradle/
            │   └── wrapper/
            │       └── gradle-wrapper.properties
            └── Web/
                ├── default.html
                ├── index.html
                ├── controls/
                │   └── edittools/
                │       ├── edittools.css
                │       ├── edittools.html
                │       └── edittools.js
                ├── css/
                │   └── default.css
                ├── js/
                │   ├── data.js
                │   ├── date.js
                │   ├── default.js
                │   ├── navigator.js
                │   └── serverconfig.js
                └── pages/
                    ├── catalog/
                    │   ├── catalog.css
                    │   ├── catalog.html
                    │   └── catalog.js
                    ├── dealers/
                    │   ├── dealers.css
                    │   ├── dealers.html
                    │   └── dealers.js
                    ├── deliveries/
                    │   ├── deliveries.css
                    │   ├── deliveries.html
                    │   └── deliveries.js
                    ├── extras/
                    │   ├── extras.css
                    │   ├── extras.html
                    │   └── extras.js
                    ├── main/
                    │   ├── main.css
                    │   ├── main.html
                    │   ├── main.js
                    │   └── main_files/
                    │       └── main.js
                    ├── orderevents/
                    │   ├── orderevents.css
                    │   ├── orderevents.html
                    │   └── orderevents.js
                    ├── orders/
                    │   ├── orders.css
                    │   ├── orders.html
                    │   └── orders.js
                    └── quotes/
                        ├── quotes.css
                        ├── quotes.html
                        └── quotes.js

================================================
FILE: README.md
================================================
﻿# Parts Unlimited MRP #

Parts Unlimited MRP is a fictional outsourced Manufacturing Resource Planning (MRP) application for training purposes based on the description in chapters 31-35 of The Phoenix Projectby Gene Kim, Kevin Behr and George Spafford. © 2013 IT Revolution Press LLC, Portland, OR. Resemblance to “Project Unicorn” in the novel is intentional; resemblance to any real company is purely coincidental.

The application uses entirely open source software including Linux, Java, Apache, and MongoDB which creates a web front end, an order service, and an integration service. 

The master branch of this repo contains the PartsUnlimtedMRP application, and deployment and configuration files of that sample app. This sample app and configuration files are then used in the labs appearing on the github pages site <a href="http://microsoft.github.io/PartsUnlimitedMRP" target="_blank"><span style="color: #0066cc;" color="#0066cc">http://microsoft.github.io/PartsUnlimitedMRP</span></a>. A shortend url is available in the form of <a href="http://aka.ms/pumrplabs" target="_blank"><span style="color: #0066cc;" color="#0066cc">http://aka.ms/pumrplabs</span></a>

Any updates or changes to the application or labfiles can be made be merging changes into this **master** branch, but lab steps and graphics are sourced from the **gh-pages** branch. Updates to lab page configuration, the lab steps or graphics can be done through the <a href="https://github.com/Microsoft/PartsUnlimitedMRP/tree/gh-pages" target="_blank"><span style="color: #0066cc;" color="#0066cc">https://github.com/Microsoft/PartsUnlimitedMRP/tree/gh-pages</span></a> branch of this repo.

To get started, please proceed to the page <a href="http://microsoft.github.io/PartsUnlimitedMRP" target="_blank"><span style="color: #0066cc;" color="#0066cc">http://microsoft.github.io/PartsUnlimitedMRP</span></a>



## PartsUnlimited MRP  - Key Features
- Front end service - runs Apache Tomcat and talks to order service
- Order and Integration service - runs Java and calls MongoDB
- Integration service - present to integrate with Parts Unlimited Website
- Includes a Dockerfile and sample publishing profile to publish to a Docker container
- Includes Azure RM JSON templates and PowerShell automation scripts to easily build and provision your environment

For the labs based around the PartsUnlimited .NET application see the page <a href="http://microsoft.github.io/PartsUnlimited" target="_blank"><span style="color: #0066cc;" color="#0066cc">http://microsoft.github.io/PartsUnlimited</span></a>. It will show you how to use Visual Studio Team Services with a .NET application and attempts to use exclusively Microsoft products, tools and services, or 3rd party and open source products integrating with Microsoft Products and services.

## Microsoft Professional Program (MPP) for DevOps

These labs are used as part of the **Microsoft Professional Program (MPP) with DevOps** series of online courses. The successful completion of the courses and capstone project, that together make up the   **MPP for DevOps**, results in the granting of the **Microsoft MPP for DevOps** credential. For more information on the **Microsoft Professional Program (MPP) for DevOps** program see the pages <a href="https://academy.microsoft.com/en-us/professional-program/tracks/devops/ " target="_blank"><span style="color: #0066cc;" color="#0066cc">https://academy.microsoft.com/en-us/professional-program/tracks/devops/ </span></a> and <a href="https://www.edx.org/microsoft-professional-program-devops " target="_blank"><span style="color: #0066cc;" color="#0066cc">https://www.edx.org/microsoft-professional-program-devops</span></a> 



This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.


================================================
FILE: CONTRIBUTING.md
================================================
﻿# How to contribute

One of the easiest ways to contribute is to participate in discussions and discuss issues. You can also contribute by submitting pull requests with code changes.

## General feedback, discussions, bugs, feature requests?
Please start a discussion or log a new issue on the [Home repo issue tracker](https://github.com/Microsoft/PartsUnlimited/issues).

## Filing issues
When filing issues, please consider using this sample [bug filing template](https://github.com/aspnet/Home/wiki/Functional-bug-template) from the ASP.Net team.
The best way to get your bug fixed is to be as detailed as you can be about the problem.
Providing steps to reproduce the problem is ideal.
Here are questions you can answer before you file a bug to make sure you're not missing any important information.

1. Did you read the [documentation](https://github.com/Microsoft/PartsUnlimited/tree/master/docs)?
2. Did you include the snippet of broken code in the issue?
3. What are the *EXACT* steps to reproduce this problem?
4. What package versions are you using (you can see these in the `project.json` file)?
5. What operating system are you using?
6. What version of Visual Studio are you using?

GitHub supports [markdown](http://github.github.com/github-flavored-markdown/), so when filing bugs make sure you check the formatting before clicking submit.

## Contributing code and content
If you don't know what a pull request is read this article: https://help.github.com/articles/using-pull-requests.
You might also read these two blogs posts on contributing code: [Open Source Contribution Etiquette](http://tirania.org/blog/archive/2010/Dec-31.html) by Miguel de Icaza and [Don't "Push" Your Pull Requests](http://www.igvita.com/2011/12/19/dont-push-your-pull-requests/) by Ilya Grigorik.

**Commit/Pull Request Format**

```
Summary of the changes (Less than 80 chars)
 - Detail 1
 - Detail 2

#bugnumber (in this specific format)
```


This project has adopted the [Microsoft Open Source Code of
Conduct](https://opensource.microsoft.com/codeofconduct/).
For more information see the [Code of Conduct
FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or
contact [opencode@microsoft.com](mailto:opencode@microsoft.com)
with any additional questions or comments.



================================================
FILE: CreateVMBasic.PNG
================================================
[Binary file]


================================================
FILE: LICENSE
================================================
Parts Unlimited MRP
Copyright (c) Microsoft Corporation
All rights reserved. 
MIT License
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



================================================
FILE: SECURITY.md
================================================
<!-- BEGIN MICROSOFT SECURITY.MD V0.0.8 BLOCK -->

## Security

Microsoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).

If you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/opensource/security/definition), please report it to us as described below.

## Reporting Security Issues

**Please do not report security vulnerabilities through public GitHub issues.**

Instead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/opensource/security/create-report).

If you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/opensource/security/pgpkey).

You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://aka.ms/opensource/security/msrc). 

Please include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:

  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)
  * Full paths of source file(s) related to the manifestation of the issue
  * The location of the affected source code (tag/branch/commit or direct URL)
  * Any special configuration required to reproduce the issue
  * Step-by-step instructions to reproduce the issue
  * Proof-of-concept or exploit code (if possible)
  * Impact of the issue, including how an attacker might exploit the issue

This information will help us triage your report more quickly.

If you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/opensource/security/bounty) page for more details about our active programs.

## Preferred Languages

We prefer all communications to be in English.

## Policy

Microsoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/opensource/security/cvd).

<!-- END MICROSOFT SECURITY.MD BLOCK -->



================================================
FILE: .travis.yml
================================================
language: java
jdk: oraclejdk8
before_script:
  - chmod +x  $TRAVIS_BUILD_DIR/src/Backend/IntegrationService/gradlew
  - chmod +x  $TRAVIS_BUILD_DIR/src/Backend/OrderService/gradlew
  - chmod +x  $TRAVIS_BUILD_DIR/src/Clients/gradlew
script: 
  - cd  $TRAVIS_BUILD_DIR/src/Backend/IntegrationService
  - ./gradlew build
  - cd  $TRAVIS_BUILD_DIR/src/Backend/OrderService
  - ./gradlew build test
  - cd  $TRAVIS_BUILD_DIR/src/Clients
  - ./gradlew build


================================================
FILE: deploy/Build-MRP-App-Manually.md
================================================
#Build MRP App for Linux#
As part of the Continous Integration Hands-on Labs, you will be building the MRP application using Visual Studio Team Services.

In case you want to build the MRP app manually, you may use the following steps:

To be able to run through this walkthrough there is a dependency on Java 8 SDK and JRE8. These can be found at the link below:
http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html

There are steps below for Ubuntu and Debian package manager to install the JDK & JRE.

##Build the MRP Solution 
In order to build the MRP solution we will need to install some more dependencies. 
1.  To build the project, navigate to the OrderService folder with cmd/PowerShell console and initiate the build by calling the gradlew file with the parameter of the build.gradle file.

`PS> .\gradlew build`

Once run you can find the compiled jar file under the “build/libs” folder.

##Create a Linux VM 
Create a Linux VM in Azure and signin onto it.

## Install git client ##

On Ubuntu and the Debian package manager

```
sudo apt-get update
sudo apt-get install git
```

##Clone the repository##

From your home path or wherever you wish to store the bits:
```
git clone https://github.com/Microsoft/PartsUnlimitedMRP.git
```

##Install Dependencies
1.  With your `ssh` console now open we need to add the following dependencies:
 - Java 8 SDK
 - Java 8 JRE
 - MongoDB
2. Enter the following command to install the dependencies above. This is for Ubuntu 14.10+
```
sudo apt-get install openjdk-8-jdk openjdk-8-jre mongodb
```
For Ubuntu 14.04:
```
sudo add-apt-repository ppa:openjdk-r/ppa
sudo apt-get update
sudo apt-get install openjdk-8-jdk openjdk-8-jre mongodb
```
3.  To setup Java type the following commands to set your environment variables.
```
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export PATH=$PATH:/usr/lib/jvm/java-8-openjdk-amd64/bin
```
4.  To check your Java 8 installation, type “java -version”
NOTE: if you are still referencing an older version of Java that was installed as part of your machine you can update this using the following command:

`sudo update-alternatives --config java`
You will be presented with a list of Java installations. Type the number you wish to set as your java default.

##Setup MONGODB
1.  Open the mongo command line tools by typing the following command:
`/usr/bin/mongo`

2.  Select the ordering database to create it.
`> use ordering`

3. Add an object to the catalog collection
```
> x = {"skuNumber" : "ACC-001", "description" : "Shelving", "unit" : "meters", "unitPrice" : 10.5 }
> db.catalog.insert(x)
```
4.  Check the object was created 
`> db.catalog.find()`

you should see something like:
```
{ "_id" : ObjectId("5568a7aefa7a8f99400cbd1e"), "skuNumber" : "ACC-001", "description" : "Shelving", "unit" : "meters", "unitPrice" : 10.5 }

```

5. Now there is data in the database you can check it with the following command 
`> show dbs`
Which should show something similar to:
```
local   0.078125GB
ordering        0.203125GB
```

6.  Copy the commands from Appendix A to insert sample data into the database 


##Build Backend - `OrderService`##

1. Move from your home directory into the `src` directory (this assumes you used defaults during `git clone`) 
```
cd ~/PartsUnlimitedMRP/src/Backend/OrderService
```
2. Now, run the `./gradlew` shell script 
```
chmod +x gradlew
./gradlew build
```

This will pull down [gradle](http://gradle.org/) components then build the solution...

At this point you should see a message from `gradle` indicating success:
```
BUILD SUCCESSFUL
Total time: 3 mins 22.654 secs
```
Build output is located in:
```
cd ~/PartsUnlimitedMRP/src/Backend/OrderService/build/libs/
```
A single `JAR` file `ordering-service-0.1.0.jar`

##Build Backend - `IntegrationService`##
1. Move from your home directory into the `src` directory (this assumes you used defaults during `git clone`) 
```
cd ~/PartsUnlimitedMRP/src/Backend/IntegrationService
```
2. Now, run the `./gradlew` shell script
```
chmod +x gradlew
./gradlew build
```

This will pull down [gradle](http://gradle.org/) components and then build the solution...

At this point you should see a message from `gradle` indicating success:
```
BUILD SUCCESSFUL

Total time: 45.762 secs
```
Build output is located in:
```
cd ~/PartsUnlimitedMRP/src/Backend/IntegrationService/build/libs/
```
A single `JAR` file `integration-service-0.1.0.jar`



## Build Frontend - `Clients`##
The Web Front end is a static site that is built into a single WAR file.
1. Move from your home directory into the `src` directory (this assumes you used defaults during `git clone`) 
```
cd ~/PartsUnlimitedMRP/src/Clients
```
2. Now, run the `./gradlew` shell script
```
chmod +x gradlew
./gradlew build
```
This will pull down [gradle](http://gradle.org/) components and then build the solution...

At this point you should see a message from `gradle` indicating success:
```
BUILD SUCCESSFUL

Total time: 2..456 secs
```
Build output is located in:
```
cd ~/PartsUnlimitedMRP/src/Clients/build/libs/
```
A single `WAR` file `mrp.war`



================================================
FILE: deploy/deploy_mrp_app.sh
================================================
# Create deployment directory
sudo mkdir -p /var/lib/partsunlimited

# Kill java to stop current website
sudo pkill -9 'java'

# Remove old artifacts
sudo rm -f /var/lib/partsunlimited/MongoRecords.js*
sudo rm -f /var/lib/partsunlimited/mrp.war*
sudo rm -f /var/lib/partsunlimited/ordering-service-0.1.0.jar*

# Copy files from deployment package
sudo find ../ -iname '*.?ar' -exec cp -t /var/lib/partsunlimited {} +;
sudo find . -iname 'MongoRecords.js' -exec cp -t /var/lib/partsunlimited {} +;

# Add the records to ordering database on MongoDB
sudo mongo ordering /var/lib/partsunlimited/MongoRecords.js

# Change Tomcat listening port from 8080 to 9080
sudo sed -i s/8080/9080/g /etc/tomcat7/server.xml

# Remove existing MRP directory and copy WAR file to Tomcat directory for auto-deployment
sudo rm -rf /var/lib/tomcat7/webapps/mrp
sudo cp /var/lib/partsunlimited/mrp.war /var/lib/tomcat7/webapps

# Restart Tomcat
sudo /etc/init.d/tomcat7 restart

# Run Ordering Service app
sudo java -jar /var/lib/partsunlimited/ordering-service-0.1.0.jar &>/dev/null &

echo "MRP application successfully deployed. Go to http://<YourDNSname>:9080/mrp"


================================================
FILE: deploy/Install-Build-Dependencies.sh
================================================
# Update current packages
sudo apt-get update

# Install Gradle, Java, and MongoDB
sudo apt-get install gradle
sudo apt-get install openjdk-8-jdk openjdk-8-jre mongodb

# Install Node and npm
curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
sudo apt-get install -y nodejs
sudo apt-get install npm -y

# Set environment variables for Java
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export PATH=$PATH:/usr/lib/jvm/java-8-openjdk-amd64/bin


================================================
FILE: deploy/install_mrp_dependencies.sh
================================================
# Create deployment directory
sudo mkdir /var/lib/partsunlimited

# Kill java to stop current website
sudo pkill -9 'java'

# Remove old artifacts
sudo rm -f /var/lib/partsunlimited/MongoRecords.js*
sudo rm -f /var/lib/partsunlimited/mrp.war*
sudo rm -f /var/lib/partsunlimited/ordering-service-0.1.0.jar*

# Copy files from deployment package
sudo find ../ -iname '*.?ar' -exec cp -t /var/lib/partsunlimited {} +;
sudo find . -iname 'MongoRecords.js' -exec cp -t /var/lib/partsunlimited {} +;

# Add the records to ordering database on MongoDB
sudo mongo ordering /var/lib/partsunlimited/MongoRecords.js

# Change Tomcat listening port from 8080 to 9080
sudo sed -i s/8080/9080/g /etc/tomcat7/server.xml

# Remove existing MRP directory and copy WAR file to Tomcat directory for auto-deployment
sudo rm -rf /var/lib/tomcat7/webapps/mrp
sudo cp /var/lib/partsunlimited/mrp.war /var/lib/tomcat7/webapps

# Restart Tomcat
sudo /etc/init.d/tomcat7 restart

# Run Ordering Service app
sudo java -jar /var/lib/partsunlimited/ordering-service-0.1.0.jar &>/dev/null &

echo "MRP application successfully deployed. Go to http://<YourDNSname>:9080/mrp"


================================================
FILE: deploy/MongoRecords.js
================================================
var conn;
while (conn === undefined)
{
    try
    {
        conn = new Mongo("localhost:27017");
    }
    catch (e)
    {
        print(e);
    }

    sleep(100);
}

db = conn.getDB("ordering");
db.catalog.insert(
[
  {"skuNumber" : "LIG-0001", "description" : "Helogen Headlights (2 Pack)", "price" : 38.99, "inventory" : 10, "leadTime" : 3},
  {"skuNumber" : "LIG-0002", "description" : "Bugeye Headlights (2 Pack)", "price" : 48.99, "inventory" : 7, "leadTime" : 3},
  {"skuNumber" : "LIG-0003", "description" : "Turn Signal Light Bulb", "price" : 6.49, "inventory" : 18, "leadTime" : 3},
  {"skuNumber" : "WHE-0001", "description" : "Matte Finish Rim", "price" : 75.99, "inventory" : 4, "leadTime" : 5},
  {"skuNumber" : "WHE-0002", "description" : "Blue Performance Alloy Rim", "price" : 88.99, "inventory" : 8, "leadTime" : 5},
  {"skuNumber" : "WHE-0003", "description" : "High Performance Rim", "price" : 99.99, "inventory" : 3, "leadTime" : 5},
  {"skuNumber" : "WHE-0004", "description" : "Wheel Tire Combo", "price" : 72.49, "inventory" : 0, "leadTime" : 4},
  {"skuNumber" : "WHE-0005", "description" : "Chrome Rim Tire Combo", "price" : 129.99, "inventory" : 1, "leadTime" : 4},
  {"skuNumber" : "WHE-0006", "description" : "Wheel Tire Combo (4 Pack)", "price" : 219.99, "inventory" : 3, "leadTime" : 6},
  {"skuNumber" : "BRA-0001", "description" : "Disk and Pad Combo", "price" : 25.99, "inventory" : 0, "leadTime" : 6},
  {"skuNumber" : "BRA-0002", "description" : "Brake Rotor", "price" : 18.99, "inventory" : 4, "leadTime" : 4},
  {"skuNumber" : "BRA-0003", "description" : "Brake Disk and Calipers", "price" : 43.99, "inventory" : 2, "leadTime" : 8},
  {"skuNumber" : "BAT-0001", "description" : "12-Volt Calcium Battery", "price" : 129.99, "inventory" : 9, "leadTime" : 8},
  {"skuNumber" : "BAT-0002", "description" : "Spiral Coil Battery", "price" : 154.99, "inventory" : 3, "leadTime" : 10},
  {"skuNumber" : "BAT-0003", "description" : "Jumper Leads", "price" : 16.99, "inventory" : 6, "leadTime" : 3},
  {"skuNumber" : "OIL-0001", "description" : "Filter Set", "price" : 28.99, "inventory" : 3, "leadTime" : 4},
  {"skuNumber" : "OIL-0002", "description" : "Oil and Filter Combo", "price" : 34.49, "inventory" : 5, "leadTime" : 4},
  {"skuNumber" : "OIL-0003", "description" : "Synthetic Engine Oil", "price" : 39.99, "inventory" : 11, "leadTime" : 4}
])

db.dealers.insert({ "name" : "Terry Adams", "address" : "17760 Northeast 67th Court, Redmond, WA 98052", "email" : "terry@adams.com", "phone" : "425-885-6217" })

db.quotes.insert([{
"quoteId" : "0",
"validUntil" : "2015-05-01T00:00:00+0000",
"customerName" : "Walter Harp",
"dealerName" : "Terry Adams",
"city" : "Seattle",
"totalCost" : "51.97",
"discount" : "0.0",
"state" : "WA",
"postalCode" : "98023",
"quoteItems" : [
    {"skuNumber":"LIG-0001", "amount":1 },
    {"skuNumber":"LIG-0003", "amount":2 }]
},
{
"quoteId" : "1",
"validUntil" : "2015-01-01T00:00:00+0000",
"customerName" : "Jerry Morrison",
"dealerName" : "Terry Adams",
"city" : "Seattle",
"totalCost" : "25.99",
"state" : "WA",
"postalCode" : "98089",
"quoteItems" : [
  { "skuNumber" : "BRA-0001", "amount" : 1}
]
},
{
"quoteId" : "2",
"validUntil" : "2015-02-01T00:00:00+0000",
"customerName" : "Harrison Hall",
"dealerName" : "Terry Adams",
"city" : "Seattle",
"totalCost" : "600.90",
"discount" : "0.0",
"state" : "WA",
"postalCode" : "98027",
"quoteItems" : [
  { "skuNumber" : "WHE-0002", "amount" : 4},
  { "skuNumber" : "BRA-0003", "amount" : 4},
  { "skuNumber" : "OIL-0001", "amount" : 1},
  { "skuNumber" : "OIL-0001", "amount" : 1}
]
}
])

db.orders.insert([{
"orderId" : "0",
"quoteId" : "0",
"orderDate" : "2015-03-02T20:43:37+0000",
"status" : "Created",
"events" : []
},
{"orderId" : "1",
"quoteId" : "2",
"orderDate" : "2015-03-02T20:43:37+0000",
"status" : "DeliveryConfirmed",
"events" : []
}])

db.shipments.insert([{
"orderId" : "0",
"contactName" : "Walter Harp",
"primaryContactPhone" : {
  "phoneNumber" : "435-783-2378",
  "kind" : "Mobile"
},
"deliveryAddress" : {
  "street" : "34 Sheridan Street",
  "city" : "Seattle",
  "state" : "WA",
  "postalCode" : "98023",
  "specialInstructions" : ""
},
"events" : []
},
{
"orderId" : "2",
"contactName" : "Harrison Hall",
"primaryContactPhone" : {
  "phoneNumber" : "435-712-7234",
  "kind" : "Mobile"
},
"deliveryAddress" : {
  "street" : "84 Queen Street",
  "city" : "Seattle",
  "state" : "WA",
  "postalCode" : "98027",
  "specialInstructions" : "Leave around by the back door."
},
"events" : []
}])



================================================
FILE: deploy/SSH-MRP-Artifacts.ps1
================================================
[CmdletBinding()]
Param(
    [Parameter(Mandatory=$True)] [string] $sshTarget,
	[Parameter(Mandatory=$True)] [string] $sshUser,
    [Parameter(Mandatory=$True)] [string] $sshPassword
)

$ErrorActionPreference = "Stop"


# Get plink and psftp
$psftpExeUrl="https://the.earth.li/~sgtatham/putty/latest/x86/psftp.exe"
$plinkExeUrl="https://the.earth.li/~sgtatham/putty/latest/x86/plink.exe"

if (-not (Test-Path psftp.exe)) {
    wget $psftpExeUrl -OutFile psftp.exe
}
if (-not (Test-Path plink.exe)) {
    wget $plinkExeUrl -OutFile plink.exe
}

# Set deploy directory on target server
$deployDirectory = "/tmp/mrpdeploy_" + [System.Guid]::NewGuid().toString()
$buildName =  "_" + $($env:BUILD_DEFINITIONNAME)
# Save sftp command text to file
$sftpFile = "sftp.txt"
$sftpContent = @'
mkdir ROOT_DEPLOY_DIRECTORY
cd ROOT_DEPLOY_DIRECTORY
mkdir deploy
cd deploy
put ./ARTIFACT_DIRECTORY/deploy/MongoRecords.js
put ./ARTIFACT_DIRECTORY/deploy/deploy_mrp_app.sh
chmod 755 deploy_mrp_app.sh
cd ..
mkdir drop
cd drop
put -r ./ARTIFACT_DIRECTORY/drop/Backend/IntegrationService/build/libs/
put -r ./ARTIFACT_DIRECTORY/drop/Backend/OrderService/build/libs/
put -r ./ARTIFACT_DIRECTORY/drop/Clients/build/libs/
chmod 755 ./*
'@
$sftpContent = $sftpContent.Replace('ROOT_DEPLOY_DIRECTORY',$deployDirectory)
$sftpContent = $sftpContent.Replace('ARTIFACT_DIRECTORY',$buildName)
Set-Content -Path $sftpFile -Value $sftpContent


# Save plink command text to file
$plinkFile = "plink.txt"
$plinkContent = @'
cd ROOT_DEPLOY_DIRECTORY/deploy
dos2unix deploy_mrp_app.sh
sudo bash ./deploy_mrp_app.sh
'@
$plinkContent = $plinkContent.Replace('ROOT_DEPLOY_DIRECTORY',$deployDirectory)
Set-Content -Path $plinkFile -Value $plinkContent

# Copy files and execute MRP deployment shell script
echo n | & .\psftp.exe $sshUser@$sshTarget -pw $sshPassword -b $sftpFile 
echo n | & .\plink.exe $sshUser@$sshTarget -pw $sshPassword -m $plinkFile



================================================
FILE: deploy/SSH-MRP-BDD-Security.ps1
================================================
[CmdletBinding()]
Param(
    [Parameter(Mandatory=$True)] [string] $sshTarget,
	[Parameter(Mandatory=$True)] [string] $sshUser,
    [Parameter(Mandatory=$True)] [string] $sshPassword,
    [Parameter(Mandatory=$True)] [string] $sshKey
)

$ErrorActionPreference = "Stop"

# Get plink and pscp
$pscpExeUrl="https://the.earth.li/~sgtatham/putty/latest/x86/pscp.exe"
$plinkExeUrl="https://the.earth.li/~sgtatham/putty/latest/x86/plink.exe"

if (-not (Test-Path pscp.exe)) {
    wget $pscpExeUrl -OutFile pscp.exe
}
if (-not (Test-Path plink.exe)) {
    wget $plinkExeUrl -OutFile plink.exe
}

# Run tests
$plinkFile = "plink.txt"
$plinkContent = @'
cd bdd-security/
rm -rf build/reports/
rm -rf build/test-results/
./gradlew -Dcucumber.options="--tags @app_scan --tags ~@skip"
'@
Set-Content -Path $plinkFile -Value $plinkContent
& ./plink.exe $sshUser@$sshTarget -batch -hostkey $sshKey -pw $sshPassword -m $plinkFile

# Copy test results back to agent.
$currentExecutionLocation = (Get-Location).Path
& ./pscp.exe -batch -hostkey $sshKey -pw $sshPassword $sshUser@${sshTarget}:bdd-security/build/reports/junit/all_tests.xml `"$currentExecutionLocation`"



================================================
FILE: deploy/azurestack/readme.md
================================================
# What is Azure Stack?

Microsoft Azure Stack is a new hybrid cloud platform product that enables you to deliver Azure services from your own datacenter.

Azure Stack gives you the power of cloud services, yet enables IT to maintain control of your datacenter for true hybrid cloud agility. You decide where to keep your data and applications—in your own datacenter or with a hosting service provider. Easily access public cloud resources to scale at busy times, for dev-test, or whenever you need them.

## Deliver Azure services to your datacenter

Azure Stack enabled you to transform on-premises datacenter resources into cloud services for maximum agility. Run Azure IaaS services—including Virtual Machines, Blob/Table storage, and Docker-integrated Linux containers—for applications like SQL Server or SharePoint. Empower developers to write cloud-first applications using on-premises deployments of Azure PaaS services such as App Service. Make your application counterparts productive by enabling the same self-service experience as Azure.

You can learn more about Azure Stack on the dedicated [Azure Stack website](https://azure.microsoft.com/en-us/overview/azure-stack/) and see some cool videos on the [Azure Stack Channel on Channel 9](https://channel9.msdn.com/Blogs/azurestack)

It's also a great platform to learn about DevOps, and what better way to learn about DevOps, than through utilizing the Parts Unlimited MRP solution.

# Parts Unlimited MRP

Parts Unlimited MRP is a fictional outsourced Manufacturing Resource Planning (MRP) application for training purposes based on the description in chapters 31-35 of The Phoenix Projectby Gene Kim, Kevin Behr and George Spafford. © 2013 IT Revolution Press LLC, Portland, OR. Resemblance to “Project Unicorn” in the novel is intentional; resemblance to any real company is purely coincidental.

The application uses entirely open source software including Linux, Java, Apache, and MongoDB which creates a web front end, an order service, and an integration service. Click here for the related [Parts Unlimited Website application](http://github.com/microsoft/partsunlimited).

To read and learn more about this project, please visit the [documentation website](https://aka.ms/pumrplabs).

## Key Features
- Front end service - runs Apache Tomcat and talks to order service
- Order and Integration service - runs Java and calls MongoDB
- Integration service - present to integrate with Parts Unlimited Website
- Includes a Dockerfile and sample publishing profile to publish to a Docker container
- Includes Azure RM JSON templates and PowerShell automation scripts to easily build and provision your environment

This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.

# Getting Started with DevOps on Azure Stack

Just like for the Parts Unlimited MRP on Azure documentation, this detailed series of documents will walk you through various deployments and configurations, along with usage of a number of core DevOps tools such as Chef, Puppet, Jenkins and more, all on Azure Stack.

Interested? Head on over to the [getting started page](/deploy/azurestack/docs/readme.md) to start kicking the tires.



================================================
FILE: deploy/azurestack/customscripts/readme.md
================================================




================================================
FILE: deploy/azurestack/customscripts/install_updates.sh
================================================
#!/bin/bash
apt-get update
apt-get upgrade -y



================================================
FILE: deploy/azurestack/customscripts/chef/readme.md
================================================




================================================
FILE: deploy/azurestack/customscripts/chef/install_chef.sh
================================================
#!/bin/bash

# Validate input parameters
if [[ !("$#" -eq 3) ]]; 
    then echo "Parameters missing for Chef Server 12 configuration." >&2
    exit 1
fi

# Get parameters
chef_fqdn=$1
chef_user=$2
chef_password=$3

sudo hostname ${chef_fqdn}

# Download & Install Chef Server 12
cd ~
wget https://packages.chef.io/files/stable/chef-server/12.15.7/ubuntu/16.04/chef-server-core_12.15.7-1_amd64.deb
sudo dpkg -i chef-server-core_*.deb

# Start Configuration
sudo chef-server-ctl reconfigure

# Configure user and organization
sleep 5

# Create user
sudo chef-server-ctl user-create ${chef_user} ${chef_user} LabUser ${chef_user}@partsunlimited.local ${chef_password} --filename /home/${chef_user}/${chef_user}.pem

# Create organization
sudo chef-server-ctl org-create partsunlimited 'Parts Unlimited, Inc.' --association_user ${chef_user} --filename /home/${chef_user}/partsunlimited-validator.pem

# Add the management GUI
sudo chef-server-ctl install chef-manage
sudo chef-server-ctl reconfigure
sudo chef-manage-ctl reconfigure --accept-license

#Add reporting
sudo chef-server-ctl install opscode-reporting
sudo chef-server-ctl reconfigure
sudo opscode-reporting-ctl reconfigure --accept-license



================================================
FILE: deploy/azurestack/customscripts/jenkins/install_jenkins_1604.sh
================================================
#!/bin/bash

# Install Jenkins Dependencies
add-apt-repository ppa:openjdk-r/ppa
apt-get update
apt-get upgrade -y
apt-get install openjdk-7-jdk -y
apt-get install openjdk-7-jre -y
apt-get install wget -y

# Set Java environment variables
export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
export PATH=$PATH:/usr/lib/jvm/java-7-openjdk-amd64/bin

# Install Jenkins
wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -
sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
apt-get update
apt-get install jenkins -y



================================================
FILE: deploy/azurestack/customscripts/linux_extension/manifest.json
================================================
{
    "publisher":  "Microsoft.OSTCExtensions",
    "Type":  "LinuxDiagnostic",
    "Version":  "2.3.9009",
    "GuestArtifact":  {
                          "ExtensionHandlerFilePath":  "Microsoft.OSTCExtensions.LinuxDiagnostic_2.3.9009.zip",
                          "OsType":  "Linux",
                          "ComputeRole":  "N/A",
                          "VMScaleSetEnabled":  false,
                          "SupportsMultipleExtensions":  false
                      }
}



================================================
FILE: deploy/azurestack/customscripts/puppet/install_puppet_1604.sh
================================================
#!/bin/bash

# Update OS
apt-get update
# apt-get upgrade -y

# Validate input parameters
if [[ !("$#" -eq 2) ]]; 
    then echo "Parameters missing for puppet enterprise configuration." >&2
    exit 1
fi

# Get parameters
pe_version=$1
console_pw=$2

# Configure for Puppet Enterprise version
case $pe_version in
    2017.2.1)
        pe_url=https://pm.puppetlabs.com/puppet-enterprise/2017.2.1/puppet-enterprise-2017.2.1-ubuntu-16.04-amd64.tar.gz
        ;;
    *)
        pe_url=https://pm.puppetlabs.com/puppet-enterprise/2017.2.1/puppet-enterprise-2017.2.1-ubuntu-16.04-amd64.tar.gz
        ;;
esac

# Set up variables
pe_tar=${pe_url##*/}
pe_folder=${pe_tar%%.tar.gz}

# Get installation package
cd /tmp; wget -q ${pe_url}

# Unpack installation package
tar -xf ${pe_tar}
cd ${pe_folder}

# Create configuration file
sed '/console_admin_password/c \
   "console_admin_password":"'$console_pw'"' conf.d/pe.conf > conf.d/azure-pe.conf

# Start the installation
./puppet-enterprise-installer -c conf.d/azure-pe.conf
sudo ./puppet-enterprise-installer -c conf.d/azure-pe.conf

exit 0



================================================
FILE: deploy/azurestack/instances/chef_node/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/chef_node/AddChefNode.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminUsername": {
            "defaultValue": "localadmin",
            "minLength": 1,
            "type": "string",
            "metadata": {
                "description": "User name for the additional node."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Administrator password for the additional node."
            }
        },
        "dnsNameForPublicIP": {
            "minLength": 1,
            "type": "string",
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the MRP Virtual Machine."
            }
        }
    },
    "variables": {
        "imagePublisher": "Canonical",
        "imageOffer": "UbuntuServer",
        "imageSku": "16.04.3-LTS",
        "osDiskName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'osdisk'))]",
        "nicName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'Nic'))]",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'sa'))]",
        "storageType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "vhdStorageContainerName": "vhds",
        "nsgName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'NSG'))]",
        "vmSize": "Standard_A2",
        "vmName": "[toLower(parameters('dnsNameForPublicIP'))]",
        "existingVirtualNetworkName": "chefVNET",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('existingVirtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "[variables('storageType')]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('nsgName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "SSH port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "MRP",
                        "properties": {
                            "description": "MRP port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "9080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "OrderingSvc",
                        "properties": {
                            "description": "OrderingService port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1200,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[tolower(concat(parameters('dnsNameForPublicIP'), 'publicIP'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('dnsNameForPublicIP')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('existingVirtualNetworkName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nicName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', tolower(concat(parameters('dnsNameForPublicIP'), 'publicIP')))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', tolower(concat(parameters('dnsNameForPublicIP'), 'publicIP')))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('existingVirtualNetworkName'))]",
                "[variables('nsgName')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vmName')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[variables('imageSKU')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[variables('osDiskName')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('osDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxCustomScriptExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.5",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "commandToExecute": "ifconfig"
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('adminUsername')]",
                    "password": "[parameters('adminPassword')]"
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'),'/extensions/LinuxCustomScriptExtension')]"
            ]
        }
    ],
    "outputs": {}
}


================================================
FILE: deploy/azurestack/instances/chef_standalone/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/chef_standalone/Chef.ChefServer/Manifest.json
================================================
{   "$schema": "https://gallery.azure.com/schemas/2014-09-01/manifest.json#",
    "name": "ChefServer",
    "publisher": "Chef",
    "version": "1.0.0",
    "displayName": "ms-resource:displayName",
    "publisherDisplayName": "ms-resource:publisherDisplayName",
    "publisherLegalName": "ms-resource:publisherDisplayName",
    "summary": "ms-resource:summary",
    "longSummary": "ms-resource:longSummary",
    "description": "ms-resource:description",
    "longDescription": "ms-resource:description",
    "links": [
        { "displayName": "ms-resource:documentationLink", "uri": "https://www.chef.io/" },
        { "displayName": "ms-resource:documentationLink2", "uri": "https://docs.chef.io/" }
    ],
    "artifacts": [
        {
            "name": "ChefDeploy",
            "type": "Template",
            "path": "DeploymentTemplates\\ChefDeploy.json",
            "isDefault": true
        }
    ],
    "icons": {
        "small": "Icons\\Small.png",
        "medium": "Icons\\Medium.png",
        "large": "Icons\\Large.png",
        "wide": "Icons\\Wide.png",
        "hero": "Icons\\Hero.png"
    },
    "categories": [
      "Compute"
    ],
    "uiDefinition": {
        "path": "UIDefinition.json"
    }
}


================================================
FILE: deploy/azurestack/instances/chef_standalone/Chef.ChefServer/UIDefinition.json
================================================
{
    "$schema": "https://gallery.azure.com/schemas/2015-02-12/UIDefinition.json#",
    "createDefinition": {
        "createBlade": {
            "name": "DeployFromTemplateBlade",
            "extension": "HubsExtension"
        }
    }
}



================================================
FILE: deploy/azurestack/instances/chef_standalone/Chef.ChefServer/DeploymentTemplates/ChefDeploy.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "chefAdminUsername": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "User name for the Chef Server."
            },
            "defaultValue": "chefadmin"
        },
        "chefAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the Chef Server."
            }
        },
        "chefDnsNameForPublicIP": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the Chef Server."
            }
        }
    },
    "variables": {
        "chefImagePublisher": "Canonical",
        "chefImageOffer": "UbuntuServer",
        "chefImageSku": "16.04.3-LTS",
        "chefOSDiskName": "chefOsdisk",
        "chefNicName": "chefNic",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageName": "[concat('vhdstorage', uniqueString(resourceGroup().id))]",
        "storageType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "vhdStorageContainerName": "vhds",
        "chefNsgName": "chefNSG",
        "chefVmSize": "Standard_A3",
        "chefVmName": "[toLower(parameters('chefDnsNameForPublicIP'))]",
        "virtualNetworkName": "chefVNET",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "StorageAccount"
            },
            "properties": {
                "accountType": "[variables('storageType')]"
            }
        },
         {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('chefNsgName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NSG-chef"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "SSH port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "HTTP",
                        "properties": {
                            "description": "HTTP port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "80",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "HTTPS",
                        "properties": {
                            "description": "HTTPS port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1200,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "https8443",
                        "properties": {
                            "description": "https8443",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1300,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('chefDnsNameForPublicIP')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "PublicIPAddress-Chef"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('chefDnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VirtualNetwork"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
       
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('chefNicName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NIC-Chef"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('chefDnsNameForPublicIP'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('chefNSGName'))]"
            ],
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('chefNSGName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('chefDnsNameForPublicIP'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('chefVmName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VM-Chef"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('chefNicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('chefVmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('chefVmName')]",
                    "adminUsername": "[parameters('chefAdminUsername')]",
                    "adminPassword": "[parameters('chefAdminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('chefImagePublisher')]",
                        "offer": "[variables('chefImageOffer')]",
                        "sku": "[variables('chefImageSku')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('chefOSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('chefNicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('chefVmName'),'/CustomScriptForLinux')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('chefVmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": "true",

                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/azurestack/customscripts/chef/install_chef.sh"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('bash install_chef.sh ', concat(parameters('chefDnsNameForPublicIP'),'.',resourceGroup().location,'.cloudapp.azurestack.external'), ' ', parameters('chefAdminUsername'), ' ', parameters('chefAdminPassword'))]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('chefVmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('chefVmName'),'/extensions/CustomScriptForLinux')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('chefAdminUsername')]",
                    "password": "[parameters('chefAdminPassword')]"
                }
            }
        }
    ]
}



================================================
FILE: deploy/azurestack/instances/chef_standalone/Chef.ChefServer/strings/resources.resjson
================================================
{
  "displayName": "Chef Server",
  "publisherDisplayName": "Chef",
  "summary": "Chef Server 12 on Ubuntu 16.04-LTS VM, pre-configured and ready to run on Azure Stack",
  "longSummary": "Chef Server 12 on Ubuntu 16.04-LTS VM, pre-configured and ready to run on Azure Stack",
  "description": "<p>Whether you have five or five thousand servers, Chef lets you manage them all by turning infrastructure into code. Infrastructure described as code is flexible, versionable, human-readable, and testable.</p><p>Whether your infrastructure is in the cloud, on-premises or in a hybrid environment, you can easily and quickly adapt to your business’s changing needs with Chef</p><p>The Chef Server acts as a central repository for cookbooks as well as for information about every node it manages. Chef cookbooks contain code that describes the desired state of your infrastructure</p><p>For more information, review the links below.</p><p><b>Please Note</b> - This image is not officially provided by, or supported by Chef and is provided solely for use with the Parts Unlimited MRP Hands-on-Labs. All logos and images are property of Chef</p>",
  "documentationLink": "Chef",
  "documentationLink2": "Chef Documentation"
}


================================================
FILE: deploy/azurestack/instances/chef_workstation/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/chef_workstation/AddChefWorkstation.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminUsername": {
            "defaultValue": "localadmin",
            "type": "string",
            "minLength": 1,
            "metadata": {
            "description": "User name for the Chef Workstation Virtual Machine."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "minLength": 8,
            "metadata": {
            "description": "Password for the Chef Workstation Virtual Machine."
            }
        },
        "dnsNameForPublicIP": {
            "type": "string",
            "minLength": 1,
            "maxLength": 15,
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the Chef Workstation Virtual Machine."
            }
        }
    },
    "variables": {
        "imagePublisher": "MicrosoftWindowsServer",
        "imageOffer": "WindowsServer",
        "imageSku": "2012-R2-Datacenter",
        "osDiskName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'osdisk'))]",
        "nicName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'Nic'))]",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'sa'))]",
        "storageType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "vhdStorageContainerName": "vhds",
        "nsgName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'NSG'))]",
        "vmSize": "Standard_A2",
        "vmName": "[toLower(parameters('dnsNameForPublicIP'))]",
        "existingVirtualNetworkName": "chefVNET",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('existingVirtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "[variables('storageType')]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('nsgName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "RDP",
                        "properties": {
                            "description": "RDP port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "3389",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[tolower(concat(parameters('dnsNameForPublicIP'), 'publicIP'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('dnsNameForPublicIP')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('existingVirtualNetworkName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nicName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', tolower(concat(parameters('dnsNameForPublicIP'), 'publicIP')))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', tolower(concat(parameters('dnsNameForPublicIP'), 'publicIP')))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('existingVirtualNetworkName'))]",
                "[variables('nsgName')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vmName')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[variables('imageSKU')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[variables('osDiskName')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('osDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/chefworkstationconfig')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/docs/HOL_Deploying-Using-Chef/env/Configure-Chef-Workstation.ps1"
                    ],
                    "commandToExecute": "powershell -File Configure-Chef-Workstation.ps1"
                },
                "protectedSettings": {}
            }
        }
    ],
    "outputs": {}
}


================================================
FILE: deploy/azurestack/instances/jenkins_mrp/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/jenkins_mrp/PartsUnlimitedMRP.MRPwithJenkins/Manifest.json
================================================
{   "$schema": "https://gallery.azure.com/schemas/2014-09-01/manifest.json#",
    "name": "MRPwithJenkins",
    "publisher": "PartsUnlimitedMRP",
    "version": "1.0.0",
    "displayName": "ms-resource:displayName",
    "publisherDisplayName": "ms-resource:publisherDisplayName",
    "publisherLegalName": "ms-resource:publisherDisplayName",
    "summary": "ms-resource:summary",
    "longSummary": "ms-resource:longSummary",
    "description": "ms-resource:description",
    "longDescription": "ms-resource:description",
    "links": [
        { "displayName": "ms-resource:documentationLink", "uri": "https://jenkins.io/index.html" },
        { "displayName": "ms-resource:documentationLink2", "uri": "https://jenkins.io/doc/" },
        { "displayName": "ms-resource:documentationLink3", "uri": "https://microsoft.github.io/PartsUnlimitedMRP/" },
        { "displayName": "ms-resource:documentationLink4", "uri": "https://channel9.msdn.com/Series/Parts-Unlimited-MRP-Labs" }
    ],
    "artifacts": [
        {
            "name": "MRPwithJenkinsDeploy",
            "type": "Template",
            "path": "DeploymentTemplates\\MRPwithJenkinsDeploy.json",
            "isDefault": true
        }
    ],
    "icons": {
        "small": "Icons\\Small.png",
        "medium": "Icons\\Medium.png",
        "large": "Icons\\Large.png",
        "wide": "Icons\\Wide.png",
        "hero": "Icons\\Hero.png"
    },
    "categories": [
      "Compute"
    ],
    "uiDefinition": {
        "path": "UIDefinition.json"
    }
}


================================================
FILE: deploy/azurestack/instances/jenkins_mrp/PartsUnlimitedMRP.MRPwithJenkins/UIDefinition.json
================================================
{
    "$schema": "https://gallery.azure.com/schemas/2015-02-12/UIDefinition.json#",
    "createDefinition": {
        "createBlade": {
            "name": "DeployFromTemplateBlade",
            "extension": "HubsExtension"
        }
    }
}



================================================
FILE: deploy/azurestack/instances/jenkins_mrp/PartsUnlimitedMRP.MRPwithJenkins/DeploymentTemplates/MRPwithJenkinsDeploy.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "jenkinsAdminUsername": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "User name for the Jenkins Master Virtual Machine."
            },
            "defaultValue": "jenkinsadmin"
        },
        "jenkinsAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the Jenkins Master Virtual Machine."
            }
        },
        "jenkinsDnsNameForPublicIP": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the Jenkins Master Virtual Machine."
            }
        },
        "mrpAdminUsername": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "User name for the MRP Virtual Machine."
            },
            "defaultValue": "mrpadmin"
        },
        "mrpAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the MRP Virtual Machine."
            }
        },
        "mrpDnsNameForPublicIP": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the MRP Virtual Machine."
            }
        }
    },
    "variables": {
        "jenkinsImagePublisher": "Canonical",
        "jenkinsImageOffer": "UbuntuServer",
        "jenkinsImageSku": "1404-LTS",
        "mrpImagePublisher": "Canonical",
        "mrpImageOffer": "UbuntuServer",
        "mrpImageSku": "1404-LTS",
        "mrpOSDiskName": "mrpOsdisk",
        "jenkinsOSDiskName": "jenkinsMasterOsdisk",
        "jenkinsNicName": "jenkinsNic",
        "mrpNicName": "mrpNic",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "vhdStorageContainerName": "vhds",
        "jenkinsNsgName": "jenkinsNSG",
        "mrpNsgName": "mrpNSG",
        "jenkinsVmSize": "Standard_A3",
        "mrpVmSize": "Standard_A2",
        "jenkinsVmName": "[toLower(parameters('jenkinsDnsNameForPublicIP'))]",
        "mrpVmName": "[toLower(parameters('mrpDnsNameForPublicIP'))]",
        "virtualNetworkName": "jenkinsMRPvNET",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]",
        "storageName": "[concat('vhdstorage', uniqueString(resourceGroup().id))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "StorageAccount"
            },
            "properties": {
                "accountType": "[variables('storageType')]"
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('jenkinsDnsNameForPublicIP')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "PublicIPAddress-jenkins"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('jenkinsDnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('mrpDnsNameForPublicIP')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "PublicIPAddress-mrp"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('mrpDnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VirtualNetwork"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('jenkinsNsgName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NSG-jenkins"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "SSH port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "Jenkins",
                        "properties": {
                            "description": "Jenkins port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('mrpNsgName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NSG-mrp"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "SSH port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "MRP",
                        "properties": {
                            "description": "MRP port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "9080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "OrderingSvc",
                        "properties": {
                            "description": "OrderingService port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1200,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('jenkinsNicName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NIC-Jenkins"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('jenkinsDnsNameForPublicIP'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('jenkinsNSGName'))]"
            ],
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('jenkinsNSGName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('jenkinsDnsNameForPublicIP'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('mrpNicName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NIC-MRP"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('mrpDnsNameForPublicIP'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('mrpNSGName'))]"
            ],
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mrpNSGName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('mrpDnsNameForPublicIP'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('jenkinsVmName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VM-Jenkins"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('jenkinsNicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('jenkinsVmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('jenkinsVmName')]",
                    "adminUsername": "[parameters('jenkinsAdminUsername')]",
                    "adminPassword": "[parameters('jenkinsAdminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('jenkinsImagePublisher')]",
                        "offer": "[variables('jenkinsImageOffer')]",
                        "sku": "[variables('jenkinsImageSku')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('jenkinsOSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('jenkinsNicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('mrpVmName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VM-MRP"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('mrpNicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('mrpVmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('mrpVmName')]",
                    "adminUsername": "[parameters('mrpAdminUsername')]",
                    "adminPassword": "[parameters('mrpAdminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('mrpImagePublisher')]",
                        "offer": "[variables('mrpImageOffer')]",
                        "sku": "[variables('mrpImageSku')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('mrpOSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('mrpNicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('mrpVmName'),'/mrpsetup')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('mrpVmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/azurestack/customscripts/install_updates.sh"
                    ],
                    "commandToExecute": "bash install_updates.sh"
                },
                "protectedSettings": {}
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('mrpVmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('mrpVmName'),'/extensions/mrpsetup')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('mrpAdminUsername')]",
                    "password": "[parameters('mrpAdminPassword')]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('jenkinsVmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('jenkinsVmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('jenkinsAdminUsername')]",
                    "password": "[parameters('jenkinsAdminPassword')]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('jenkinsVmName'),'/jenkinsinstall')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('jenkinsVmName'),'/extensions/LinuxVMAccessExtension')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/azurestack/customscripts/jenkins/install_jenkins_1404.sh"
                    ],
                    "commandToExecute": "bash install_jenkins_1404.sh"
                },
                "protectedSettings": {}
            }
        }
    ],
    "outputs": {}
}


================================================
FILE: deploy/azurestack/instances/jenkins_mrp/PartsUnlimitedMRP.MRPwithJenkins/strings/resources.resjson
================================================
{
  "displayName": "Parts Unlimited MRP with Jenkins",
  "publisherDisplayName": "Parts Unlimited MRP",
  "summary": "Parts Unlimited MRP and Jenkins on Ubuntu 14.04-LTS VMs for use with DevOps Hands-on-Labs.",
  "longSummary": "Parts Unlimited MRP and Jenkins on Ubuntu 14.04-LTS VMs for use with DevOps Hands-on-Labs.",
  "description": "<p>Jenkins is a leading open source automation server. Jenkins provides hundreds of plugins to support building, deploying and automating any project.</p><p>This VM contains the latest version of Jenkins, along with the MRP VM, both running on Ubuntu 14.04-LTS, configured as a single deployment, and will allow you to get started learning and understanding how to use Jenkins to deploy the Parts Unlimited MRP app.</p><p>For more information, review the links below.</p>",
  "documentationLink": "Jenkins Homepage",
  "documentationLink2": "Jenkins Documentation",
  "documentationLink3": "Parts Unlimited MRP Documentation",
  "documentationLink4": "Parts Unlimited MRP Channel 9 Videos"
}



================================================
FILE: deploy/azurestack/instances/jenkins_standalone/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/jenkins_standalone/TheJenkinsProject.Jenkins/Manifest.json
================================================
{   "$schema": "https://gallery.azure.com/schemas/2014-09-01/manifest.json#",
    "name": "Jenkins",
    "publisher": "TheJenkinsProject",
    "version": "1.0.0",
    "displayName": "ms-resource:displayName",
    "publisherDisplayName": "ms-resource:publisherDisplayName",
    "publisherLegalName": "ms-resource:publisherDisplayName",
    "summary": "ms-resource:summary",
    "longSummary": "ms-resource:longSummary",
    "description": "ms-resource:description",
    "longDescription": "ms-resource:description",
    "links": [
        { "displayName": "ms-resource:documentationLink", "uri": "https://jenkins.io/index.html" },
        { "displayName": "ms-resource:documentationLink2", "uri": "https://jenkins.io/doc/" }
    ],
    "artifacts": [
        {
            "name": "JenkinsDeploy",
            "type": "Template",
            "path": "DeploymentTemplates\\JenkinsDeploy.json",
            "isDefault": true
        }
    ],
    "icons": {
        "small": "Icons\\Small.png",
        "medium": "Icons\\Medium.png",
        "large": "Icons\\Large.png",
        "wide": "Icons\\Wide.png",
        "hero": "Icons\\Hero.png"
    },
    "categories": [
      "Compute"
    ],
    "uiDefinition": {
        "path": "UIDefinition.json"
    }
}


================================================
FILE: deploy/azurestack/instances/jenkins_standalone/TheJenkinsProject.Jenkins/UIDefinition.json
================================================
{
    "$schema": "https://gallery.azure.com/schemas/2015-02-12/UIDefinition.json#",
    "createDefinition": {
        "createBlade": {
            "name": "DeployFromTemplateBlade",
            "extension": "HubsExtension"
        }
    }
}



================================================
FILE: deploy/azurestack/instances/jenkins_standalone/TheJenkinsProject.Jenkins/DeploymentTemplates/JenkinsDeploy.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "jenkinsAdminUsername": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "User name for the Jenkins Master Virtual Machine."
            },
            "defaultValue": "jenkinsadmin"
        },
        "jenkinsAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the Jenkins Master Virtual Machine."
            }
        },
        "jenkinsDnsNameForPublicIP": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the Jenkins Master Virtual Machine."
            }
        }
    },
    "variables": {
        "jenkinsImagePublisher": "Canonical",
        "jenkinsImageOffer": "UbuntuServer",
        "jenkinsImageSku": "16.04.3-LTS",
        "jenkinsOSDiskName": "jenkinsOsdisk",
        "jenkinsNicName": "jenkinsNic",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageName": "[concat('vhdstorage', uniqueString(resourceGroup().id))]",
        "storageType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "vhdStorageContainerName": "vhds",
        "jenkinsNsgName": "jenkinsNSG",
        "jenkinsVmSize": "Standard_A3",
        "jenkinsVmName": "[toLower(parameters('jenkinsDnsNameForPublicIP'))]",
        "virtualNetworkName": "jenkinsVNET",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "StorageAccount"
            },
            "properties": {
                "accountType": "[variables('storageType')]"
            }
        },
         {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('jenkinsNsgName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NSG-Jenkins"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "SSH port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "Jenkins",
                        "properties": {
                            "description": "Jenkins port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('jenkinsDnsNameForPublicIP')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "PublicIPAddress-Jenkins"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('jenkinsDnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VirtualNetwork"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
       
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('jenkinsNicName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NIC-Jenkins"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('jenkinsDnsNameForPublicIP'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('jenkinsNSGName'))]"
            ],
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('jenkinsNSGName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('jenkinsDnsNameForPublicIP'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('jenkinsVmName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VM-Jenkins"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('jenkinsNicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('jenkinsVmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('jenkinsVmName')]",
                    "adminUsername": "[parameters('jenkinsAdminUsername')]",
                    "adminPassword": "[parameters('jenkinsAdminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('jenkinsImagePublisher')]",
                        "offer": "[variables('jenkinsImageOffer')]",
                        "sku": "[variables('jenkinsImageSku')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('jenkinsOSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('jenkinsNicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('jenkinsVmName'),'/CustomScriptForLinux')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('jenkinsVmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/azurestack/customscripts/jenkins/install_jenkins_1604.sh"
                    ],
                    "commandToExecute": "bash install_jenkins_1604.sh"
                },
                "protectedSettings": {}
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('jenkinsVmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('jenkinsVmName'),'/extensions/CustomScriptForLinux')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('jenkinsAdminUsername')]",
                    "password": "[parameters('jenkinsAdminPassword')]"
                }
            }
        }
    ],
    "outputs": {}
}



================================================
FILE: deploy/azurestack/instances/jenkins_standalone/TheJenkinsProject.Jenkins/strings/resources.resjson
================================================
{
  "displayName": "Jenkins",
  "publisherDisplayName": "The Jenkins Project",
  "summary": "Jenkins on Ubuntu 16.04-LTS VM, pre-configured and ready to run on Azure Stack",
  "longSummary": "Jenkins on Ubuntu 16.04-LTS VM, pre-configured and ready to run on Azure Stack",
  "description": "<p>The leading open source automation server, Jenkins provides hundreds of plugins to support building, deploying and automating any project.</p><p>This VM contains the latest version of Jenkins, running on Ubuntu 16.04-LTS, configured as a single, standalone installation and will allow you to get started learning and understanding key Jenkins tasks.</p><p>For more information, review the links below.</p><p><b>Please Note</b> - This image is not officially provided by, or supported by Cloudbees or the Jenkins Community and is provided solely for use with the Parts Unlimited MRP Hands-on-Labs.</p>",
  "documentationLink": "The Jenkins Project",
  "documentationLink2": "Jenkins Documentation"
}



================================================
FILE: deploy/azurestack/instances/parts_unlimited_mrp_base/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/parts_unlimited_mrp_base/install_mrp_dependencies_1604.sh
================================================
#!/bin/bash

# Install PartsUnlimitedMRP dependencies
apt-get update
apt-get upgrade -y
add-apt-repository ppa:openjdk-r/ppa -y
apt-get update
apt-get install openjdk-8-jdk -y
apt-get install openjdk-8-jre -y
apt-get install mongodb -y
apt-get install tomcat7 -y
apt-get install wget -y

# Set Java environment variables
sed -i '$ a JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64' /etc/default/tomcat7
export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export PATH=$PATH:/usr/lib/jvm/java-8-openjdk-amd64/bin

# Restart tomcat7
service tomcat7 restart



================================================
FILE: deploy/azurestack/instances/parts_unlimited_mrp_base/PartsUnlimited.Ubuntu1604/Manifest.json
================================================
{   "$schema": "https://gallery.azure.com/schemas/2014-09-01/manifest.json#",
    "name": "MRP",
    "publisher": "PartsUnlimited",
    "version": "1.0.0",
    "displayName": "ms-resource:displayName",
    "publisherDisplayName": "ms-resource:publisherDisplayName",
    "publisherLegalName": "ms-resource:publisherDisplayName",
    "summary": "ms-resource:summary",
    "longSummary": "ms-resource:longSummary",
    "description": "ms-resource:description",
    "longDescription": "ms-resource:description",
    "links": [
        { "displayName": "ms-resource:documentationLink", "uri": "https://microsoft.github.io/PartsUnlimitedMRP/" },
        { "displayName": "ms-resource:documentationLink2", "uri": "https://channel9.msdn.com/Series/Parts-Unlimited-MRP-Labs" }
    ],
    "artifacts": [
        {
            "name": "PartsUnlimitedMRP",
            "type": "Template",
            "path": "DeploymentTemplates\\PartsUnlimitedMRP.json",
            "isDefault": true
        }
    ],
    "icons": {
        "small": "Icons\\Small.png",
        "medium": "Icons\\Medium.png",
        "large": "Icons\\Large.png",
        "wide": "Icons\\Wide.png",
        "hero": "Icons\\Hero.png"
    },
    "categories": [
      "Compute"
    ],
    "uiDefinition": {
        "path": "UIDefinition.json"
    }
}


================================================
FILE: deploy/azurestack/instances/parts_unlimited_mrp_base/PartsUnlimited.Ubuntu1604/UIDefinition.json
================================================
{
    "$schema": "https://gallery.azure.com/schemas/2015-02-12/UIDefinition.json#",
    "createDefinition": {
        "createBlade": {
            "name": "DeployFromTemplateBlade",
            "extension": "HubsExtension"
        }
    }
}



================================================
FILE: deploy/azurestack/instances/parts_unlimited_mrp_base/PartsUnlimited.Ubuntu1604/DeploymentTemplates/PartsUnlimitedMRP.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "mrpAdminUsername": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "User name for the MRP Virtual Machine."
            },
            "defaultValue": "mrpadmin"
        },
        "mrpAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Administrator password for the MRP Virtual Machine."
            }
        },
        "mrpDnsNameForPublicIP": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the MRP Virtual Machine."
            }
        }
    },
    "variables": {
        "mrpImagePublisher": "Canonical",
        "mrpImageOffer": "UbuntuServer",
        "mrpImageSku": "16.04.3-LTS",
        "mrpOSDiskName": "mrpOsdisk",
        "mrpNicName": "mrpNic",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageName": "[concat('vhdstorage', uniqueString(resourceGroup().id))]",
        "storageType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "vhdStorageContainerName": "vhds",
        "mrpNsgName": "mrpNSG",
        "mrpVmSize": "Standard_A2",
        "mrpVmName": "[toLower(parameters('mrpDnsNameForPublicIP'))]",
        "virtualNetworkName": "mrpVNET",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "[variables('storageType')]"
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('mrpNsgName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "SSH port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "MRP",
                        "properties": {
                            "description": "MRP port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "9080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "OrderingSvc",
                        "properties": {
                            "description": "OrderingService port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1200,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('mrpDnsNameForPublicIP')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('mrpDnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('mrpNicName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('mrpDnsNameForPublicIP'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[variables('mrpNsgName')]"
            ],
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mrpNsgName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',parameters('mrpDnsNameForPublicIP'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('mrpVmName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('mrpNicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('mrpVmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('mrpVmName')]",
                    "adminUsername": "[parameters('mrpAdminUsername')]",
                    "adminPassword": "[parameters('mrpAdminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('mrpImagePublisher')]",
                        "offer": "[variables('mrpImageOffer')]",
                        "sku": "[variables('mrpImageSKU')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat(resourceGroup().name, 'osdisk')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('mrpOSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('mrpNicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('mrpVmName'),'/LinuxCustomScriptExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('mrpVmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/azurestack/customscripts/install_updates.sh"
                    ],
                    "commandToExecute": "bash install_updates.sh"
                },
                "protectedSettings": {}
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('mrpVmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('mrpVmName'),'/extensions/LinuxCustomScriptExtension')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('mrpAdminUsername')]",
                    "password": "[parameters('mrpAdminPassword')]"
                }
            }
        }
    ],
    "outputs": {}
}


================================================
FILE: deploy/azurestack/instances/parts_unlimited_mrp_base/PartsUnlimited.Ubuntu1604/strings/resources.resjson
================================================
﻿{
  "displayName": "Parts Unlimited MRP",
  "publisherDisplayName": "Parts Unlimited",
  "summary": "Parts Unlimited MRP Virtual Machine for use with DevOps Hands-on-Labs.",
  "longSummary": "Parts Unlimited MRP Virtual Machine for use with DevOps Hands-on-Labs.",
  "description": "<p>Parts Unlimited MRP is a fictional outsourced Manufacturing Resource Planning (MRP) application for training purposes based on the description in chapters 31-35 of The Phoenix Projectby Gene Kim, Kevin Behr and George Spafford. © 2013 IT Revolution Press LLC, Portland, OR. Resemblance to “Project Unicorn” in the novel is intentional; resemblance to any real company is purely coincidental. </p><p>The application uses entirely open source software including Linux, Java, Apache, and MongoDB which creates a web front end, an order service, and an integration service</p><p>For more information, review the links below.",
  "documentationLink": "Documentation",
  "documentationLink2": "Channel 9 Videos"
}


================================================
FILE: deploy/azurestack/instances/parts_unlimited_SSH_mrp_base/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/parts_unlimited_SSH_mrp_base/PartsUnlimitedSSH.Ubuntu1604/Manifest.json
================================================
{   "$schema": "https://gallery.azure.com/schemas/2014-09-01/manifest.json#",
    "name": "MRPSSH",
    "publisher": "PartsUnlimited",
    "version": "1.0.0",
    "displayName": "ms-resource:displayName",
    "publisherDisplayName": "ms-resource:publisherDisplayName",
    "publisherLegalName": "ms-resource:publisherDisplayName",
    "summary": "ms-resource:summary",
    "longSummary": "ms-resource:longSummary",
    "description": "ms-resource:description",
    "longDescription": "ms-resource:description",
    "links": [
        { "displayName": "ms-resource:documentationLink", "uri": "https://microsoft.github.io/PartsUnlimitedMRP/" },
        { "displayName": "ms-resource:documentationLink2", "uri": "https://channel9.msdn.com/Series/Parts-Unlimited-MRP-Labs" }
    ],
    "artifacts": [
        {
            "name": "PartsUnlimitedSSHMRP",
            "type": "Template",
            "path": "DeploymentTemplates\\PartsUnlimitedSSHMRP.json",
            "isDefault": true
        }
    ],
    "icons": {
        "small": "Icons\\Small.png",
        "medium": "Icons\\Medium.png",
        "large": "Icons\\Large.png",
        "wide": "Icons\\Wide.png",
        "hero": "Icons\\Hero.png"
    },
    "categories": [
      "Compute"
    ],
    "uiDefinition": {
        "path": "UIDefinition.json"
    }
}


================================================
FILE: deploy/azurestack/instances/parts_unlimited_SSH_mrp_base/PartsUnlimitedSSH.Ubuntu1604/UIDefinition.json
================================================
{
    "$schema": "https://gallery.azure.com/schemas/2015-02-12/UIDefinition.json#",
    "createDefinition": {
        "createBlade": {
            "name": "DeployFromTemplateBlade",
            "extension": "HubsExtension"
        }
    }
}



================================================
FILE: deploy/azurestack/instances/parts_unlimited_SSH_mrp_base/PartsUnlimitedSSH.Ubuntu1604/DeploymentTemplates/PartsUnlimitedSSHMRP.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "mrpAdminUsername": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "User name for the MRP Virtual Machine."
            },
            "defaultValue": "mrpadmin"
        },
        "adminPublicKey": {
            "type": "string",
            "metadata": {
                "description": "SSH rsa public key file as a string"
            }
        },
        "mrpDnsNameForPublicIP": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the MRP Virtual Machine."
            }
        }
    },
    "variables": {
        "mrpImagePublisher": "Canonical",
        "mrpImageOffer": "UbuntuServer",
        "mrpImageSku": "16.04.3-LTS",
        "mrpOSDiskName": "mrpOsdisk",
        "mrpNicName": "mrpNic",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageName": "[concat('vhdstorage', uniqueString(resourceGroup().id))]",
        "storageType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "vhdStorageContainerName": "vhds",
        "mrpNsgName": "mrpNSG",
        "mrpVmSize": "Standard_A2",
        "mrpVmName": "[toLower(parameters('mrpDnsNameForPublicIP'))]",
        "sshKeyPath": "[concat('/home/',parameters('mrpAdminUsername'),'/.ssh/authorized_keys')]",
        "virtualNetworkName": "mrpVNET",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "StorageAccount"
            },
            "properties": {
                "accountType": "[variables('storageType')]"
            }
        },
         {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('mrpNsgName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NSG-mrp"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "SSH port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "MRP",
                        "properties": {
                            "description": "MRP port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "9080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "OrderingSvc",
                        "properties": {
                            "description": "OrderingService port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1200,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('mrpDnsNameForPublicIP')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "PublicIPAddress-mrp"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('mrpDnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VirtualNetwork"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
       
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('mrpNicName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NIC-mrp"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('mrpDnsNameForPublicIP'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('mrpNSGName'))]"
            ],
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('mrpNSGName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('mrpDnsNameForPublicIP'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('mrpVmName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VM-mrp"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('mrpNicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('mrpVmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('mrpVmName')]",
                    "adminUsername": "[parameters('mrpAdminUsername')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": "true",
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[variables('sshKeyPath')]",
                                    "keyData": "[parameters('adminPublicKey')]"
                                }
                            ]
                        }
                    }
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('mrpImagePublisher')]",
                        "offer": "[variables('mrpImageOffer')]",
                        "sku": "[variables('mrpImageSku')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('mrpOSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('mrpNicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('mrpVmName'),'/mrpsetup')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('mrpVmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/azurestack/instances/parts_unlimited_mrp_base/install_mrp_dependencies_1604.sh"
                    ],
                    "commandToExecute": "bash install_mrp_dependencies_1604.sh"
                },
                "protectedSettings": {}
            }
        }
    ],
    "outputs": {}
}



================================================
FILE: deploy/azurestack/instances/parts_unlimited_SSH_mrp_base/PartsUnlimitedSSH.Ubuntu1604/strings/resources.resjson
================================================
﻿{
  "displayName": "Parts Unlimited MRP with SSH",
  "publisherDisplayName": "Parts Unlimited",
  "summary": "Parts Unlimited MRP Virtual Machine with SSH for use with DevOps Hands-on-Labs.",
  "longSummary": "Parts Unlimited MRP Virtual Machine with SSH for use with DevOps Hands-on-Labs.",
  "description": "<p>Parts Unlimited MRP is a fictional outsourced Manufacturing Resource Planning (MRP) application for training purposes based on the description in chapters 31-35 of The Phoenix Projectby Gene Kim, Kevin Behr and George Spafford. © 2013 IT Revolution Press LLC, Portland, OR. Resemblance to “Project Unicorn” in the novel is intentional; resemblance to any real company is purely coincidental. </p><p>The application uses entirely open source software including Linux, Java, Apache, and MongoDB which creates a web front end, an order service, and an integration service</p><p>For more information, review the links below.",
  "documentationLink": "Documentation",
  "documentationLink2": "Channel 9 Videos"
}


================================================
FILE: deploy/azurestack/instances/puppet_node/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/puppet_node/AddPuppetNode.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminUsername": {
            "defaultValue": "localadmin",
            "minLength": 1,
            "type": "string",
            "metadata": {
                "description": "User name for the additional node."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Administrator password for the additional node."
            }
        },
        "dnsNameForPublicIP": {
            "minLength": 1,
            "type": "string",
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the MRP Virtual Machine."
            }
        }
    },
    "variables": {
        "imagePublisher": "Canonical",
        "imageOffer": "UbuntuServer",
        "imageSku": "16.04.3-LTS",
        "osDiskName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'osdisk'))]",
        "nicName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'Nic'))]",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'sa'))]",
        "storageType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "vhdStorageContainerName": "vhds",
        "nsgName": "[tolower(concat(parameters('dnsNameForPublicIP'), 'NSG'))]",
        "vmSize": "Standard_A2",
        "vmName": "[toLower(parameters('dnsNameForPublicIP'))]",
        "existingVirtualNetworkName": "puppetVNET",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('existingVirtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "accountType": "[variables('storageType')]"
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('nsgName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "SSH port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "MRP",
                        "properties": {
                            "description": "MRP port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "9080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "OrderingSvc",
                        "properties": {
                            "description": "OrderingService port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8080",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1200,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[tolower(concat(parameters('dnsNameForPublicIP'), 'publicIP'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('dnsNameForPublicIP')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('existingVirtualNetworkName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nicName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', tolower(concat(parameters('dnsNameForPublicIP'), 'publicIP')))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', tolower(concat(parameters('dnsNameForPublicIP'), 'publicIP')))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('existingVirtualNetworkName'))]",
                "[variables('nsgName')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vmName')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[variables('imageSKU')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[variables('osDiskName')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('osDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxCustomScriptExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.5",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "commandToExecute": "ifconfig"
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('adminUsername')]",
                    "password": "[parameters('adminPassword')]"
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'),'/extensions/LinuxCustomScriptExtension')]"
            ]
        }
    ],
    "outputs": {}
}


================================================
FILE: deploy/azurestack/instances/puppet_standalone/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/puppet_standalone/Puppet.PuppetEnterprise/Manifest.json
================================================
{   "$schema": "https://gallery.azure.com/schemas/2014-09-01/manifest.json#",
    "name": "PuppetEnterprise",
    "publisher": "Puppet",
    "version": "1.0.0",
    "displayName": "ms-resource:displayName",
    "publisherDisplayName": "ms-resource:publisherDisplayName",
    "publisherLegalName": "ms-resource:publisherDisplayName",
    "summary": "ms-resource:summary",
    "longSummary": "ms-resource:longSummary",
    "description": "ms-resource:description",
    "longDescription": "ms-resource:description",
    "links": [
        { "displayName": "ms-resource:documentationLink", "uri": "https://puppet.com/" },
        { "displayName": "ms-resource:documentationLink2", "uri": "https://docs.puppet.com/puppet/" }
    ],
    "artifacts": [
        {
            "name": "PuppetDeploy",
            "type": "Template",
            "path": "DeploymentTemplates\\PuppetDeploy.json",
            "isDefault": true
        }
    ],
    "icons": {
        "small": "Icons\\Small.png",
        "medium": "Icons\\Medium.png",
        "large": "Icons\\Large.png",
        "wide": "Icons\\Wide.png",
        "hero": "Icons\\Hero.png"
    },
    "categories": [
      "Compute"
    ],
    "uiDefinition": {
        "path": "UIDefinition.json"
    }
}


================================================
FILE: deploy/azurestack/instances/puppet_standalone/Puppet.PuppetEnterprise/UIDefinition.json
================================================
{
    "$schema": "https://gallery.azure.com/schemas/2015-02-12/UIDefinition.json#",
    "createDefinition": {
        "createBlade": {
            "name": "DeployFromTemplateBlade",
            "extension": "HubsExtension"
        }
    }
}



================================================
FILE: deploy/azurestack/instances/puppet_standalone/Puppet.PuppetEnterprise/DeploymentTemplates/PuppetDeploy.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "pmAdminUsername": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "User name for the Puppet Master Virtual Machine."
            },
            "defaultValue": "puppetadmin"
        },
        "pmAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for the Puppet Master Virtual Machine."
            }
        },
        "pmDnsNameForPublicIP": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Globally unique DNS Name for the Public IP used to access the Puppet Master Virtual Machine."
            }
        },
        "pmConsolePassword": {
            "type": "securestring",
            "metadata": {
            "description": "Password for the Puppet Master console admin account."
            }
        }
    },
    "variables": {
        "pmImagePublisher": "Canonical",
        "pmImageOffer": "UbuntuServer",
        "pmImageSku": "16.04.3-LTS",
        "pmVersion": "2017.2.1",
        "pmOSDiskName": "puppetOsdisk",
        "pmNicName": "puppetNic",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageName": "[concat('vhdstorage', uniqueString(resourceGroup().id))]",
        "storageType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "vhdStorageContainerName": "vhds",
        "pmNsgName": "pmNSG",
        "pmVmSize": "Standard_A3",
        "pmVmName": "[toLower(parameters('pmDnsNameForPublicIP'))]",
        "virtualNetworkName": "puppetVNET",
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "StorageAccount"
            },
            "properties": {
                "accountType": "[variables('storageType')]"
            }
        },
         {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('pmNsgName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NSG-Puppet"
            },
            "properties": {
                "securityRules": [
                    {
                        "name": "SSH",
                        "properties": {
                            "description": "SSH port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1000,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "HTTPS",
                        "properties": {
                            "description": "HTTPS port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "443",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1100,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "Puppet",
                        "properties": {
                            "description": "Puppet port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "8140",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1200,
                            "direction": "Inbound"
                        }
                    },
                        {
                        "name": "MCollective",
                        "properties": {
                            "description": "MCollective port",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "61613",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 1300,
                            "direction": "Inbound"
                            }
                        }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[parameters('pmDnsNameForPublicIP')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "PublicIPAddress-Puppet"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('pmDnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VirtualNetwork"
            },
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
       
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('pmNicName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "NIC-Puppet"
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', parameters('pmDnsNameForPublicIP'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('pmNSGName'))]"
            ],
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('pmNSGName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('pmDnsNameForPublicIP'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('pmVmName')]",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "VM-Puppet"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('pmNicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('pmVmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('pmVmName')]",
                    "adminUsername": "[parameters('pmAdminUsername')]",
                    "adminPassword": "[parameters('pmAdminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('pmImagePublisher')]",
                        "offer": "[variables('pmImageOffer')]",
                        "sku": "[variables('pmImageSku')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vhdStorageContainerName'),'/',variables('pmOSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('pmNicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('pmVmName'),'/CustomScriptForLinux')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('pmVmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": "true",

                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/azurestack/customscripts/puppet/install_puppet_1604.sh"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('bash install_puppet_1604.sh ', variables('pmVersion'), ' ', parameters('pmConsolePassword'))]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('pmVmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('pmVmName'),'/extensions/CustomScriptForLinux')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('pmAdminUsername')]",
                    "password": "[parameters('pmAdminPassword')]"
                }
            }
        }
    ]
}



================================================
FILE: deploy/azurestack/instances/puppet_standalone/Puppet.PuppetEnterprise/strings/resources.resjson
================================================
{
  "displayName": "Puppet Enterprise",
  "publisherDisplayName": "Puppet",
  "summary": "Puppet Enterprise on Ubuntu 16.04-LTS VM, pre-configured and ready to run on Azure Stack",
  "longSummary": "Puppet Enterprise on Ubuntu 16.04-LTS VM, pre-configured and ready to run on Azure Stack",
  "description": "<p>Puppet Enterprise lets you automate the entire lifecycle of your Azure infrastructure, simply, scalably, and securely, from initial provisioning through application deployment.</p><p>After you set up your Puppet Master, you can start automating common tasks, such as provisioning VMs, deploying an IIS site, and configuring a SQL server database.</p><p>For more information, review the links below.</p><p><b>Please Note</b> - This image is not officially provided by, or supported by Puppet and is provided solely for use with the Parts Unlimited MRP Hands-on-Labs. All logos and images are property of Puppet</p>",
  "documentationLink": "Puppet Enterprise",
  "documentationLink2": "Puppet Documentation"
}


================================================
FILE: deploy/azurestack/instances/ubuntu_server_1404_base/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/ubuntu_server_1404_base/Canonical.Ubuntu1404/Manifest.json
================================================
{   "$schema": "https://gallery.azure.com/schemas/2014-09-01/manifest.json#",
    "name": "UbuntuServer",
    "publisher": "Canonical",
    "version": "1.0.0",
    "displayName": "ms-resource:displayName",
    "publisherDisplayName": "ms-resource:publisherDisplayName",
    "publisherLegalName": "ms-resource:publisherDisplayName",
    "summary": "ms-resource:summary",
    "longSummary": "ms-resource:longSummary",
    "description": "ms-resource:description",
    "longDescription": "ms-resource:description",
    "links": [
        { "displayName": "ms-resource:documentationLink", "uri": "https://help.ubuntu.com/14.04/serverguide/index.html" }
    ],
    "artifacts": [
        {
            "name": "UbuntuServer1404",
            "type": "Template",
            "path": "DeploymentTemplates\\UbuntuServer1404.json",
            "isDefault": true
        }
    ],
    "icons": {
        "small": "Icons\\Small.png",
        "medium": "Icons\\Medium.png",
        "large": "Icons\\Large.png",
        "wide": "Icons\\Wide.png",
        "hero": "Icons\\Hero.png"
    },
    "categories": [
      "Compute"
    ],
    "uiDefinition": {
        "path": "UIDefinition.json"
    }
}


================================================
FILE: deploy/azurestack/instances/ubuntu_server_1404_base/Canonical.Ubuntu1404/UIDefinition.json
================================================
{
    "$schema": "https://gallery.azure.com/schemas/2015-02-12/UIDefinition.json#",
    "createDefinition": {
        "createBlade": {
            "name": "DeployFromTemplateBlade",
            "extension": "HubsExtension"
        }
    }
}



================================================
FILE: deploy/azurestack/instances/ubuntu_server_1404_base/Canonical.Ubuntu1404/DeploymentTemplates/UbuntuServer1404.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for the Virtual Machine."
            },
            "defaultValue": "localadmin"
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Administrator password used when provisioning virtual machines"
            }
        }
    },
    "variables": {
        "dnsNameForPublicIP": "[resourceGroup().name]",
        "location": "[resourceGroup().location]",
        "imagePublisher": "Canonical",
        "imageOffer": "UbuntuServer",
        "UbuntuSKU": "1404-LTS",
        "OSDiskName": "[tolower(concat(resourceGroup().name, 'osdisk'))]",
        "nicName": "[tolower(concat(resourceGroup().name, 'vNic'))]",
        "addressPrefix": "10.0.0.0/24",
        "subnetName": "[tolower(concat(resourceGroup().name, 'subnet'))]",
        "subnetPrefix": "10.0.0.0/24",
        "storageAccountName": "[concat(resourceGroup().name, 'sa')]",
        "storageAccountType": "Standard_LRS",
        "publicIPAddressName": "[tolower(concat(resourceGroup().name, 'publicIP'))]",
        "publicIPAddressType": "Dynamic",
        "vmStorageAccountContainerName": "vhds",
        "vmName": "[resourceGroup().name]",
        "vmSize": "Standard_A2",
        "virtualNetworkName": "[tolower(concat(resourceGroup().name, 'vNet'))]",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
        "networkSecurityGroupName": "[tolower(concat(resourceGroup().name, 'nsg'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageAccountName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[variables('location')]",
            "properties": {
                "accountType": "[variables('storageAccountType')]"
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('networkSecurityGroupName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "ssh",
                        "properties": {
                            "description": "Allow SSH",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 200,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressName')]",
            "location": "[variables('location')]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[variables('dnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[variables('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nicName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[variables('networkSecurityGroupName')]"
            ],
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vmName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[variables('UbuntuSKU')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat(resourceGroup().name, 'osdisk')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',variables('OSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxCustomScriptExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/azurestack/customscripts/install_updates.sh"
                    ],
                    "commandToExecute": "bash install_updates.sh"
                },
                "protectedSettings": {}
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxDockerExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'),'/extensions/LinuxCustomScriptExtension')]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "DockerExtension",
                "typeHandlerVersion": "1.2",
                "autoUpgradeMinorVersion": "true",
                "settings": {}
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'),'/extensions/LinuxDockerExtension')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('adminUsername')]",
                    "password": "[parameters('adminPassword')]"
                }
            }
        }
    ],
    "outputs": {}
}


================================================
FILE: deploy/azurestack/instances/ubuntu_server_1404_base/Canonical.Ubuntu1404/strings/resources.resjson
================================================
{
  "displayName": "Ubuntu Server 14.04-LTS",
  "publisherDisplayName": "Canonical",
  "summary": "Ubuntu Server delivers the best value scale-out performance available.",
  "longSummary": "Ubuntu Server delivers the best value scale-out performance available.",
  "description": "<p>Ubuntu Server is the world's most popular Linux for cloud environments.</p><p>Updates and patches for Ubuntu 14.04 LTS will be available until 2019-04-17.</p><p>Ubuntu Server is the perfect virtual machine (VM) platform for all workloads from web applications to NoSQL databases and Hadoop.</p><p><b>Please Note</b> - This image is not officially provided by, or supported by Canonical and is provided solely for use with the Parts Unlimited MRP Hands-on-Labs. All logos and images are property of Canonical.</p>",
  "documentationLink": "Documentation"
}


================================================
FILE: deploy/azurestack/instances/ubuntu_server_1604_base/readme.md
================================================




================================================
FILE: deploy/azurestack/instances/ubuntu_server_1604_base/Canonical.UbuntuServer.1.0.0/Manifest.json
================================================
{   "$schema": "https://gallery.azure.com/schemas/2014-09-01/manifest.json#",
    "name": "UbuntuServer",
    "publisher": "Canonical",
    "version": "1.0.0",
    "displayName": "ms-resource:displayName",
    "publisherDisplayName": "ms-resource:publisherDisplayName",
    "publisherLegalName": "ms-resource:publisherDisplayName",
    "summary": "ms-resource:summary",
    "longSummary": "ms-resource:longSummary",
    "description": "ms-resource:description",
    "longDescription": "ms-resource:description",
    "links": [
        { "displayName": "ms-resource:documentationLink", "uri": "https://help.ubuntu.com/lts/serverguide/index.html" }
    ],
    "artifacts": [
        {
            "name": "UbuntuServer1604",
            "type": "Template",
            "path": "DeploymentTemplates\\UbuntuServer1604.json",
            "isDefault": true
        }
    ],
    "icons": {
        "small": "Icons\\Small.png",
        "medium": "Icons\\Medium.png",
        "large": "Icons\\Large.png",
        "wide": "Icons\\Wide.png",
        "hero": "Icons\\Hero.png"
    },
    "categories": [
      "Compute"
    ],
    "uiDefinition": {
        "path": "UIDefinition.json"
    }
}


================================================
FILE: deploy/azurestack/instances/ubuntu_server_1604_base/Canonical.UbuntuServer.1.0.0/UIDefinition.json
================================================
{
    "$schema": "https://gallery.azure.com/schemas/2015-02-12/UIDefinition.json#",
    "createDefinition": {
        "createBlade": {
            "name": "DeployFromTemplateBlade",
            "extension": "HubsExtension"
        }
    }
}



================================================
FILE: deploy/azurestack/instances/ubuntu_server_1604_base/Canonical.UbuntuServer.1.0.0/DeploymentTemplates/UbuntuServer1604.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for the Virtual Machine."
            },
            "defaultValue": "localadmin"
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Administrator password used when provisioning virtual machines"
            }
        }
    },
    "variables": {
        "dnsNameForPublicIP": "[resourceGroup().name]",
        "location": "[resourceGroup().location]",
        "imagePublisher": "Canonical",
        "imageOffer": "UbuntuServer",
        "UbuntuSKU": "16.04.3-LTS",
        "OSDiskName": "[tolower(concat(resourceGroup().name, 'osdisk'))]",
        "nicName": "[tolower(concat(resourceGroup().name, 'vNic'))]",
        "addressPrefix": "10.0.0.0/24",
        "subnetName": "[tolower(concat(resourceGroup().name, 'subnet'))]",
        "subnetPrefix": "10.0.0.0/24",
        "storageAccountName": "[concat(resourceGroup().name, 'sa')]",
        "storageAccountType": "Standard_LRS",
        "publicIPAddressName": "[tolower(concat(resourceGroup().name, 'publicIP'))]",
        "publicIPAddressType": "Dynamic",
        "vmStorageAccountContainerName": "vhds",
        "vmName": "[resourceGroup().name]",
        "vmSize": "Standard_A2",
        "virtualNetworkName": "[tolower(concat(resourceGroup().name, 'vNet'))]",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
        "networkSecurityGroupName": "[tolower(concat(resourceGroup().name, 'nsg'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[toLower(variables('storageAccountName'))]",
            "apiVersion": "2015-05-01-preview",
            "location": "[variables('location')]",
            "properties": {
                "accountType": "[variables('storageAccountType')]"
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('networkSecurityGroupName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "ssh",
                        "properties": {
                            "description": "Allow SSH",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 200,
                            "direction": "Inbound"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('publicIPAddressName')]",
            "location": "[variables('location')]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[variables('dnsNameForPublicIP')]"
                }
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('virtualNetworkName')]",
            "location": "[variables('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-05-01-preview",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('nicName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[variables('networkSecurityGroupName')]"
            ],
            "properties": {
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                },
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2015-06-15",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[variables('vmName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[variables('vmSize')]"
                },
                "osProfile": {
                    "computerName": "[variables('vmName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[variables('UbuntuSKU')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat(resourceGroup().name, 'osdisk')]",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/',variables('OSDiskName'),'.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "true",
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxCustomScriptExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.3",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/azurestack/customscripts/install_updates.sh"
                    ],
                    "commandToExecute": "bash install_updates.sh"
                },
                "protectedSettings": {}
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxDockerExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'),'/extensions/LinuxCustomScriptExtension')]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "DockerExtension",
                "typeHandlerVersion": "1.2",
                "autoUpgradeMinorVersion": "true",
                "settings": {}
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('vmName'),'/LinuxVMAccessExtension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'),'/extensions/LinuxDockerExtension')]"
            ],
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "VMAccessForLinux",
                "typeHandlerVersion": "1.4",
                "autoUpgradeMinorVersion": "true",
                "settings": {},
                "protectedSettings": {
                    "username": "[parameters('adminUsername')]",
                    "password": "[parameters('adminPassword')]"
                }
            }
        }
    ],
    "outputs": {}
}


================================================
FILE: deploy/azurestack/instances/ubuntu_server_1604_base/Canonical.UbuntuServer.1.0.0/strings/resources.resjson
================================================
{
  "displayName": "Ubuntu Server 16.04-LTS",
  "publisherDisplayName": "Canonical",
  "summary": "Ubuntu Server delivers the best value scale-out performance available.",
  "longSummary": "Ubuntu Server delivers the best value scale-out performance available.",
  "description": "<p>Ubuntu Server is the world's most popular Linux for cloud environments. Updates and patches for Ubuntu 16.04 will be available until April 2021.</p><p>Ubuntu Server is the perfect virtual machine (VM) platform for all workloads from web applications to NoSQL databases and Hadoop.</p><p><b>Please Note</b> - This image is not officially provided by, or supported by Canonical and is provided solely for use with the Parts Unlimited MRP Hands-on-Labs. All logos and images are property of Canonical</p>",
  "documentationLink": "Documentation"
}


================================================
FILE: deploy/docker/BuildAndRun.sh
================================================
#!/bin/bash

#Build your docker images manually on the server
docker build -t mypartsunlimitedmrp/db ./Database
docker build -t mypartsunlimitedmrp/order ./Order
docker build -t mypartsunlimitedmrp/web ./Clients

#Run your docker images manually on the server
docker run -it -d --name db -p 27017:27017 -p 28017:28017 mypartsunlimitedmrp/db 
docker run -it -d --name order -p 8080:8080 --link db:mongo mypartsunlimitedmrp/order
docker run -it -d --name web -p 80:8080 mypartsunlimitedmrp/web

#Feed the database
docker exec db mongo ordering /tmp/MongoRecords.js


================================================
FILE: deploy/docker/StopAndRemove.sh
================================================
#!/bin/bash

#Stop your docker container and remove it manually on the server
docker rm db --force
docker rm order --force
docker rm web --force

#Remove the images manually on the server
docker rmi mypartsunlimitedmrp/db
docker rmi mypartsunlimitedmrp/order
docker rmi mypartsunlimitedmrp/web


================================================
FILE: deploy/docker/Clients/Dockerfile
================================================
FROM tomcat:7-jre8

MAINTAINER juliens@microsoft.com

COPY drop/* /usr/local/tomcat/webapps/

EXPOSE 8080

ENTRYPOINT catalina.sh run



================================================
FILE: deploy/docker/Clients/drop/PUT YOUR WAR FILE HERE
================================================
[Empty file]


================================================
FILE: deploy/docker/Database/Dockerfile
================================================
FROM mongo

MAINTAINER juliens@microsoft.com

COPY drop/* /tmp/

CMD ["mongod", "--smallfiles", "--rest"]


================================================
FILE: deploy/docker/Database/drop/MongoRecords.js
================================================
var conn;
while (conn === undefined)
{
    try
    {
        conn = new Mongo("localhost:27017");
    }
    catch (e)
    {
        print(e);
    }

    sleep(100);
}

db = conn.getDB("ordering");
db.catalog.insert(
[
  {"skuNumber" : "LIG-0001", "description" : "Helogen Headlights (2 Pack)", "price" : 38.99, "inventory" : 10, "leadTime" : 3},
  {"skuNumber" : "LIG-0002", "description" : "Bugeye Headlights (2 Pack)", "price" : 48.99, "inventory" : 7, "leadTime" : 3},
  {"skuNumber" : "LIG-0003", "description" : "Turn Signal Light Bulb", "price" : 6.49, "inventory" : 18, "leadTime" : 3},
  {"skuNumber" : "WHE-0001", "description" : "Matte Finish Rim", "price" : 75.99, "inventory" : 4, "leadTime" : 5},
  {"skuNumber" : "WHE-0002", "description" : "Blue Performance Alloy Rim", "price" : 88.99, "inventory" : 8, "leadTime" : 5},
  {"skuNumber" : "WHE-0003", "description" : "High Performance Rim", "price" : 99.99, "inventory" : 3, "leadTime" : 5},
  {"skuNumber" : "WHE-0004", "description" : "Wheel Tire Combo", "price" : 72.49, "inventory" : 0, "leadTime" : 4},
  {"skuNumber" : "WHE-0005", "description" : "Chrome Rim Tire Combo", "price" : 129.99, "inventory" : 1, "leadTime" : 4},
  {"skuNumber" : "WHE-0006", "description" : "Wheel Tire Combo (4 Pack)", "price" : 219.99, "inventory" : 3, "leadTime" : 6},
  {"skuNumber" : "BRA-0001", "description" : "Disk and Pad Combo", "price" : 25.99, "inventory" : 0, "leadTime" : 6},
  {"skuNumber" : "BRA-0002", "description" : "Brake Rotor", "price" : 18.99, "inventory" : 4, "leadTime" : 4},
  {"skuNumber" : "BRA-0003", "description" : "Brake Disk and Calipers", "price" : 43.99, "inventory" : 2, "leadTime" : 8},
  {"skuNumber" : "BAT-0001", "description" : "12-Volt Calcium Battery", "price" : 129.99, "inventory" : 9, "leadTime" : 8},
  {"skuNumber" : "BAT-0002", "description" : "Spiral Coil Battery", "price" : 154.99, "inventory" : 3, "leadTime" : 10},
  {"skuNumber" : "BAT-0003", "description" : "Jumper Leads", "price" : 16.99, "inventory" : 6, "leadTime" : 3},
  {"skuNumber" : "OIL-0001", "description" : "Filter Set", "price" : 28.99, "inventory" : 3, "leadTime" : 4},
  {"skuNumber" : "OIL-0002", "description" : "Oil and Filter Combo", "price" : 34.49, "inventory" : 5, "leadTime" : 4},
  {"skuNumber" : "OIL-0003", "description" : "Synthetic Engine Oil", "price" : 39.99, "inventory" : 11, "leadTime" : 4}
])

db.dealers.insert({ "name" : "Terry Adams", "address" : "17760 Northeast 67th Court, Redmond, WA 98052", "email" : "terry@adams.com", "phone" : "425-885-6217" })

db.quotes.insert([{
"quoteId" : "0",
"validUntil" : "2015-05-01T00:00:00+0000",
"customerName" : "Walter Harp",
"dealerName" : "Terry Adams",
"city" : "Seattle",
"totalCost" : "51.97",
"discount" : "0.0",
"state" : "WA",
"postalCode" : "98023",
"quoteItems" : [
    {"skuNumber":"LIG-0001", "amount":1 },
    {"skuNumber":"LIG-0003", "amount":2 }]
},
{
"quoteId" : "1",
"validUntil" : "2015-01-01T00:00:00+0000",
"customerName" : "Jerry Morrison",
"dealerName" : "Terry Adams",
"city" : "Seattle",
"totalCost" : "25.99",
"state" : "WA",
"postalCode" : "98089",
"quoteItems" : [
  { "skuNumber" : "BRA-0001", "amount" : 1}
]
},
{
"quoteId" : "2",
"validUntil" : "2015-02-01T00:00:00+0000",
"customerName" : "Harrison Hall",
"dealerName" : "Terry Adams",
"city" : "Seattle",
"totalCost" : "600.90",
"discount" : "0.0",
"state" : "WA",
"postalCode" : "98027",
"quoteItems" : [
  { "skuNumber" : "WHE-0002", "amount" : 4},
  { "skuNumber" : "BRA-0003", "amount" : 4},
  { "skuNumber" : "OIL-0001", "amount" : 1},
  { "skuNumber" : "OIL-0001", "amount" : 1}
]
}
])

db.orders.insert([{
"orderId" : "0",
"quoteId" : "0",
"orderDate" : "2015-03-02T20:43:37+0000",
"status" : "Created",
"events" : []
},
{"orderId" : "1",
"quoteId" : "2",
"orderDate" : "2015-03-02T20:43:37+0000",
"status" : "DeliveryConfirmed",
"events" : []
}])

db.shipments.insert([{
"orderId" : "0",
"contactName" : "Walter Harp",
"primaryContactPhone" : {
  "phoneNumber" : "435-783-2378",
  "kind" : "Mobile"
},
"deliveryAddress" : {
  "street" : "34 Sheridan Street",
  "city" : "Seattle",
  "state" : "WA",
  "postalCode" : "98023",
  "specialInstructions" : ""
},
"events" : []
},
{
"orderId" : "2",
"contactName" : "Harrison Hall",
"primaryContactPhone" : {
  "phoneNumber" : "435-712-7234",
  "kind" : "Mobile"
},
"deliveryAddress" : {
  "street" : "84 Queen Street",
  "city" : "Seattle",
  "state" : "WA",
  "postalCode" : "98027",
  "specialInstructions" : "Leave around by the back door."
},
"events" : []
}])



================================================
FILE: deploy/docker/Order/Dockerfile
================================================
FROM openjdk:8-jre

MAINTAINER juliens@microsoft.com

RUN mkdir -p /usr/local/app

WORKDIR /usr/local/app

COPY drop/* /usr/local/app/

EXPOSE 8080

ENTRYPOINT sh run.sh



================================================
FILE: deploy/docker/Order/drop/PUT YOUR JAR FILE HERE
================================================
[Empty file]


================================================
FILE: deploy/docker/Order/drop/run.sh
================================================
#!/bin/bash

while ! curl http://mongo:27017/
do
  echo "$(date) - still trying"
  sleep 1
done
echo "$(date) - connected successfully"

java -jar ordering-*.jar



================================================
FILE: Labfiles/ansible-azure-lab/ARMtemplate-newVM.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {},
    "variables": {},
    "resources": [
		{
			"comments": "Availability set",
			"type": "Microsoft.Compute/availabilitySets",
			"name": "myAvSet",
			"apiVersion": "2017-03-30",
			"location": "[resourceGroup().location]",
            "sku": {
                "name": "Aligned"
            },
            "properties": {
                "platformUpdateDomainCount": 5,
                "platformFaultDomainCount": 2
            }
		},
        {
            "comments": "Create a NSG",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "myNsg",
            "apiVersion": "2017-06-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-SSH",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    }
                ]
            },
            "resources": [],
            "dependsOn": []
        },
        {
            "comments": "Create Network Interface Card, associated to the NSG and to the SLB",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "myNic",
            "apiVersion": "2017-06-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "myNic",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', 'myVnet'), '/subnets/', 'subnet1')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'mySlb'), '/backendAddressPools/', 'myBackendConfig')]"
                                }
                            ]
                        }
                    }
                ],
                "dnsSettings": {
                    "dnsServers": []
                },
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'myNsg')]"
                }
            },
            "resources": [],
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', 'myVnet')]",
                "[resourceId('Microsoft.Network/loadBalancers', 'mySlb')]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'myNsg')]"
            ]
        },
        {
            "comments": "Create vnet with 2 subnets",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "myVnet",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.123.0.0/16"
                    ]
                },
                "subnets": [
                    {
                        "name": "subnet1",
                        "properties": {
                            "addressPrefix": "10.123.1.0/24"
                        }
                    },
                    {
                        "name": "subnet2",
                        "properties": {
                            "addressPrefix": "10.123.2.0/24"
                        }
                    }
                ]
            },
            "resources": [],
            "dependsOn": []
        },
        {
            "comments": "Deploy VM",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "mySecondVM",
            "apiVersion": "2017-03-30",
            "location": "[resourceGroup().location]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', 'myAvSet')]"
                },
                "hardwareProfile": {
                    "vmSize": "Standard_A0"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "OpenLogic",
                        "offer": "CentOS",
                        "sku": "7.3",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "caching": "ReadWrite",
                        "name": "myOsDisk",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "Standard_LRS"
                        }
                    },
                    "dataDisks": []
                },
                "osProfile": {
                    "computerName": "mySecondVm",
                    "adminUsername": "lab-user",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": false
                    },
                    "secrets": [],
    				"adminPassword": "Microsoft123!"				
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', 'myNic')]"
                        }
                    ]
                }
            },
            "resources": [],
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', 'myNic')]",
                "[resourceId('Microsoft.Compute/availabilitySets', 'myAvSet')]"
            ]
        },
        {
            "comments": "Internal Load Balancer",
            "type": "Microsoft.Network/loadBalancers",
            "name": "mySlb",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "myFrontendConfig",
                        "properties": {
                            "privateIPAddress": "10.123.1.100",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', 'myVnet'), '/subnets/', 'subnet1')]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "myBackendConfig"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "SSHrule",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat( resourceId('Microsoft.Network/loadBalancers', 'mySlb'), '/frontendIPConfigurations/', 'myFrontendConfig')]"
                            },
                            "frontendPort": 22,
                            "backendPort": 22,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'mySlb'), '/backendAddressPools/', 'myBackendConfig')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'mySlb'), '/probes/', 'myProbe')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "myProbe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 22,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    }
                ],
                "inboundNatRules": [],
                "outboundNatRules": [],
                "inboundNatPools": []
            },
            "resources": [],
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', 'myVnet')]"
            ]
        }
   ]
}


================================================
FILE: Labfiles/ansible-azure-lab/delete_vm.yml
================================================
# The following variables must be specified:
# - vmname
# - resgrp
- name: Remove Virtual Machine and associated objects
  hosts: localhost
  connection: local
  gather_facts: no 
  tasks:
  - name: Remove VM and all resources
    azure_rm_virtualmachine:
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      state: absent
      # ignore_errors: yes
      remove_on_absent:
        - network_interfaces
        - virtual_storage
        - public_ips
  - name: Remove storage account
    azure_rm_storageaccount: 
      resource_group: '{{ resgrp }}'
      name:  '{{ vmname }}'
      state: absent
      # ignore_errors: yes



================================================
FILE: Labfiles/ansible-azure-lab/httpd.yml
================================================
- name: Install Apache Web Server 
  hosts: '{{ vmname }}'
  gather_facts: no
  tasks:
  - name: Ensure apache is at the latest version
    yum: name=httpd state=latest
    become: true
  - name: Change permissions of /var/www/html
    file: path=/var/www/html mode=0777
    become: true
  - name: Download index.html
    get_url:
      url: https://raw.githubusercontent.com/erjosito/ansible-azure-lab/master/index.html
      dest: /var/www/html/index.html
      mode: 0644
  - name: Ensure apache is running (and enable it at boot)
    service: name=httpd state=started enabled=yes
    become: true





================================================
FILE: Labfiles/ansible-azure-lab/index.html
================================================
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>Hello World</title>
    </head>
    <body>
        <h1>Hello World</h1>
        <p>
            <br>This is a test page
            <br>This is a test page
            <br>This is a test page
        </p>
    </body>
</html>


================================================
FILE: Labfiles/ansible-azure-lab/LICENSE
================================================
MIT License

Copyright (c) 2016 OSS Labs

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: Labfiles/ansible-azure-lab/new_ARM_deployment.yml
================================================
- name: CREATE ARM Deployment PLAYBOOK
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    # Variables 'resgrp' and 'location' need to be provided at command line with arg --extra-vars
    templateLink: 'https://raw.githubusercontent.com/erjosito/ansible-azure-lab/master/ARMtemplate-newVM.json'
    # No parameters required for this template
    #paramsLink: ''
   
  tasks:
  - name: Deploy ARM template
    azure_rm_deployment:
        state: present
        resource_group_name: '{{ resgrp }}'
        # location seems to be not optional
        location: '{{ location }}'
        template_link: '{{ templateLink }}'
        #parameters_link: '{{ paramsLink }}'



================================================
FILE: Labfiles/ansible-azure-lab/new_vm_web.yml
================================================
- name: CREATE VM PLAYBOOK
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    # Variables 'vnet', 'subnet', 'vmname' and 'resgrp' need to be provided at command line with arg --extra-vars
    dnsname: '{{ vmname }}.westeurope.cloudapp.azure.com'
    # The DNS name might not be right depending on your region!!
    ip: "{{ lookup ('dig', '{{ dnsname }}') }}"
   
  tasks:
  - debug: msg="Public DNS name {{ dnsname }} resolved to IP {{ ip }}. "
# The following check is disabled so that the playbook does not stop upon existence of DNS name. Otherwise
# it cannot be re-run after VM creation
#  - name: Check if DNS is taken
#    fail: msg="That DNS name seems to be already taken"
#    when: ip != 'NXDOMAIN'
  - name: Create storage account
    azure_rm_storageaccount:
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      account_type: Standard_LRS
  - name: Create security group that allows SSH and HTTP
    azure_rm_securitygroup: 
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      rules: 
        - name: SSH 
          protocol: Tcp 
          destination_port_range: 22  
          access: Allow  
          priority: 101 
          direction: Inbound
        - name: WEB
          protocol: Tcp 
          destination_port_range: 80  
          access: Allow  
          priority: 102 
          direction: Inbound
  - name: Create public IP address
    azure_rm_publicipaddress: 
      resource_group: '{{ resgrp }}'
      allocation_method: Static 
      name: '{{ vmname }}'
      domain_name_label: '{{ vmname }}'
  - name: Create NIC
    azure_rm_networkinterface:
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      virtual_network: '{{ vnet }}'
      subnet: '{{ subnet }}'
      public_ip_name: '{{ vmname }}'
      security_group: '{{ vmname }}'
  - name: Create VM
    azure_rm_virtualmachine:
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      storage_account: '{{ vmname }}'
      storage_container: '{{ vmname }}'
      storage_blob: '{{ vmname }}.vhd'
      network_interfaces: '{{ vmname }}'
      vm_size: Standard_A0
      admin_username: lab-user
      ssh_password_enabled: False
      ssh_public_keys: 
        - path: /home/lab-user/.ssh/authorized_keys
          key_data: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDn4i0NkH4uFL7B87MJBW0TyQcsk99vQNlHyZLJyRielhU2kxy73K4ecOEcYQPu0B58KbQfHM2EooaHbZIDAaZK8K62yaYz5eV7YBMr5TdN9Tw5u1GGT5LrWsOYoHcQtcSnTRbBSWZDFIx5eJWebBxdDh61LbEftyOLg16xsLRIqp6SeAtJANTWNSMCEH96qn4+12eoW8bYQ7flVyR7uyE+7NDKmMaHk0zWUQe0wluHyUnfj15g1tfRvwXyUEMLMagyFrhRh0n/wNBnV8XrX74OjqCseJfh3YnuLxhy4hAmw0di699Q3jTB3xJ8b7yg2NvoAF+lzSkQtiArTjEBVKuv lab-user@ansibleMaster'
      image:
        offer: CentOS
        publisher: OpenLogic
        sku: '7.2'
        version: latest



================================================
FILE: Labfiles/ansible-azure-lab/VERSION
================================================
v0.2



================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/automate_nginx.sh
================================================
#!/bin/bash

# The MIT License (MIT)
#
# Copyright (c) 2015 Microsoft Azure
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

apt-get update -y && apt-get upgrade -y
apt-get install -y nginx
echo "Hello World from my VM Scale set" $HOSTNAME "!" | sudo tee -a /var/www/html/index.html


================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/ARMtemplate-newVM.json
================================================
{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {},
    "variables": {},
    "resources": [
		{
			"comments": "Availability set",
			"type": "Microsoft.Compute/availabilitySets",
			"name": "myAvSet",
			"apiVersion": "2017-03-30",
			"location": "[resourceGroup().location]",
            "sku": {
                "name": "Aligned"
            },
            "properties": {
                "platformUpdateDomainCount": 5,
                "platformFaultDomainCount": 2
            }
		},
        {
            "comments": "Create a NSG",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "myNsg",
            "apiVersion": "2017-06-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "default-allow-SSH",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "destinationPortRange": "22",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Inbound"
                        }
                    }
                ]
            },
            "resources": [],
            "dependsOn": []
        },
        {
            "comments": "Create Network Interface Card, associated to the NSG and to the SLB",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "myNic",
            "apiVersion": "2017-06-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "myNic",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', 'myVnet'), '/subnets/', 'subnet1')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'mySlb'), '/backendAddressPools/', 'myBackendConfig')]"
                                }
                            ]
                        }
                    }
                ],
                "dnsSettings": {
                    "dnsServers": []
                },
                "enableIPForwarding": false,
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'myNsg')]"
                }
            },
            "resources": [],
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', 'myVnet')]",
                "[resourceId('Microsoft.Network/loadBalancers', 'mySlb')]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', 'myNsg')]"
            ]
        },
        {
            "comments": "Create vnet with 2 subnets",
            "type": "Microsoft.Network/virtualNetworks",
            "name": "myVnet",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.123.0.0/16"
                    ]
                },
                "subnets": [
                    {
                        "name": "subnet1",
                        "properties": {
                            "addressPrefix": "10.123.1.0/24"
                        }
                    },
                    {
                        "name": "subnet2",
                        "properties": {
                            "addressPrefix": "10.123.2.0/24"
                        }
                    }
                ]
            },
            "resources": [],
            "dependsOn": []
        },
        {
            "comments": "Deploy VM",
            "type": "Microsoft.Compute/virtualMachines",
            "name": "mySecondVM",
            "apiVersion": "2017-03-30",
            "location": "[resourceGroup().location]",
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', 'myAvSet')]"
                },
                "hardwareProfile": {
                    "vmSize": "Standard_A0"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "OpenLogic",
                        "offer": "CentOS",
                        "sku": "7.3",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Linux",
                        "caching": "ReadWrite",
                        "name": "myOsDisk",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "Standard_LRS"
                        }
                    },
                    "dataDisks": []
                },
                "osProfile": {
                    "computerName": "mySecondVm",
                    "adminUsername": "lab-user",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": false
                    },
                    "secrets": [],
    				"adminPassword": "Microsoft123!"				
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', 'myNic')]"
                        }
                    ]
                }
            },
            "resources": [],
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', 'myNic')]",
                "[resourceId('Microsoft.Compute/availabilitySets', 'myAvSet')]"
            ]
        },
        {
            "comments": "Internal Load Balancer",
            "type": "Microsoft.Network/loadBalancers",
            "name": "mySlb",
            "apiVersion": "2016-03-30",
            "location": "[resourceGroup().location]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "myFrontendConfig",
                        "properties": {
                            "privateIPAddress": "10.123.1.100",
                            "privateIPAllocationMethod": "Static",
                            "subnet": {
                                "id": "[concat(resourceId('Microsoft.Network/virtualNetworks', 'myVnet'), '/subnets/', 'subnet1')]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "myBackendConfig"
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "SSHrule",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[concat( resourceId('Microsoft.Network/loadBalancers', 'mySlb'), '/frontendIPConfigurations/', 'myFrontendConfig')]"
                            },
                            "frontendPort": 22,
                            "backendPort": 22,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 4,
                            "protocol": "Tcp",
                            "loadDistribution": "Default",
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'mySlb'), '/backendAddressPools/', 'myBackendConfig')]"
                            },
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', 'mySlb'), '/probes/', 'myProbe')]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "myProbe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 22,
                            "intervalInSeconds": 15,
                            "numberOfProbes": 2
                        }
                    }
                ],
                "inboundNatRules": [],
                "outboundNatRules": [],
                "inboundNatPools": []
            },
            "resources": [],
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', 'myVnet')]"
            ]
        }
   ]
}


================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/create_vm.yml
================================================
- name: Create Azure Ubuntu Web VM
  hosts: localhost
  connection: local
  tasks:
  - name: Create resource group
    azure_rm_resourcegroup:
      name: ubuntuwebvmrg
      location: eastus
  - name: Create virtual network
    azure_rm_virtualnetwork:
      resource_group: ubuntuwebvmrg
      name: ubuntuvnet
      address_prefixes: "10.0.0.0/16"
  - name: Add subnet
    azure_rm_subnet:
      resource_group: ubuntuwebvmrg
      name: ubuntusubnet
      address_prefix: "10.0.1.0/24"
      virtual_network: ubuntuvnet
  - name: Create public IP address
    azure_rm_publicipaddress:
      resource_group: ubuntuwebvmrg
      allocation_method: Static
      name: ubuntuPublicIP
    register: output_ip_address
  - name: Dump public IP for VM which will be created
    debug:
      msg: "The public IP is {{ output_ip_address.state.ip_address }}."
  - name: Create Network Security Group that allows SSH and HTTP
    azure_rm_securitygroup:
      resource_group: ubuntuwebvmrg
      name: ubuntuNetworkSecurityGroup
      rules:
        - name: SSH
          protocol: Tcp
          destination_port_range: 22
          access: Allow
          priority: 101
          direction: Inbound
        - name: HTTP
          protocol: Tcp 
          destination_port_range: 80  
          access: Allow  
          priority: 102 
          direction: Inbound
        - name: HTTPS
          protocol: Tcp 
          destination_port_range: 443 
          access: Allow  
          priority: 103 
          direction: Inbound
        - name: RDP
          protocol: Tcp 
          destination_port_range: 443 
          access: Allow  
          priority: 104
          direction: Inbound
  - name: Create virtual network interface card
    azure_rm_networkinterface:
      resource_group: ubuntuwebvmrg
      name: ubuntuNIC
      virtual_network: ubuntuvnet
      subnet: ubuntusubnet
      public_ip_name: ubuntuPublicIP
      security_group: ubuntuNetworkSecurityGroup
  - name: Create VM
    azure_rm_virtualmachine:
      resource_group: ubuntuwebvmrg
      name: ubuntuwebvm1
      vm_size: Standard_DS1_v2
      admin_username: azureuser
      admin_password: Password0134!
      ssh_password_enabled: false
      ssh_public_keys: 
        - path: /home/azureuser/.ssh/authorized_keys
          key_data: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDn4i0NkH4uFL7B87MJBW0TyQcsk99vQNlHyZLJyRielhU2kxy73K4ecOEcYQPu0B58KbQfHM2EooaHbZIDAaZK8K62yaYz5eV7YBMr5TdN9Tw5u1GGT5LrWsOYoHcQtcSnTRbBSWZDFIx5eJWebBxdDh61LbEftyOLg16xsLRIqp6SeAtJANTWNSMCEH96qn4+12eoW8bYQ7flVyR7uyE+7NDKmMaHk0zWUQe0wluHyUnfj15g1tfRvwXyUEMLMagyFrhRh0n/wNBnV8XrX74OjqCseJfh3YnuLxhy4hAmw0di699Q3jTB3xJ8b7yg2NvoAF+lzSkQtiArTjEBVKuv'
      network_interfaces: ubuntuNIC
      image:
        offer: UbuntuServer
        publisher: Canonical
        sku: 18.04-LTS
        version: latest


================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/cron.yml
================================================

- name: Create Cron Job for Web Server configuration
  hosts: localhost
  connection: local
  tasks:
  - name: Cron Job web server configuration
    cron:
     name: "httpd yml configuration"
     minute: "*"
     hour: "*"
     job: '/usr/bin/ansible-playbook -i /home/azureuser/ansible/contrib/inventory/azure_rm.py /home/azureuser/PartsUnlimitedMRP/Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/httpd.yml --extra-vars "vmname=< your-vm-name >"'

  #- name: 'Ensure an old job is no longer present. Removes any job that is prefixed by "#Ansible: an old job" from the crontab'
   # cron:
    # name: "an old job"
    # state: absent

  #- name: Creates an entry like "PATH=/opt/bin" on top of crontab
    #cron:
     #name: PATH
     #env: yes
     #value: /opt/bin

  #- name: Creates an entry like "APP_HOME=/srv/app" and insert it after PATH declaration
    #cron:
     #name: APP_HOME
     #env: yes
     #value: /srv/app
     #insertafter: PATH



================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/delete_vm.yml
================================================
# The following variables must be specified:
# - vmname
# - resgrp
- name: Remove Virtual Machine and associated objects
  hosts: localhost
  connection: local
  gather_facts: no 
  tasks:
  - name: Remove VM and all resources
    azure_rm_virtualmachine:
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      state: absent
      # ignore_errors: yes
      remove_on_absent:
        - network_interfaces
        - virtual_storage
        - public_ips
  - name: Remove storage account
    azure_rm_storageaccount: 
      resource_group: '{{ resgrp }}'
      name:  '{{ vmname }}'
      state: absent
      # ignore_errors: yes



================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/httpd.yml
================================================
- name: Install Apache Web Server 
  hosts: '{{ vmname }}'
  gather_facts: no
  tasks:
  - name: Ensure apache is at the latest version
    yum: name=httpd state=latest
    become: true
  - name: Change permissions of /var/www/html
    file: path=/var/www/html mode=0777
    become: true
  - name: Download index.html
    get_url:
      url: https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/index.html
      dest: /var/www/html/index.html
      mode: 0644
  - name: Ensure apache is running (and enable it at boot)
    service: name=httpd state=started enabled=yes
    become: true





================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/index.html
================================================
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>Hello World</title>
    </head>
    <body>
        <h1>Hello World</h1>
        <p>
            <br>This is a test page
            <br>This is a test page
            <br>This is a test page
        </p>
    </body>
</html>


================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/new_ARM_deployment.yml
================================================
- name: CREATE ARM Deployment PLAYBOOK
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    # Variables 'resgrp' and 'location' need to be provided at command line with arg --extra-vars
    templateLink: 'https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/ARMtemplate-newVM.json'
    # No parameters required for this template
    #paramsLink: ''
   
  tasks:
  - name: Deploy ARM template
    azure_rm_deployment:
        state: present
        resource_group_name: '{{ resgrp }}'
        # location seems to be not optional
        location: '{{ location }}'
        template_link: '{{ templateLink }}'
        #parameters_link: '{{ paramsLink }}'



================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/new_vm_web.yml
================================================
- name: CREATE VM PLAYBOOK
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    # Variables 'vnet', 'subnet', 'vmname' and 'resgrp' need to be provided at command line with arg --extra-vars
    dnsname: '{{ vmname }}.westeurope.cloudapp.azure.com'
    # The DNS name might not be right depending on your region!!
    ip: "{{ lookup ('dig', '{{ dnsname }}') }}"
   
  tasks:
  - debug: msg="Public DNS name {{ dnsname }} resolved to IP {{ ip }}. "
# The following check is disabled so that the playbook does not stop upon existence of DNS name. Otherwise
# it cannot be re-run after VM creation
#  - name: Check if DNS is taken
#    fail: msg="That DNS name seems to be already taken"
#    when: ip != 'NXDOMAIN'
  - name: Create storage account
    azure_rm_storageaccount:
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      account_type: Standard_LRS
  - name: Create security group that allows SSH and HTTP
    azure_rm_securitygroup: 
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      rules: 
        - name: SSH 
          protocol: Tcp 
          destination_port_range: 22  
          access: Allow  
          priority: 101 
          direction: Inbound
        - name: WEB
          protocol: Tcp 
          destination_port_range: 80  
          access: Allow  
          priority: 102 
          direction: Inbound
  - name: Create public IP address
    azure_rm_publicipaddress: 
      resource_group: '{{ resgrp }}'
      allocation_method: Static 
      name: '{{ vmname }}'
      domain_name_label: '{{ vmname }}'
  - name: Create NIC
    azure_rm_networkinterface:
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      virtual_network: '{{ vnet }}'
      subnet: '{{ subnet }}'
      public_ip_name: '{{ vmname }}'
      security_group: '{{ vmname }}'
  - name: Create VM
    azure_rm_virtualmachine:
      resource_group: '{{ resgrp }}'
      name: '{{ vmname }}'
      storage_account: '{{ vmname }}'
      storage_container: '{{ vmname }}'
      storage_blob: '{{ vmname }}.vhd'
      network_interfaces: '{{ vmname }}'
      vm_size: Standard_A0
      admin_username: azureuser
      ssh_password_enabled: false
      ssh_public_keys: 
        - path: /home/azureuser/.ssh/authorized_keys
          key_data: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDn4i0NkH4uFL7B87MJBW0TyQcsk99vQNlHyZLJyRielhU2kxy73K4ecOEcYQPu0B58KbQfHM2EooaHbZIDAaZK8K62yaYz5eV7YBMr5TdN9Tw5u1GGT5LrWsOYoHcQtcSnTRbBSWZDFIx5eJWebBxdDh61LbEftyOLg16xsLRIqp6SeAtJANTWNSMCEH96qn4+12eoW8bYQ7flVyR7uyE+7NDKmMaHk0zWUQe0wluHyUnfj15g1tfRvwXyUEMLMagyFrhRh0n/wNBnV8XrX74OjqCseJfh3YnuLxhy4hAmw0di699Q3jTB3xJ8b7yg2NvoAF+lzSkQtiArTjEBVKuv lab-user@ansibleMaster'
      image:
        offer: CentOS
        publisher: OpenLogic
        sku: '7.2'
        version: latest



================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/nginx.yml
================================================
- name: Install nginx Web Server 
  hosts: '{{ vmname }}'
  gather_facts: no
  tasks:
  - name: Ensure nginx is at the latest version
    apt: name=nginx state=latest
    become: true
  - name: Change permissions of /var/www/html
    file: path=/var/www/html mode=0777
    become: true
  - name: Download index.html
    get_url:
      url: https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/ansible/index.html
      dest: /var/www/html/index.html
      mode: 0644
  - name: Ensure nginx is running (and enable it at boot)
    service: name=nginx state=started enabled=yes
    become: true



================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/M04/DeployusingChef/final/default.rb
================================================
#
# Cookbook Name:: mrpapp-2
# Recipe:: default
#
# Copyright (c) 2015 The Authors, All Rights Reserved.

# Runs apt-get update
include_recipe "apt"

# Add the Open JDK apt repo
apt_repository 'openJDK' do
    uri 'ppa:openjdk-r/ppa'
    distribution 'trusty'
end

# Install JDK and JRE
apt_package 'openjdk-8-jdk-headless' do
    action :install
end

apt_package 'openjdk-8-jre-headless' do
    action :install
end

# Set Java environment variables
ENV['JAVA_HOME'] = "/usr/lib/jvm/java-8-openjdk-amd64"
ENV['PATH'] = "#{ENV['PATH']}:/usr/lib/jvm/java-8-openjdk-amd64/bin"

# Install MongoDB
apt_package 'mongodb' do
    action :install
end

# Install Tomcat 7
apt_package 'tomcat7' do
    action :install
end

# Load MongoDB data 
remote_file 'mongodb_data' do
    source 'https://github.com/Microsoft/PartsUnlimitedMRP/raw/master/deploy/MongoRecords.js'
    path './MongoRecords.js'
    action :create
    notifies :run, "script[mongodb_import]", :immediately
end

script 'mongodb_import' do
    interpreter "bash"
    action :nothing
    code "mongo ordering MongoRecords.js"
end

# Set tomcat port 
script 'tomcat_port' do 
    interpreter "bash"
    code "sed -i 's/Connector port=\".*\" protocol=\"HTTP\\/1.1\"$/Connector port=\"#{node['tomcat']['mrp_port']}\" protocol=\"HTTP\\/1.1\"/g' /etc/tomcat7/server.xml"
    not_if "grep 'Connector port=\"#{node['tomcat']['mrp_port']}\" protocol=\"HTTP/1.1\"$' /etc/tomcat7/server.xml"
    notifies :restart, "service[tomcat7]", :immediately
end

# Install the MRP app, restart the Tomcat service if necessary
remote_file 'mrp_app' do
    source 'https://github.com/Microsoft/PartsUnlimitedMRP/raw/master/builds/mrp.war'
    path '/var/lib/tomcat7/webapps/mrp.war'
    action :create
    notifies :restart, "service[tomcat7]", :immediately
end

# Ensure Tomcat is running
service 'tomcat7' do
    action :start
end

remote_file 'ordering_service' do
    source 'https://github.com/Microsoft/PartsUnlimitedMRP/raw/master/builds/ordering-service-0.1.0.jar'
    path './ordering-service-0.1.0.jar'
    action :create
    notifies :run, "script[stop_ordering_service]", :immediately
end

# Kill the ordering service
script 'stop_ordering_service' do
    interpreter "bash"
    # Only run when notifed
    action :nothing
    code "pkill -f ordering-service"
    only_if "pgrep -f ordering-service"
end

# Start the ordering service. 
script 'start_ordering_service' do
    interpreter "bash"
    code "/usr/lib/jvm/java-8-openjdk-amd64/bin/java -jar ordering-service-0.1.0.jar &"
    not_if "pgrep -f ordering-service"
end



================================================
FILE: Labfiles/AZ-400T05-ImplemntgAppInfra/Labfiles/M04/Puppet/final/init.pp
================================================
class mrpapp {
  class { 'configuremongodb': }
  class { 'configurejava': }
  class { 'createuserandgroup': }
  class { 'configuretomcat': }
  class { 'deploywar': }
  class { 'orderingservice': }
}

class configuremongodb {
  include wget
  class { 'mongodb': }->

  wget::fetch { 'mongorecords':
    source => 'https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/MongoRecords.js',
    destination => '/tmp/MongoRecords.js',
    timeout => 0,
  }->
  exec { 'insertrecords':
    command => 'mongo ordering /tmp/MongoRecords.js',
    path => '/usr/bin:/usr/sbin',
    unless => 'test -f /tmp/initcomplete'
  }->
  file { '/tmp/initcomplete':
    ensure => 'present',
  }
}

class configurejava {
  include apt
  $packages = ['openjdk-8-jdk', 'openjdk-8-jre']

  apt::ppa { 'ppa:openjdk-r/ppa': }->
  package { $packages:
     ensure => 'installed',
  }
}


class createuserandgroup {

group { 'tomcat':
  ensure => 'present',
  gid    => '10003',
 }

user { 'tomcat':
  ensure           => 'present',
  gid              => '10003',
  home             => '/tomcat',
  password         => '!',
  password_max_age => '99999',
  password_min_age => '0',
  uid              => '1003',
 }

}

class configuretomcat {
  class { 'tomcat': }
  require createuserandgroup


 tomcat::instance { 'default':
  catalina_home => '/var/lib/tomcat7',
  install_from_source => false,
  package_name => ['tomcat7','tomcat7-admin'],
 }->

 tomcat::config::server::tomcat_users {
 'tomcat':
   catalina_base => '/var/lib/tomcat7',
   element  => 'user',
   password => 'password',
   roles => ['manager-gui','manager-jmx','manager-script','manager-status'];
 'tomcat7':
   catalina_base => '/var/lib/tomcat7',
   element  => 'user',
   password => 'password',
   roles => ['manager-gui','manager-jmx','manager-script','manager-status'];
 }->

 tomcat::config::server::connector { 'tomcat7-http':
  catalina_base => '/var/lib/tomcat7',
  port => '9080',
  protocol => 'HTTP/1.1',
  connector_ensure => 'present',
  server_config => '/etc/tomcat7/server.xml',
 }->

 tomcat::service { 'default':
  use_jsvc => false,
  use_init => true,
  service_name => 'tomcat7',
 }

}

class deploywar {
  require configuretomcat

  tomcat::war { 'mrp.war':
    catalina_base => '/var/lib/tomcat7',
    war_source => 'https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/builds/mrp.war',
  }

 file { '/var/lib/tomcat7/webapps/':
   path => '/var/lib/tomcat7/webapps/',
   ensure => 'directory',
   recurse => 'true',
   mode => '777',
 }

}

class orderingservice {
  package { 'openjdk-7-jre':
    ensure => 'installed',
  }

  file { '/opt/mrp':
    ensure => 'directory'
  }->
  wget::fetch { 'orderingsvc':
    source => 'https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/builds/ordering-service-0.1.0.jar',
    destination => '/opt/mrp/ordering-service.jar',
    cache_dir => '/var/cache/wget',
    timeout => 0,
  }->
  
  exec { 'stoporderingservice':
    command => "pkill -f ordering-service",
    path => '/bin:/usr/bin:/usr/sbin',
    onlyif => "pgrep -f ordering-service"
  }->

  exec { 'stoptomcat':
    command => 'service tomcat7 stop',
    path => '/bin:/usr/bin:/usr/sbin',
    onlyif => "test -f /etc/init.d/tomcat7",
  }->
  exec { 'orderservice':
    command => 'java -jar /opt/mrp/ordering-service.jar &',
    path => '/usr/bin:/usr/sbin:/usr/lib/jvm/java-8-openjdk-amd64/bin',
  }->
  exec { 'wait':
    command => 'sleep 20',
    path => '/bin',
    notify => Tomcat::Service['default']
  }
}



================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod03/python-ci-example-master/README.md
================================================
---
layout: page
title:  DevOps200.1x Primciples and Practices - M01 Azure Automation Labs
category: IaC
order: 1
---


<h3><span style="color: #0000CD;"> Introduction</span></h3> 



Continuous integration (CI) is one of the Agile and DevOps software development practices. It helps development teams avoid  merge conflicts by setting up a continuous merging of new code updates into a shared central repository.

Automating the build and testing of code each time one of your team members commit a change to your version control is one of the best practices in DevOps. This practice adds the "fail-fast" paradigm for your application development and an iterative development approach.

Continuous integration is about delivering small chunk of code continuously which improves a development team productivity and helps them fix bugs quickly before the release and deployment phases.


There are several CI tools like Jenkins, Buildbot, TravisCI, GoCD and Team Foundation Server.

<h3><span style="color: #0000CD;">  Preparing Our Application</span></h3> 

In this practice lab, we are going to work on a Python project. The purpose of this lab is creating a system that trigger a list of tasks once a developer push a code to a share code repository. 

We are going to use:

- Python 3.5
- Python Virtualenv to create an isolated environment for our application
- Unittest: A unit testing framework for Python
- Github: A web-based Git version control repository hosting service
- CircleCI: A hosted continuous integration testing tool integrated with code management services such as GitHub

This is the structure of our code:

```

app/
├── __init__.py
├── src
│   ├── app.py
│   ├── __init__.py
└── tests
    ├── app-test.py
    └── __init__.py
.gitignore
.travisci
__init__.py
README.md    
```

Where app.py is the source of our application, app-test.py is the test case and all of the \__init\__.py files are empty.

You can also download the .gitignore file from [this repository](https://github.com/github/gitignore/blob/master/Python.gitignore).

You can use Python Virtualenv and create an isolated environment. You can download virtualenv source from [here](https://pypi.python.org/pypi/virtualenv) and execute the setup.py script to install it. To activate your virtual environment execute:


```
python3 -m venv /path/to/new/virtual/environment
```

If you are using Linux.

```
c:\>c:\Python35\python -m venv c:\path\to\myenv
```

If you are using Windows.

If everything is fine, let's activate it:

```
. /path/to/new/virtual/environment/bin/activate
```

Our app.py is a simple application that returns the sum of two numbers:

```
def my_function(param1, param2):
    return param1 + param2   
```

<h3><span style="color: #0000CD;">  Unit Testing</span></h3> 

In order to test our application, we are going to write our a test scenario using Python unittest (tests/app-test.py):

```
import unittest
from app.src.app import my_function


class MyTest(unittest.TestCase):
    def test_my_function(self):
        self.assertEqual(my_function(1, 1), 2)
        self.assertEqual(my_function(1, -1), 0)
        self.assertEqual(my_function(0, 0), 0)
        self.assertEqual(my_function(-1, -1), -2)
        self.assertEqual(my_function(1.0, 1), 2)        
        self.assertEqual(my_function(1.1, 1.1), 2.2)        
        
        
        
if __name__ == '__main__':
    unittest.main()        
```

In the previous test code, we tested different scenarios like summing up two negative integers or two floats. It is a good practice to think about the best possible scenarios and implement the suitable test cases in order to reduce the number of bugs.

You can execute this test case using the following command:

```
python app/tests/app-test.py 
```

If tests run without any problem you should see:

```
.
----------------------------------------------------------------------
Ran 1 test in 0.000s

OK
```

If you have one or more problems with your test assertions, the test will not pass.

For example:

```
import unittest
from app.src.app import my_function


class MyTest(unittest.TestCase):
    def test_my_function(self):
        # 1 + 1 = 4
        self.assertEqual(my_function(1, 1), 4)
        
        
        
if __name__ == '__main__':
    unittest.main()        
```

The output of the test execution will be similar to the following:

```
F
======================================================================
FAIL: test_my_function (__main__.MyTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "app/tests/app-test.py", line 7, in test_my_function
    self.assertEqual(my_function(1, 1), 4)
AssertionError: 2 != 4

----------------------------------------------------------------------
Ran 1 test in 0.001s

FAILED (failures=1)
```

<h3><span style="color: #0000CD;">Dependencies</span></h3> 

When you use a programming language to develop your application, you usually need to install libraries. This is the case for Python and that's why we need to declare our dependencies. This is done in the requirements.txt file using this command:

```
pip freeze > requirements.txt
```

In this project, we are not using any additional library, that's why our requirements.txt will be empty but always remember this step.

In order to integrate the Travis CI workflow, we should create the configuration file (.travis.yml). 
This file will tell Travis CI 



You can customize your build environment and add the set of steps in this file. 

Travis CI uses .travis.yml file in the root of your repository to learn about your project environment, how you want your builds to be executed, what kind of tests to perform and other information like emails, Campfire and IRC rooms to notify about build failures.

This is the file we are going to use:

```
language: python
python:
  - "3.5"
# command to install dependencies
install:
  - pip install -r requirements.txt
# command to run tests
script:
  - export PYTHONPATH=$PYTHONPATH:$(pwd)
  - python app/tests/app-test.py
```

<h3><span style="color: #0000CD;">Setup Our Git</span></h3> 

Now that we finished writing our code, the .gitignore file, the test and the Travis CI configuration, we need to create a Github repository and link our Travis CI to our Github account in order to import the new project.


```
git init
git add .
git commit -m "First commit"
git remote add origin <remote repository URL>
git push origin master
```

Don't forget to change  the <remote repository URL> by its real value, you can get it from your Github repository:

![repository URL](images/url.png "repository URL")

# Setup Travis CI

Go to your Travis CI dashboard, connect your Github account then sync your repositories and add the new project. This will generate your first build and you can see whether your build passes or no.

![Build History ](images/buids.png "Build History")

After every code commit, a build will start automatically and you will be notified by email on its status.


<h3><span style="color: #0000CD;">   Managing Pull Requests</span></h3> 

Now, if your are working on a different branch than the master, which is the case for all development teams, you need to make a pull request then merge your code. Let's try to test this:

Create the branch "dev" on your local machine:

```
git checkout -b dev
```

Add your modifications then push them to the dev branch:

```
git push origin dev
```

Once your modifications are added to the remote dev branch, Circle CI will trigger a new build for the dev branch and you will notice that you can make a pull request on the master branch:

![Git Pull Request](images/pull.png "Git Pull Request")

If the pull request is accepted an merged with the master branch, our CI tool will trigger a new build under the "Pull Requests" tab:

![Circle CI Pull Request Build](images/pr.png "Circle CI Pull Request Build")



<h3><span style="color: #0000CD;">  Conclusion </span></h3> 

During this practice lab, we created an application using Python using Virtualenv for the environment isolation then we created a Github repository for this application and linked it to our Travis CI account.

The continuous build and test were described in our .travis.yml file. 

It is possible to add more advanced features like ChatOps using Slack, IRC or any alternative, add more steps to your integration pipeline like creating a Docker image or deploying to a Azure Web App.. etc


























================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod03/python-ci-example-master/__init__.py
================================================
[Empty file]


================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod03/python-ci-example-master/requirements.txt
================================================
[Empty file]


================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod03/python-ci-example-master/.travis.yml
================================================
language: python
python:
  - "3.5"
# command to install dependencies
install:
  - pip install -r requirements.txt
# command to run tests
script:
  - export PYTHONPATH=$PYTHONPATH:$(pwd)
  - python app/tests/app-test.py



================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod03/python-ci-example-master/app/__init__.py
================================================
[Empty file]


================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod03/python-ci-example-master/app/src/__init__.py
================================================
[Empty file]


================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod03/python-ci-example-master/app/src/app.py
================================================
def my_function(param1, param2):
    return param1 + param2
    
    



================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod03/python-ci-example-master/app/tests/__init__.py
================================================
[Empty file]


================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod03/python-ci-example-master/app/tests/app-test.py
================================================
import unittest
from app.src.app import my_function


class MyTest(unittest.TestCase):
    def test_my_function(self):
        self.assertEqual(my_function(1, 1), 2)
        self.assertEqual(my_function(1, -1), 0)
        self.assertEqual(my_function(0, 0), 0)
        self.assertEqual(my_function(-1, -1), -2)
        self.assertEqual(my_function(1.0, 1), 2)        
        self.assertEqual(my_function(1.1, 1.1), 2.2)        
        
        
        
if __name__ == '__main__':
    unittest.main()        



================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod04/load_testing_locust-master/README.md
================================================
# Introduction


There are several types of test types in software engineering and load testing is one of the most common tests.

The purpose of this test is checking if a software can handle what it was designed to handle and identifying the blottleneck and any performance degradation. 

This is performed by putting demand on a application under normal and peak load conditions. Load testing could help you determine some metrics like the Mean Time Between Failure (MTBF) and Mean Time To Failure (MTTF).

According to [Microsoft guide Performance Testing Guidance for Web Applications](https://msdn.microsoft.com/en-us/library/bb924357.aspx), a load test enables you to measure response times, throughput rates, and resource-utilization levels, and to identify your application’s breaking point, assuming that the breaking point occurs below the peak load condition. 

As a conclusion, load testing helps you to:

- Determine the throughput required to support the anticipated peak production load.
- Determine the adequacy of a hardware environment.
- Evaluate the adequacy of a load balancer.
- Detect concurrency issues.
- Detect functionality errors under load.
- Collect data for scalability and capacity-planning purposes.
- Help to determine how many users the application can handle before performance is compromised.
- Help to determine how much load the hardware can handle before resource utilization limits are exceeded. 

Gatling, JMeter, Locust are some of the load testing tools.

In this practice lab, we are going to create a simple REST API and write some load test scenarios.

# Preparing Our Application


In this practice lab, we are going to create a minimal RESTful API using the Flask framework. Our application will let the user get a list of software testing types or add a new type.

The purpose of this lab is to load test our RESTful API using Locust.

We are going to use:

- Python 3.5
- Python Virtualenv to create an isolated environment for our application
- Locust: A load testing framework

This is the structure of our project folder:

```
app/
├── app.py
└── __init__.py
__init__.py
.gitignore
```

You can also download the .gitignore file from [this repository](https://github.com/github/gitignore/blob/master/Python.gitignore).

Let's start by creating the virtual environment for our Flask application. 

```
python3 -m venv /path/to/new/virtual/environment
```

If you are using Linux.

```
c:\>c:\Python35\python -m venv c:\path\to\myenv
```

If you are using Windows.

If everything is fine, let's activate it:

```
. /path/to/new/virtual/environment/bin/activate
```

In order to use Flask, you need to install it from the Python Package Index using PIP:

```
pip install flask
```

Let's create our application files:

```
mkdir project
wget -O .gitignore "https://github.com/github/gitignore/blob/master/Python.gitignore" 2> templog
touch __init__.py
mkdir app
touch app/app.py
touch app/__init__.py
```

Paste this code inside the app.py file:

```
from flask import Flask, jsonify, request

app = Flask(__name__)

testing_types = [
  { 'name': 'unit testing', 'description': 'testing individual units of source code' }
]


@app.route('/tests')
def get_tests():
  return jsonify(testing_types)


@app.route('/tests', methods=['POST'])
def add_test():
  testing_types.append(request.get_json())
  return '', 204
  
  
  
if __name__ == '__main__':
    app.run(debug=True)  
    
```

The above code has two functions:
- get_tests : Used to get the list of tests from the testing\_types dictionary 
- add_tests : Used to add a test to the testing\_types dictionary
    
Our initial dictionary contains one test type:

```
testing_types = [
  { 'name': 'unit testing', 'description': 'testing individual units of source code' }
]
```

In order to run our API, type:

```
python app/app.py
```

You should see something similar to the following output:

```
python app/app.py 
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 179-596-761
```

Our web server runs on: http://127.0.0.1:5000/ and in order to test it we can use a curl request. You can use your terminal or a graphical tool like Postman, Swagger or any other alternative.

This is our curl request to get the testing types list:

```
curl -X GET  http://127.0.0.1:5000/tests
```

At this stage, it should return:

```
[
  {
    "description": "testing individual units of source code", 
    "name": "unit testing"
  }
]
```

Let's try adding another type of test:

```
curl -X POST -H "Content-Type: application/json" -d '{
  "name": "load testing",
  "description": "checking if a software can handle the expected load"
}' http://localhost:5000/tests
```

After executing the last POST request, we can verify using another GET:

```
curl -X GET  http://127.0.0.1:5000/tests
```

We should see the two types of tests:

```
[
  {
    "description": "testing individual units of source code", 
    "name": "unit testing"
  }, 
  {
    "description": "checking if a software can handle the expected load", 
    "name": "load testing"
  }
]
```

# Load Testing Our RESTful API Using Locust

Locust is described as an easy-to-use, distributed, user load testing tool. It is intended for load-testing web sites (or other systems) and figuring out how many concurrent users a system can handle.

A swarm of locusts will attack your website. The behavior of each locust (or test user if you will) is defined by you and the swarming process is monitored from a web UI in real-time. This will help you battle test and identify bottlenecks in your code before letting real users in.

Since Locust is event-based, it is possible to support concurrent users on a single machine. 

Start by installing Locust:

```
pip install locustio
```

Now in the project root directory, create the locustfile.py file that will describe our testing scenarios:

```
from locust import HttpLocust, TaskSet, task

class UserBehavior(TaskSet):

    @task
    def get_tests(self):
        self.client.get("/tests")
        
    @task
    def put_tests(self):
        self.client.post("/tests", {
						  "name": "load testing",
						  "description": "checking if a software can handle the expected load"
						})
        

class WebsiteUser(HttpLocust):
    task_set = UserBehavior
    
```

In this file we told Locust to create two test tasks:

- The first one will execute a GET request to list the test types we stored in our dictionary
- The second one will execute a POST request to add a new testing type

Now start our Flask API using ``` python app/app.py ``` and Locust using ``` locust --host=http://localhost:5000 ```.

Make sure to change ``` http://localhost:5000 ``` by the real address of your application.

The web interface of Locust is available by default at ``` http://localhost:8089 ```

![Locust Home Page](images/locust_home.png "Locust Home Page")

Say our API should support a number of 10000 user. We can start a test by giving this value to Locust, using the web interface, as well as the the hatch rate which is the number of users spawned by second.

After clicking on "Start spawning", you can see different live statistics about your tasks like the number of requests, fails, and other statistics about the response time.

![Locust Statistics](images/locust_stats.png "Locust Statistics")

Using the Charts view, we can determine some fact-based conclusions. For instance, if we don't accept a response time greater than 450ms, we know that our application cannot handle more than 117 request per second and that the max number of simultaneous users should be less than 350.


# Conclusion

In this practice lab, we created a RESTful API and tested its performance using Locust. Using the results from our tests, we determined how our API can behave with a certain number of users and requests.

Load testing is an important practice since it prevents organizations from downtimes and failures due to errors like the timeout or memory overflows. Load testing gives meaningful results when tests are done against a similar environment to production (configurations, code, physical resources like disks and memory ..etc).



================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod04/load_testing_locust-master/__init__.py
================================================
[Empty file]


================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod04/load_testing_locust-master/locustfile.py
================================================
from locust import HttpLocust, TaskSet, task

class UserBehavior(TaskSet):

    @task
    def get_tests(self):
        self.client.get("/tests")
        
    @task
    def put_tests(self):
        self.client.post("/tests", {
						  "name": "load testing",
						  "description": "checking if a software can handle the expected load"
						})
        

class WebsiteUser(HttpLocust):
    task_set = UserBehavior



================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod04/load_testing_locust-master/app/__init__.py
================================================
[Empty file]


================================================
FILE: Labfiles/DevOps200.1x-PracticesandPrinciples/Mod04/load_testing_locust-master/app/app.py
================================================
from flask import Flask, jsonify, request

app = Flask(__name__)

testing_types = [
  { 'name': 'unit testing', 'description': 'testing individual units of source code' }
]

@app.route('/')
def hello():
  return jsonify({"message": "hello"})
  

@app.route('/tests')
def get_tests():
  return jsonify(testing_types)


@app.route('/tests', methods=['POST'])
def add_test():
  testing_types.append(request.get_json())
  return '', 204
  
  
  
if __name__ == '__main__':
    app.run(debug=True)  
    
    
    
    
    




================================================
FILE: Labfiles/DevOps200.2x-InfrastructureasCode/DeployusingChef/final/default.rb
================================================
#
# Cookbook Name:: mrpapp-2
# Recipe:: default
#
# Copyright (c) 2015 The Authors, All Rights Reserved.

# Runs apt-get update
include_recipe "apt"

# Add the Open JDK apt repo
apt_repository 'openJDK' do
    uri 'ppa:openjdk-r/ppa'
    distribution 'trusty'
end

# Install JDK and JRE
apt_package 'openjdk-8-jdk-headless' do
    action :install
end

apt_package 'openjdk-8-jre-headless' do
    action :install
end

# Set Java environment variables
ENV['JAVA_HOME'] = "/usr/lib/jvm/java-8-openjdk-amd64"
ENV['PATH'] = "#{ENV['PATH']}:/usr/lib/jvm/java-8-openjdk-amd64/bin"

# Install MongoDB
apt_package 'mongodb' do
    action :install
end

# Install Tomcat 7
apt_package 'tomcat7' do
    action :install
end

# Load MongoDB data 
remote_file 'mongodb_data' do
    source 'https://github.com/Microsoft/PartsUnlimitedMRP/raw/master/deploy/MongoRecords.js'
    path './MongoRecords.js'
    action :create
    notifies :run, "script[mongodb_import]", :immediately
end

script 'mongodb_import' do
    interpreter "bash"
    action :nothing
    code "mongo ordering MongoRecords.js"
end

# Set tomcat port 
script 'tomcat_port' do 
    interpreter "bash"
    code "sed -i 's/Connector port=\".*\" protocol=\"HTTP\\/1.1\"$/Connector port=\"#{node['tomcat']['mrp_port']}\" protocol=\"HTTP\\/1.1\"/g' /etc/tomcat7/server.xml"
    not_if "grep 'Connector port=\"#{node['tomcat']['mrp_port']}\" protocol=\"HTTP/1.1\"$' /etc/tomcat7/server.xml"
    notifies :restart, "service[tomcat7]", :immediately
end

# Install the MRP app, restart the Tomcat service if necessary
remote_file 'mrp_app' do
    source 'https://github.com/Microsoft/PartsUnlimitedMRP/raw/master/builds/mrp.war'
    path '/var/lib/tomcat7/webapps/mrp.war'
    action :create
    notifies :restart, "service[tomcat7]", :immediately
end

# Ensure Tomcat is running
service 'tomcat7' do
    action :start
end

remote_file 'ordering_service' do
    source 'https://github.com/Microsoft/PartsUnlimitedMRP/raw/master/builds/ordering-service-0.1.0.jar'
    path './ordering-service-0.1.0.jar'
    action :create
    notifies :run, "script[stop_ordering_service]", :immediately
end

# Kill the ordering service
script 'stop_ordering_service' do
    interpreter "bash"
    # Only run when notifed
    action :nothing
    code "pkill -f ordering-service"
    only_if "pgrep -f ordering-service"
end

# Start the ordering service. 
script 'start_ordering_service' do
    interpreter "bash"
    code "/usr/lib/jvm/java-8-openjdk-amd64/bin/java -jar ordering-service-0.1.0.jar &"
    not_if "pgrep -f ordering-service"
end



================================================
FILE: Labfiles/DevOps200.2x-InfrastructureasCode/Puppet/final/init.pp
================================================
class mrpapp {
  class { 'configuremongodb': }
  class { 'configurejava': }
  class { 'createuserandgroup': }
  class { 'configuretomcat': }
  class { 'deploywar': }
  class { 'orderingservice': }
}

class configuremongodb {
  include wget
  class { 'mongodb': }->

  wget::fetch { 'mongorecords':
    source => 'https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/deploy/MongoRecords.js',
    destination => '/tmp/MongoRecords.js',
    timeout => 0,
  }->
  exec { 'insertrecords':
    command => 'mongo ordering /tmp/MongoRecords.js',
    path => '/usr/bin:/usr/sbin',
    unless => 'test -f /tmp/initcomplete'
  }->
  file { '/tmp/initcomplete':
    ensure => 'present',
  }
}

class configurejava {
  include apt
  $packages = ['openjdk-8-jdk', 'openjdk-8-jre']

  apt::ppa { 'ppa:openjdk-r/ppa': }->
  package { $packages:
     ensure => 'installed',
  }
}


class createuserandgroup {

group { 'tomcat':
  ensure => 'present',
  gid    => '10003',
 }

user { 'tomcat':
  ensure           => 'present',
  gid              => '10003',
  home             => '/tomcat',
  password         => '!',
  password_max_age => '99999',
  password_min_age => '0',
  uid              => '1003',
 }

}

class configuretomcat {
  class { 'tomcat': }
  require createuserandgroup


 tomcat::instance { 'default':
  catalina_home => '/var/lib/tomcat7',
  install_from_source => false,
  package_name => ['tomcat7','tomcat7-admin'],
 }->

 tomcat::config::server::tomcat_users {
 'tomcat':
   catalina_base => '/var/lib/tomcat7',
   element  => 'user',
   password => 'password',
   roles => ['manager-gui','manager-jmx','manager-script','manager-status'];
 'tomcat7':
   catalina_base => '/var/lib/tomcat7',
   element  => 'user',
   password => 'password',
   roles => ['manager-gui','manager-jmx','manager-script','manager-status'];
 }->

 tomcat::config::server::connector { 'tomcat7-http':
  catalina_base => '/var/lib/tomcat7',
  port => '9080',
  protocol => 'HTTP/1.1',
  connector_ensure => 'present',
  server_config => '/etc/tomcat7/server.xml',
 }->

 tomcat::service { 'default':
  use_jsvc => false,
  use_init => true,
  service_name => 'tomcat7',
 }

}

class deploywar {
  require configuretomcat

  tomcat::war { 'mrp.war':
    catalina_base => '/var/lib/tomcat7',
    war_source => 'https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/builds/mrp.war',
  }

 file { '/var/lib/tomcat7/webapps/':
   path => '/var/lib/tomcat7/webapps/',
   ensure => 'directory',
   recurse => 'true',
   mode => '777',
 }

}

class orderingservice {
  package { 'openjdk-7-jre':
    ensure => 'installed',
  }

  file { '/opt/mrp':
    ensure => 'directory'
  }->
  wget::fetch { 'orderingsvc':
    source => 'https://raw.githubusercontent.com/Microsoft/PartsUnlimitedMRP/master/builds/ordering-service-0.1.0.jar',
    destination => '/opt/mrp/ordering-service.jar',
    cache_dir => '/var/cache/wget',
    timeout => 0,
  }->
  
  exec { 'stoporderingservice':
    command => "pkill -f ordering-service",
    path => '/bin:/usr/bin:/usr/sbin',
    onlyif => "pgrep -f ordering-service"
  }->

  exec { 'stoptomcat':
    command => 'service tomcat7 stop',
    path => '/bin:/usr/bin:/usr/sbin',
    onlyif => "test -f /etc/init.d/tomcat7",
  }->
  exec { 'orderservice':
    command => 'java -jar /opt/mrp/ordering-service.jar &',
    path => '/usr/bin:/usr/sbin:/usr/lib/jvm/java-8-openjdk-amd64/bin',
  }->
  exec { 'wait':
    command => 'sleep 20',
    path => '/bin',
    notify => Tomcat::Service['default']
  }
}



================================================
FILE: src/Backend/IntegrationService/gradlew
================================================
#!/usr/bin/env bash

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn ( ) {
    echo "$*"
}

die ( ) {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
esac

# For Cygwin, ensure paths are in UNIX format before anything is touched.
if $cygwin ; then
    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
fi

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >&-
APP_HOME="`pwd -P`"
cd "$SAVED" >&-

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=$((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$args0" ;;
        (2) set -- "$args0" "$args1" ;;
        (3) set -- "$args0" "$args1" "$args2" ;;
        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
function splitJvmOpts() {
    JVM_OPTS=("$@")
}
eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"

exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"



================================================
FILE: src/Backend/IntegrationService/gradlew.bat
================================================
@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS=

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto init

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto init

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:init
@rem Get command-line arguments, handling Windowz variants

if not "%OS%" == "Windows_NT" goto win9xME_args
if "%@eval[2+2]" == "4" goto 4NT_args

:win9xME_args
@rem Slurp the command line arguments.
set CMD_LINE_ARGS=
set _SKIP=2

:win9xME_args_slurp
if "x%~1" == "x" goto execute

set CMD_LINE_ARGS=%*
goto execute

:4NT_args
@rem Get arguments from the 4NT Shell from JP Software
set CMD_LINE_ARGS=%$

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar

@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega



================================================
FILE: src/Backend/IntegrationService/IntegrationService.iml
================================================
<?xml version="1.0" encoding="UTF-8"?>
<module external.linked.project.id="IntegrationService" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$" external.system.id="GRADLE" external.system.module.group="" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="false">
    <output url="file://$MODULE_DIR$/build/classes/main" />
    <output-test url="file://$MODULE_DIR$/build/classes/test" />
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/resources" type="java-test-resource" />
      <excludeFolder url="file://$MODULE_DIR$/.gradle" />
      <excludeFolder url="file://$MODULE_DIR$/build" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework.boot:spring-boot-starter:1.2.2.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework:spring-web:4.1.5.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework:spring-context:4.1.5.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: com.fasterxml.jackson.core:jackson-databind:2.4.5" level="project" />
    <orderEntry type="library" exported="" name="Gradle: com.microsoft.azure:azure-storage:2.0.0" level="project" />
    <orderEntry type="library" exported="" name="Gradle: commons-logging:commons-logging:1.2" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework:spring-core:4.1.5.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework:spring-beans:4.1.5.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: aopalliance:aopalliance:1.0" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework:spring-aop:4.1.5.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework:spring-expression:4.1.5.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework.boot:spring-boot:1.2.2.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.yaml:snakeyaml:1.14" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework.boot:spring-boot-autoconfigure:1.2.2.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.slf4j:slf4j-api:1.7.10" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.slf4j:jcl-over-slf4j:1.7.10" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.slf4j:jul-to-slf4j:1.7.10" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.slf4j:log4j-over-slf4j:1.7.10" level="project" />
    <orderEntry type="library" exported="" name="Gradle: ch.qos.logback:logback-core:1.1.2" level="project" />
    <orderEntry type="library" exported="" name="Gradle: ch.qos.logback:logback-classic:1.1.2" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.springframework.boot:spring-boot-starter-logging:1.2.2.RELEASE" level="project" />
    <orderEntry type="library" exported="" name="Gradle: com.fasterxml.jackson.core:jackson-annotations:2.4.0" level="project" />
    <orderEntry type="library" exported="" name="Gradle: com.fasterxml.jackson.core:jackson-core:2.4.5" level="project" />
    <orderEntry type="library" exported="" name="Gradle: org.apache.commons:commons-lang3:3.3.2" level="project" />
  </component>
</module>


================================================
FILE: src/Backend/IntegrationService/gradle/wrapper/gradle-wrapper.properties
================================================
#Fri Mar 06 11:46:13 NZDT 2015
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-1.11-bin.zip



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/Constants.java
================================================
package integration;


public class Constants {
    //Ensure that the constants file cannot be initialized.
    private Constants(){}

    public static final int SCHEDULED_INTERVAL = 30000;
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/Main.java
================================================
package integration;

import integration.scheduled.UpdateProductProcessTask;
import integration.scheduled.CreateOrderProcessTask;
import org.springframework.boot.SpringApplication;

public class Main {
	public static void main(String[] args) {
		//Adding the scheduled task classes to the spring application to run in background threads.
		SpringApplication.run(new Object[] { CreateOrderProcessTask.class, UpdateProductProcessTask.class }, new String[0]);
	}
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/infrastructure/ConfigurationHelpers.java
================================================
package integration.infrastructure;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Properties;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

/**
 * The ConfigurationHelpers class is responsible for abstracting the logic of getting property types based on property names.
 */
public class ConfigurationHelpers {
//    private final static Logger log = MakeLogger();
//     private static Logger MakeLogger(){
//         try{
//             return LoggerFactory.getLogger(ConfigurationHelpers.class);
//         }
//         catch(Exception ex)
//         {
//             return null;
//         }
//     }


    public static String getString(String name) {
        try {
            return s_props.getProperty(name);
        } catch (Exception ex)
        {
            //log.error("An error occurred resolving string " + name + ". Exception : " + ex.toString());
        }
        return "";
    }

    /**
     * return the configuration value in the type of a integer
     * @param name - the name/key of the configuration value.
     * @return the configuration value associated with the name/key provided.
     */
    public static int getInt(String name) {
        try {
            String prop = s_props.getProperty(name);
            return Integer.parseInt(prop);
        } catch (Exception ex) {
            //log.error("An error occurred resolving int " + name + ". Exception : " + ex.toString());
        }
        return 0;
    }

    /**
     * Load the configuration properties for the propFileName
     * @param propFileName - name of the properties file
     * @return a Properties object containing all key value pairs from the properties file.
     * @throws java.io.IOException
     */
    private static Properties getPropValues(String propFileName) throws IOException {

        Properties props = new Properties();

        ClassLoader classLoader = ConfigurationHelpers.class.getClassLoader();
        InputStream inputStream = classLoader.getResourceAsStream(propFileName);

        props.load(inputStream);
        if (inputStream == null) {
            throw new FileNotFoundException("property file '" + propFileName + "' not found in the classpath");
        }

        return props;
    }

    private static Properties getProperties() {
        return s_props;
    }

    static {
        try {
            s_props = getPropValues("application.properties");
        } catch (Exception e) {
            s_props = new Properties();
        }
    }

    private static Properties s_props;
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/infrastructure/ConfigurationManager.java
================================================
package integration.infrastructure;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

/**
 * The ConfigurationManager class is responsible for wrapping calls to the application properties.
 */
public class ConfigurationManager {

    public ConfigurationManager()
    {
    }

    public static String getAzureStorageConnectionString() {
        return ConfigurationHelpers.getString("azure.storage.connectionstring");
    }

    public static String getMrpEndpoint() {
        return ConfigurationHelpers.getString("mrp.endpoint");
    }

    public static String getAzureOrderQueue() {
        return ConfigurationHelpers.getString("azure.storage.queue.orders");
    }

    public static String getAzureInventoryQueue(){
        return ConfigurationHelpers.getString("azure.storage.queue.inventory");
    }

    public static int getAzureQueueTimeout() {
        return ConfigurationHelpers.getInt("azure.storage.queue.message");
    }

}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/QueueResponse.java
================================================
package integration.models;

import com.microsoft.azure.storage.StorageException;
import com.microsoft.azure.storage.queue.CloudQueueMessage;
import java.io.IOException;

/**
 * This class is responsible for wrapping responses from the queue service.
 * @param <T>
 */
public class QueueResponse <T> {

    private final CloudQueueMessage queueMessage;
    private final T responseBody;

    public QueueResponse(CloudQueueMessage queueMessage, T responseBody){
        this.queueMessage = queueMessage;
        this.responseBody = responseBody;
    }

    public CloudQueueMessage getQueueMessage() {
        return queueMessage;
    }

    public T getResponseBody() throws StorageException, IOException {
        return responseBody;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/mrp/CatalogItem.java
================================================
package integration.models.mrp;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown = true)
public class CatalogItem {
    private String skuNumber;
    private String description;
    private String unit;
    private String price;
    private int inventory;
    private int leadTime;

    public String getSkuNumber() {
        return skuNumber;
    }

    public String getDescription() {
        return description;
    }

    public String getUnit() {
        return unit;
    }

    public String getPrice() {
        return price;
    }

    public int getInventory() {
        return inventory;
    }

    public int getLeadTime() {
        return leadTime;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/mrp/DeliveryAddress.java
================================================
package integration.models.mrp;

public class DeliveryAddress {

    private String street;
    private String city;
    private String state;
    private String postalCode;
    private String specialInstructions;

    public DeliveryAddress() {
    }

    public DeliveryAddress(String street, String city, String state, String postalCode) {
        setStreet(street);
        setCity(city);
        setState(state);
        setPostalCode(postalCode);
    }

    public String getStreet() {
        return street;
    }

    public void setStreet(String street) {
        this.street = street;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public String getPostalCode() {
        return postalCode;
    }

    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }

    public String getSpecialInstructions() {
        return specialInstructions;
    }

    public void setSpecialInstructions(String specialInstructions) {
        this.specialInstructions = specialInstructions;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/mrp/Order.java
================================================
package integration.models.mrp;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@JsonIgnoreProperties(ignoreUnknown = true)
public class Order {
    private String orderId;
    private String quoteId;
    private String orderDate;
    private String status;

    public Order() {

    }

    public String getOrderId() {
        return orderId;
    }

    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }

    public String getQuoteId() {
        return quoteId;
    }

    public void setQuoteId(String quoteId) {
        this.quoteId = quoteId;
    }

    public String getOrderDate() {
        return orderDate;
    }

    public void setOrderDate(String orderDate) {
        this.orderDate = orderDate;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }
}


================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/mrp/PhoneInfo.java
================================================
package integration.models.mrp;

public class PhoneInfo {
    private String phoneNumber;
    private String kind;

    public PhoneInfo() {

    }

    public PhoneInfo(String phoneNumber) {
        setPhoneNumber(phoneNumber);
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getKind() {
        return kind;
    }

    public void setKind(String kind) {
        this.kind = kind;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/mrp/Quote.java
================================================
package integration.models.mrp;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import integration.models.website.OrderItem;
import integration.models.website.OrderMessage;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.ArrayList;
import java.util.List;

@JsonIgnoreProperties(ignoreUnknown = true)
public class Quote {
    private String quoteId;
    private String customerName;
    private String dealerName;
    private String validUntil;
    private String city;
    private String postalCode;
    private String state;
    private double totalCost;
    private double discount;
    private List<QuoteItemInfo> quoteItems;

    public Quote() {
    }

    public Quote(OrderMessage message) {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-ddTHH:mm:ss");
        Calendar c = Calendar.getInstance();
        c.add(Calendar.DATE, 1);
    
        this.customerName = message.getCustomerName();
        this.dealerName = "Website";
        this.setCity(message.getCity());
        this.postalCode = message.getPostalCode();
        this.state = message.getState();
        this.totalCost = message.getTotalCost();
        this.discount = message.getDiscount();
        this.validUntil = dateFormat.format(c);
        this.quoteItems = new ArrayList<QuoteItemInfo>();
        
        for (OrderItem orderItem : message.getItems()){
            QuoteItemInfo quoteItem = new QuoteItemInfo(orderItem);
            this.quoteItems.add(quoteItem);
        }
    }

    public String getQuoteId() {
        return quoteId;
    }

    public void setQuoteId(String quoteId) {
        this.quoteId = quoteId;
    }

    public String getCustomerName() {
        return customerName;
    }

    public void setCustomerName(String customerName) {
        this.customerName = customerName;
    }

    public String getDealerName() {
        return dealerName;
    }

    public void setDealerName(String dealerName) {
        this.dealerName = dealerName;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getPostalCode() {
        return postalCode;
    }

    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public List<QuoteItemInfo> getQuoteItems() {
        return quoteItems;
    }

    public void setQuoteItems(List<QuoteItemInfo> quoteItems) {
        this.quoteItems = quoteItems;
    }

    public double getTotalCost() {
        return totalCost;
    }

    public void setTotalCost(double totalCost) {
        this.totalCost = totalCost;
    }

    public double getDiscount() {
        return discount;
    }

    public void setDiscount(double discount) {
        this.discount = discount;
    }

    public String getValidUntil() {
        return validUntil;
    }

    public void setValidUntil(String validUntil) {
        this.validUntil = validUntil;
    }
}




================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/mrp/QuoteItemInfo.java
================================================
package integration.models.mrp;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import integration.models.website.OrderItem;

@JsonIgnoreProperties(ignoreUnknown = true)
public class QuoteItemInfo {
    private String skuNumber;
    private double amount;

    public QuoteItemInfo(){
    }

    public QuoteItemInfo(OrderItem orderItem){
        setSkuNumber(orderItem.getSkuNumber());
        setAmount(orderItem.getPrice());
    }

    public String getSkuNumber() {
        return skuNumber;
    }

    public void setSkuNumber(String skuNumber) {
        this.skuNumber = skuNumber;
    }

    public double getAmount() {
        return amount;
    }

    public void setAmount(double amount) {
        this.amount = amount;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/mrp/ShipmentEventInfo.java
================================================
package integration.models.mrp;

public class ShipmentEventInfo {
    private String date;
    private String comments;

    public String getDate() {
        return date;
    }

    public void setDate(String date) {
        this.date = date;
    }

    public String getComments() {
        return comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/mrp/ShipmentRecord.java
================================================
package integration.models.mrp;

import integration.models.website.OrderMessage;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.ArrayList;
import java.util.List;

public class ShipmentRecord {
    private String orderId;
    private String deliveryDate;
    private List<ShipmentEventInfo> events;
    private DeliveryAddress deliveryAddress;
    private String contactName;
    private PhoneInfo primaryContactPhone;
    private PhoneInfo alternateContactPhone;

    public ShipmentRecord() {
        this.setEvents(new ArrayList());
    }

    public ShipmentRecord(OrderMessage message, String orderId) {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-ddTHH:mm:ss");
        Calendar c = Calendar.getInstance();
        c.add(Calendar.DATE, 14);
        
        setEvents(new ArrayList());
        setOrderId(orderId);
        setDeliveryDate(dateFormat.format(c));
        setDeliveryAddress(new DeliveryAddress(message.getAddress(), message.getCity(), message.getState(), message.getPostalCode()));
        setContactName(message.getCustomerName());
        setPrimaryContactPhone(new PhoneInfo(message.getPhone()));
    }

    public String getOrderId() {
        return orderId;
    }

    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }

    public String getDeliveryDate() {
        return deliveryDate;
    }

    public void setDeliveryDate(String deliveryDate) {
        this.deliveryDate = deliveryDate;
    }

    public List<ShipmentEventInfo> getEvents() {
        return events;
    }

    public void setEvents(List<ShipmentEventInfo> events) {
        this.events = events;
    }

    public DeliveryAddress getDeliveryAddress() {
        return deliveryAddress;
    }

    public void setDeliveryAddress(DeliveryAddress deliveryAddress) {
        this.deliveryAddress = deliveryAddress;
    }

    public String getContactName() {
        return contactName;
    }

    public void setContactName(String contactName) {
        this.contactName = contactName;
    }

    public PhoneInfo getPrimaryContactPhone() {
        return primaryContactPhone;
    }

    public void setPrimaryContactPhone(PhoneInfo primaryContactPhone) {
        this.primaryContactPhone = primaryContactPhone;
    }

    public PhoneInfo getAlternateContactPhone() {
        return alternateContactPhone;
    }

    public void setAlternateContactPhone(PhoneInfo alternateContactPhone) {
        this.alternateContactPhone = alternateContactPhone;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/website/OrderItem.java
================================================
package integration.models.website;

/**
 * This class is used to describe a product of the order from the website.
 */
public class OrderItem {
    private String skuNumber;
    private double price;

    public String getSkuNumber() {
        return skuNumber;
    }

    public void setSkuNumber(String skuNumber) {
        this.skuNumber = skuNumber;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/website/OrderMessage.java
================================================
package integration.models.website;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import java.util.List;

/**
 * This class is responsible for describing the order message that we receive from the website.
 */
@JsonIgnoreProperties(ignoreUnknown = true)
public class OrderMessage {
    private String customerName;
    private String dealerName;
    private String orderDate;
    private String address;
    private String country;
    private String phone;
    private String city;
    private String postalCode;
    private String state;
    private double totalCost;
    private double discount;
    private List<OrderItem> items;

    public String getCustomerName() {
        return customerName;
    }

    public void setCustomerName(String customerName) {
        this.customerName = customerName;
    }

    public String getDealerName() {
        return dealerName;
    }

    public void setDealerName(String dealerName) {
        this.dealerName = dealerName;
    }

    public String getOrderDate() {
        return orderDate;
    }

    public void setOrderDate(String orderDate) {
        this.orderDate = orderDate;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getPostalCode() {
        return postalCode;
    }

    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }

    public String getState() {
        return state;
    }

    public void setState(String state) {
        this.state = state;
    }

    public double getTotalCost() {
        return totalCost;
    }

    public void setTotalCost(double totalCost) {
        this.totalCost = totalCost;
    }

    public List<OrderItem> getItems() {
        return items;
    }

    public void setItems(List<OrderItem> items) {
        this.items = items;
    }

    public double getDiscount() {
        return discount;
    }

    public void setDiscount(double discount) {
        this.discount = discount;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/website/ProductItem.java
================================================
package integration.models.website;

import integration.models.mrp.CatalogItem;

/**
 * This class is used to describe the updates to the website product.
 */
public class ProductItem {

    private String skuNumber;
    private int inventory;
    private int leadTime;

    public ProductItem(){

    }

    public ProductItem(CatalogItem catalogItem){
        setInventory(catalogItem.getInventory());
        setSkuNumber(catalogItem.getSkuNumber());
        setLeadTime(catalogItem.getLeadTime());
    }

    public int getInventory() {
        return inventory;
    }

    public void setInventory(int inventory) {
        this.inventory = inventory;
    }

    public String getSkuNumber() {
        return skuNumber;
    }

    public void setSkuNumber(String skuNumber) {
        this.skuNumber = skuNumber;
    }

    public int getLeadTime() {
        return leadTime;
    }

    public void setLeadTime(int leadTime) {
        this.leadTime = leadTime;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/models/website/ProductMessage.java
================================================
package integration.models.website;

import integration.models.mrp.CatalogItem;
import java.util.ArrayList;
import java.util.List;

/**
 * This class is used to describe the list of products for the website to update.
 */
public class ProductMessage {

    private List<ProductItem> productList;

    public ProductMessage(){
        setProductList(new ArrayList<ProductItem>());
    }

    public ProductMessage(List<CatalogItem> catalogItems) {
        this();
        for(CatalogItem catalogItem: catalogItems){
            ProductItem inventoryItem = new ProductItem(catalogItem);
            this.productList.add(inventoryItem);
        }
    }

    public List<ProductItem> getProductList() {
        return productList;
    }

    public void setProductList(List<ProductItem> productList) {
        this.productList = productList;
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/scheduled/CreateOrderProcessTask.java
================================================
package integration.scheduled;

import integration.Constants;
import integration.infrastructure.ConfigurationManager;
import integration.models.QueueResponse;
import integration.models.website.OrderMessage;
import integration.services.MrpConnectService;
import integration.services.QueueService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;

/**
 * Scheduled task for retrieving any new orders from the queue and integrating them into the MRP system.
 */
@EnableScheduling
public class CreateOrderProcessTask {

    private final static Logger log = LoggerFactory.getLogger(CreateOrderProcessTask.class);

    @Scheduled(fixedDelay = Constants.SCHEDULED_INTERVAL)
    public void scheduledTask() {
        try {
            String endpoint = ConfigurationManager.getMrpEndpoint();
            MrpConnectService mrpService = new MrpConnectService(endpoint);
            QueueService queueService = new QueueService(ConfigurationManager.getAzureOrderQueue(), OrderMessage.class);
            QueueResponse<OrderMessage> response;

            while ((response = queueService.getQueueMessage()) != null) {
                log.info("Found queue message. MessageId :" + response.getQueueMessage().getMessageId());
                mrpService.createNewOrder(response.getResponseBody());
                log.info("Created new order in MRP system. MessageId :" + response.getQueueMessage().getMessageId());
                queueService.deleteQueueMessage(response.getQueueMessage());
                log.info("Message removed from queue. MessageId :" + response.getQueueMessage().getMessageId());
            }
        } catch (Exception ex) {
            log.error("Exception thrown while retrieving queue message :" + ex.toString());
        }
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/scheduled/UpdateProductProcessTask.java
================================================
package integration.scheduled;

import integration.Constants;
import integration.infrastructure.ConfigurationManager;
import integration.models.mrp.CatalogItem;
import integration.models.website.ProductMessage;
import integration.services.MrpConnectService;
import integration.services.QueueService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;

import java.util.List;

/**
 * Scheduled tasks for querying the MRP system for catalog items and sending an update to the website.
 */
@EnableScheduling
public class UpdateProductProcessTask {
    private final static Logger log = LoggerFactory.getLogger(UpdateProductProcessTask.class);

    @Scheduled(fixedDelay = Constants.SCHEDULED_INTERVAL)
    public void scheduledTask() {
        try{
            MrpConnectService mrpService = new MrpConnectService(ConfigurationManager.getMrpEndpoint());
            List<CatalogItem> catalogItems = mrpService.getCatalogItems();

            if (catalogItems != null && !catalogItems.isEmpty()){
                ProductMessage message = new ProductMessage(catalogItems);
                QueueService queueService = new QueueService(ConfigurationManager.getAzureInventoryQueue(), ProductMessage.class);
                queueService.addQueueMessage(message);
            }
        }
        catch (Exception ex)
        {
            log.error("Exception thrown while processing catalog item inventory :" + ex.toString());
        }
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/services/MrpConnectService.java
================================================
package integration.services;

import integration.models.website.OrderMessage;
import integration.models.mrp.CatalogItem;
import integration.models.mrp.Order;
import integration.models.mrp.Quote;
import integration.models.mrp.ShipmentRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.List;

/**
 * This service is responsible for communication to the MRP system.
 */
public class MrpConnectService {

    private final static Logger log = LoggerFactory.getLogger(MrpConnectService.class);
    private String hostName;
    private RestTemplate restTemplate;

    public MrpConnectService(String hostName) {
        this.hostName = hostName;
        this.restTemplate = new RestTemplate();
    }

    /**
     * Crates a new Quote, Order and Shipment in the MRP system
     * @param message the new order message from website
     * @throws MalformedURLException
     */
    public void createNewOrder(OrderMessage message) throws MalformedURLException {
        Quote quote = createQuote(message);
        log.info("Quote Created. Quote Id : " + quote.getQuoteId());
        Order order = createOrder(quote.getQuoteId());
        log.info("Order Created. Quote Id : " + quote.getQuoteId() + "  Order Id : " + order.getOrderId());
        createShipment(message, order.getOrderId());
        log.info("Shipment Created. Quote Id : " + quote.getQuoteId() + "  Order Id : " + order.getOrderId());
    }

    /**
     * Uses the customer address to build a shipment for the orderId.
     * @param message - Website Order
     * @param orderId - Id of order created in the MRP system
     * @throws MalformedURLException
     */
    private void createShipment(OrderMessage message, String orderId) throws MalformedURLException {
        String uri = UriComponentsBuilder.fromUriString(hostName).path("shipments").build().toUriString();
        ShipmentRecord newShipmentRecord = new ShipmentRecord(message, orderId);
        restTemplate.postForObject(uri, newShipmentRecord, ShipmentRecord.class);
    }

    /**
     * Posts the quote id to the MRP system to confirm the order.
     * @param quoteId - Id of the quote that you wish to fulfill.
     * @return Order - the newly created order including the id created in the MRP system.
     */
    private Order createOrder(String quoteId) {
        String uri = UriComponentsBuilder.fromUriString(hostName).path("orders").queryParam("fromQuote", quoteId).build().toUriString();
        Order createdOrder = restTemplate.postForObject(uri, null, Order.class);
        return createdOrder;
    }

    /**
     * Takes all of the information about the order to create the inital quote.
     * @param message - Website Order
     * @return Quote - the newly created quote including the id created in the MRP system.
     */
    private Quote createQuote(OrderMessage message) {
        String uri = UriComponentsBuilder.fromUriString(hostName).path("quotes").build().toUriString();
        Quote newQuote = new Quote(message);
        Quote createdQuote = restTemplate.postForObject(uri, newQuote, Quote.class);
        return createdQuote;
    }

    /**
     * Queries the MRP system for the catalog.
     * @return List<CatalogItem> - list of all catalog items in the MRP system.
     */
    public List<CatalogItem> getCatalogItems() {
        String uri = UriComponentsBuilder.fromUriString(hostName).pathSegment("catalog").build().toUriString();

        ArrayList<CatalogItem> CatalogList = new ArrayList<CatalogItem>();
        for (CatalogItem catalog : restTemplate.getForObject(uri, CatalogItem[].class)){
            CatalogList.add(catalog);
        }
        return CatalogList;
    }
}


================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/services/QueueFactory.java
================================================
package integration.services;

import com.microsoft.azure.storage.CloudStorageAccount;
import com.microsoft.azure.storage.StorageException;
import com.microsoft.azure.storage.queue.CloudQueue;
import com.microsoft.azure.storage.queue.CloudQueueClient;
import integration.infrastructure.ConfigurationManager;

import java.net.URISyntaxException;
import java.security.InvalidKeyException;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * The queue factory is responsible for initializing and locating the queues a thread safe manner.
 */
public class QueueFactory {

    private static Map<String, CloudQueue> s_queueDictionary;

    /**
     * get queue will return the named queue, initializing a new queue in the case it does not already exist.
     * @param queueKey - The name of the cloud queue to search for.
     * @return com.microsoft.azure.storage.queue.CloudQueue
     * @throws StorageException
     * @throws URISyntaxException
     * @throws InvalidKeyException
     */
    public static CloudQueue getQueue(String queueKey) throws StorageException, URISyntaxException, InvalidKeyException {
        if (s_queueDictionary == null) {
            // http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentHashMap.html
            // Ensuring if we are thread safe for setting and getting cloud queues.
            s_queueDictionary = new ConcurrentHashMap();
        }

        if (s_queueDictionary.containsKey(queueKey)) {
            return s_queueDictionary.get(queueKey);
        } else {
            // Retrieve storage account from connection-string.
            CloudStorageAccount storageAccount = CloudStorageAccount.parse(ConfigurationManager.getAzureStorageConnectionString());
            // Create the queue client.
            CloudQueueClient queueClient = storageAccount.createCloudQueueClient();
            // Retrieve a reference to a queue.
            CloudQueue queue = queueClient.getQueueReference(queueKey);
            // Create the queue if it doesn't already exist.
            queue.createIfNotExists();

            s_queueDictionary.put(queueKey, queue);
            return queue;
        }
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/java/integration/services/QueueService.java
================================================
package integration.services;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.microsoft.azure.storage.StorageException;
import com.microsoft.azure.storage.queue.CloudQueue;
import com.microsoft.azure.storage.queue.CloudQueueMessage;
import integration.infrastructure.ConfigurationManager;
import integration.models.QueueResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.net.URISyntaxException;
import java.security.InvalidKeyException;

/**
 * The queue service responsible for resolving all calls to azure queues.
 * @param <T> T is the message type is used for the serialization and de-serialization.
 */
public class QueueService <T> {

    private final static Logger log = LoggerFactory.getLogger(MrpConnectService.class);
    private final String queueName;
    private Class<T> valueType;

    public QueueService(String queueName, Class<T> valueType) {

        this.queueName = queueName;
        this.valueType = valueType;
    }

    /**
     * Retrieve a message off the configured queue.
     * @return A queue response object that host a reference to the queue message and the de-serialized content.
     * If not queue message is found or the message is malformed, null will be returned.
     * @throws StorageException
     * @throws URISyntaxException
     * @throws InvalidKeyException
     */
    public QueueResponse getQueueMessage() throws StorageException, URISyntaxException, InvalidKeyException {
        CloudQueue queue = QueueFactory.getQueue(queueName);
        CloudQueueMessage message = queue.retrieveMessage(ConfigurationManager.getAzureQueueTimeout(), null /*options*/, null /*opContext*/);

        if (message == null) {
            return null;
        }

        // If a queue message is successfully retrieved de-serialize it and return.
        String messageString = message.getMessageContentAsString();
        try {
            ObjectMapper mapper = new ObjectMapper();
            T messageContent = mapper.readValue(messageString, this.valueType);
            QueueResponse response = new QueueResponse(message, messageContent);
            return response;
        } catch (IOException ex) {
            log.error("An error occurred de-serializing queue message to OrderMessage. Serialized Object : " + messageString);
            deleteQueueMessage(message);
            return null;
        }
    }

    /**
     * Delete a processed message off the configured queue
     * @param message - The cloud queue message that is returned during retrieval.
     * @throws StorageException
     * @throws URISyntaxException
     * @throws InvalidKeyException
     */
    public void deleteQueueMessage(CloudQueueMessage message) throws StorageException, URISyntaxException, InvalidKeyException {
        CloudQueue queue = QueueFactory.getQueue(queueName);
        queue.deleteMessage(message);
    }

    /**
     * Serialize and add a object to the configured queue.
     * @param queueContent - the object to add to the queue.
     * @throws StorageException
     * @throws URISyntaxException
     * @throws InvalidKeyException
     * @throws JsonProcessingException
     */
    public void addQueueMessage(T queueContent) throws StorageException, URISyntaxException, InvalidKeyException, JsonProcessingException {
        CloudQueue queue = QueueFactory.getQueue(queueName);
        ObjectMapper mapper = new ObjectMapper();
        byte[] queueByteContent = mapper.writeValueAsBytes(queueContent);
        CloudQueueMessage message = new CloudQueueMessage(queueByteContent);
        queue.addMessage(message);
    }
}



================================================
FILE: src/Backend/IntegrationService/src/main/resources/application.properties
================================================
azure.storage.connectionstring: DefaultEndpointsProtocol=https;AccountName=datastoreleef;AccountKey=AbUxxr9hvFqz62sqnoxi82WO1B6YsnBEwvJhweJ3g2efrKfZ+MfSJ6WvCpT/rQ+wfh/dCoLb4MrByP3AsQLIQQ==
azure.storage.queue.orders: orders
azure.storage.queue.inventory: product
azure.storage.queue.message: 300

mrp.endpoint: http://127.0.0.1:8080/

logging.file: integration-service.log
logging.level.org.springframework.web: INFO


================================================
FILE: src/Backend/OrderService/README
================================================
﻿Fabrikam Development Status

At this point, a skeleton of the service REST API is in place. Quotes can be created and queried, catalog item can be
added to the catalog, dealers added and listed, and orders can be created from quotes.

Here are some sample Fiddler requests (the user agent can be anything, of course):

List items in the catalog:

GET /catalog HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080

Add an item to the catalog with SKU # 'MRP-004':

POST /catalog HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080
Content-Type: application/json

{"skuNumber" : "MRP-0004", "description" : "Break Calipers Guide Pin Boot Kit", "price" : 8.99, "inventory" : 10, "leadTime" : 5}


Get a list of all the known dealers in the system:

GET /dealers HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080


Add a new dealer called 'BigJoe':

POST /dealers HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080
Content-Type: application/json

{"name":"BigJoe","contact":"John Doe","address":"123 Main Street, Redmond, WA 98052","email":"jdoe@tempuri.org", "phone":"425-555-1212"}


Get information on a given quote:

GET /quotes/quote-1 HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080


Get all quotes for customers containing the string 'Little Inn'

GET /quotes?name=Little%20Inn HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080


Delete a given quote from the system:

DELETE /quotes/quote-1 HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080


Create a new quote (the quote id is returned in the Location header of the response):

POST /quotes HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080
Content-Type: application/json

{"customerName":"The Little Inn by the Bay",
  "dealerName":"BigJoe",
  "comments":"Here is your quote for our top-of-the-line fridge unit.",
  "terms":"60 days",
  "validUntil":"12/1/14",
  "unitDescription":"CoolnessExtreme",
  "additionalItems":[
    {"skuNumber":"MRP-0001","amount":100.0},
    {"skuNumber":"MRP-0002","amount":2.0}
  ],
  "unitCost":12000.0,
  "totalCost":18050.0,
  "discount":1500.0,
  "height":2.5,
  "width":5.0,
  "depth":8.0,
  "unit":"meters",
  "purpose":"Refrigerator",
  "ambientPeak":25.0,
  "ambientAverage":21.0,
  "buildOnSite":true,
  "city":"Wellfleet",
  "postalCode":"02667",
  "state":"MA"}


Update an existing quote:

PUT /quotes/quote-1 HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080
Content-Type: application/json

{"customerName":"The Little Inn by the Bay",
  "dealerName":"LittleJoe",
  "comments":"Here is your quote for our top-of-the-line fridge unit.",
  "terms":"60 days",
  "validUntil":"12/1/14",
  "unitDescription":"CoolnessExtreme",
  "additionalItems":[
    {"skuNumber":"ACC-0001", "amount":150.0},
    {"skuNumber":"ACC-0003", "amount":1.0},
    {"skuNumber":"ACC-0004", "amount":50.0}
  ],
  "unitCost":12000.0,
  "totalCost":18050.0,
  "discount":1500.0,
  "height":2.5,
  "width":5.0,
  "depth":8.0,
  "unit":"meters",
  "purpose":"Refrigerator",
  "ambientPeak":25.0,
  "ambientAverage":21.0,
  "buildOnSite":true,
  "city":"Wellfleet",
  "postalCode":"02667",
  "state":"MA"}


Get the given order:

GET /orders/order-quote-1  HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080

Get all orders for a given dealer, identified by name:

GET /orders?dealer=BigJoe  HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080

Get all orders for a given dealer, identified by name. Filter by status.

GET /orders?dealer=BigJoe&status=Confirmed  HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080


Create a new order from a quote. The order id is returned in the 'Location' header of the response.

POST /orders?fromQuote=quote-1  HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080


List all shipments, regardless of status

GET /shipments  HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080

List all shipments of a given status

GET /shipments?status=Created  HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080

Get the details of a specific shipment record

GET /shipments/order-quote-1  HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080

Create a new shipment record (only one per order)

POST /shipments  HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080
Content-Type: application/json

{ "orderId":"order-quote-1",
   "contactName":"Jane Smith",
   "deliveryAddress":{"street":"123 Main St.","city":"Redmond","state":"WA","postalCode":"98052","specialInstructions":"Look for a yellow house" },
   "primaryContactPhone": {"kind":"Mobile", "phoneNumber":"425-555-1212"},
   "alternateContactPhone": {"kind":"Work", "phoneNumber":"425-555-1213"},
   "events": [] }

Modify an existing shipment record. Missing fields will be overwritten with null

PUT /shipments/order-quote-1  HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080
Content-Type: application/json

{ "orderId":"order-quote-1",
   "contactName":"John Smith",
   "deliveryAddress":{"street":"123 Main St.","city":"Redmond","state":"WA","postalCode":"98052","specialInstructions":"Look for a yellow house" },
   "primaryContactPhone": {"kind":"Mobile", "phoneNumber":"425-555-1212"},
   "alternateContactPhone": {"kind":"Work", "phoneNumber":"425-555-1213"},
   "events": [] }

Add a comment to the shipment.

POST /shipments/order-quote-1/events HTTP/1.1
User-Agent: Fiddler
Host: localhost:8080
Content-Type: application/json

{"comments":"Coming from Fiddler"}




On OS X, curl is the best tool to use, but it's more complex. The 'scripts' directory contains a number of files to test things with.

To go through dealer and catalog update, quote creation and update, then order creation, issue the following from
the scripts directory:

./setup.sh
./update.sh
./createorder.sh



================================================
FILE: src/Backend/OrderService/README.md
================================================
# Building the OrderService #
The following command is used to build the OderService WAR file.

## Clone the GitHub repository ###

Prior to building, you should have cloned the git repository with the following command (assuming you have git installed already).

### Installing git ###
The following provides examples for obtaining git for Windows and Ubuntu Linux.

#### Windows ####
By far the easiest way to get git for Windows is use the GitHub installer that provides the command line interface along with a Windows client that makes managing and working with git easier and visual.

Navigate to [http://windows.github.com](http://windows.github.com).  Click on the 'Download GitHub for Windows'

When done, there will be 2 GitHub shortcuts created.  Open the "Git Shell".  This will be a PowerShell session with git and [POSH-GIT](https://github.com/dahlbyk/posh-git) ready to go.

```
cd <Some Local Path Where Child Directories will be Git Repositories>

# clone the repository and replace the <http://.....> path with the URL of the git repository
git clone https://github.com/Microsoft/PartsUnlimitedMRP.git 

#switch to the path.
cd PartsUnlimitedMRP
```
After this you will be in the Root of the cloned repository ready to build.

#### Linux ####
Assuming you are using Ubuntu 14+, utilize the Debian package manager.

```
cd ~/
# update package info from Ubuntu
sudo apt-get update

# run the install for git
sudo apt-get install git

# clone the repository and replace the <http://.....> path with the URL of the git repository
git clone https://github.com/Microsoft/PartsUnlimitedMRP.git

# switch to the path
cd PartsUnlimitedMRP
```
After this you will be in the Root of the cloned repository ready to build.

## Building ##

The following commands are used to build the ```ordering-service-0.1.0.jar``` file from the sources located in the clone of the git repository.

change to the ```./src/Backend/OrderService``` directory.


### Windows ###
From a PowerShell or CMD shell, run the following command.

```
.\gradlew.bat build

```

### Linux ###

```
#make sure you have the JDK installed. assumes Ubuntu 14.04 LTS.
sudo apt-get install default-jdk
```

At this point exit and restart your bash session to pick up the new settings. Or run ```. .profile  ``` from your home ```~/```

```
# ensure the 'gradlew' is executable
chmod +x gradlew

# now build...
./gradlew build
```

The build will run for a bit and will also run some tests. When done, the output it placed in the ```./builds/libs``` directory.

This creates the ```ordering-service-0.1.0.jar``` in the ```./build/libs``` directory.

## Cleaning all builds ##

### Windows ###
Run ```removeBuild.bat``` to remove the ```./build``` and the ```./buildSrc/build``` directories.

### Linux ###

Run the following native command:
```
rm -rf ./build ./buildSrc/build
```
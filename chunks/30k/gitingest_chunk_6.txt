




================================================
FILE: src/Clients/Web/js/date.js
================================================
/**
 * Version: 1.0 Alpha-1 
 * Build Date: 13-Nov-2007
 * Copyright (c) 2006-2007, Coolite Inc. (http://www.coolite.com/). All rights reserved.
 * License: Licensed under The MIT License. See license.txt and http://www.datejs.com/license/. 
 * Website: http://www.datejs.com/ or http://www.coolite.com/datejs/
 */
Date.CultureInfo={name:"en-US",englishName:"English (United States)",nativeName:"English (United States)",dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],abbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],shortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],firstLetterDayNames:["S","M","T","W","T","F","S"],monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],abbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],amDesignator:"AM",pmDesignator:"PM",firstDayOfWeek:0,twoDigitYearMax:2029,dateElementOrder:"mdy",formatPatterns:{shortDate:"M/d/yyyy",longDate:"dddd, MMMM dd, yyyy",shortTime:"h:mm tt",longTime:"h:mm:ss tt",fullDateTime:"dddd, MMMM dd, yyyy h:mm:ss tt",sortableDateTime:"yyyy-MM-ddTHH:mm:ss",universalSortableDateTime:"yyyy-MM-dd HH:mm:ssZ",rfc1123:"ddd, dd MMM yyyy HH:mm:ss GMT",monthDay:"MMMM dd",yearMonth:"MMMM, yyyy"},regexPatterns:{jan:/^jan(uary)?/i,feb:/^feb(ruary)?/i,mar:/^mar(ch)?/i,apr:/^apr(il)?/i,may:/^may/i,jun:/^jun(e)?/i,jul:/^jul(y)?/i,aug:/^aug(ust)?/i,sep:/^sep(t(ember)?)?/i,oct:/^oct(ober)?/i,nov:/^nov(ember)?/i,dec:/^dec(ember)?/i,sun:/^su(n(day)?)?/i,mon:/^mo(n(day)?)?/i,tue:/^tu(e(s(day)?)?)?/i,wed:/^we(d(nesday)?)?/i,thu:/^th(u(r(s(day)?)?)?)?/i,fri:/^fr(i(day)?)?/i,sat:/^sa(t(urday)?)?/i,future:/^next/i,past:/^last|past|prev(ious)?/i,add:/^(\+|after|from)/i,subtract:/^(\-|before|ago)/i,yesterday:/^yesterday/i,today:/^t(oday)?/i,tomorrow:/^tomorrow/i,now:/^n(ow)?/i,millisecond:/^ms|milli(second)?s?/i,second:/^sec(ond)?s?/i,minute:/^min(ute)?s?/i,hour:/^h(ou)?rs?/i,week:/^w(ee)?k/i,month:/^m(o(nth)?s?)?/i,day:/^d(ays?)?/i,year:/^y((ea)?rs?)?/i,shortMeridian:/^(a|p)/i,longMeridian:/^(a\.?m?\.?|p\.?m?\.?)/i,timezone:/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt)/i,ordinalSuffix:/^\s*(st|nd|rd|th)/i,timeContext:/^\s*(\:|a|p)/i},abbreviatedTimeZoneStandard:{GMT:"-000",EST:"-0400",CST:"-0500",MST:"-0600",PST:"-0700"},abbreviatedTimeZoneDST:{GMT:"-000",EDT:"-0500",CDT:"-0600",MDT:"-0700",PDT:"-0800"}};
Date.getMonthNumberFromName=function(name){var n=Date.CultureInfo.monthNames,m=Date.CultureInfo.abbreviatedMonthNames,s=name.toLowerCase();for(var i=0;i<n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){return i;}}
return-1;};Date.getDayNumberFromName=function(name){var n=Date.CultureInfo.dayNames,m=Date.CultureInfo.abbreviatedDayNames,o=Date.CultureInfo.shortestDayNames,s=name.toLowerCase();for(var i=0;i<n.length;i++){if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){return i;}}
return-1;};Date.isLeapYear=function(year){return(((year%4===0)&&(year%100!==0))||(year%400===0));};Date.getDaysInMonth=function(year,month){return[31,(Date.isLeapYear(year)?29:28),31,30,31,30,31,31,30,31,30,31][month];};Date.getTimezoneOffset=function(s,dst){return(dst||false)?Date.CultureInfo.abbreviatedTimeZoneDST[s.toUpperCase()]:Date.CultureInfo.abbreviatedTimeZoneStandard[s.toUpperCase()];};Date.getTimezoneAbbreviation=function(offset,dst){var n=(dst||false)?Date.CultureInfo.abbreviatedTimeZoneDST:Date.CultureInfo.abbreviatedTimeZoneStandard,p;for(p in n){if(n[p]===offset){return p;}}
return null;};Date.prototype.clone=function(){return new Date(this.getTime());};Date.prototype.compareTo=function(date){if(isNaN(this)){throw new Error(this);}
if(date instanceof Date&&!isNaN(date)){return(this>date)?1:(this<date)?-1:0;}else{throw new TypeError(date);}};Date.prototype.equals=function(date){return(this.compareTo(date)===0);};Date.prototype.between=function(start,end){var t=this.getTime();return t>=start.getTime()&&t<=end.getTime();};Date.prototype.addMilliseconds=function(value){this.setMilliseconds(this.getMilliseconds()+value);return this;};Date.prototype.addSeconds=function(value){return this.addMilliseconds(value*1000);};Date.prototype.addMinutes=function(value){return this.addMilliseconds(value*60000);};Date.prototype.addHours=function(value){return this.addMilliseconds(value*3600000);};Date.prototype.addDays=function(value){return this.addMilliseconds(value*86400000);};Date.prototype.addWeeks=function(value){return this.addMilliseconds(value*604800000);};Date.prototype.addMonths=function(value){var n=this.getDate();this.setDate(1);this.setMonth(this.getMonth()+value);this.setDate(Math.min(n,this.getDaysInMonth()));return this;};Date.prototype.addYears=function(value){return this.addMonths(value*12);};Date.prototype.add=function(config){if(typeof config=="number"){this._orient=config;return this;}
var x=config;if(x.millisecond||x.milliseconds){this.addMilliseconds(x.millisecond||x.milliseconds);}
if(x.second||x.seconds){this.addSeconds(x.second||x.seconds);}
if(x.minute||x.minutes){this.addMinutes(x.minute||x.minutes);}
if(x.hour||x.hours){this.addHours(x.hour||x.hours);}
if(x.month||x.months){this.addMonths(x.month||x.months);}
if(x.year||x.years){this.addYears(x.year||x.years);}
if(x.day||x.days){this.addDays(x.day||x.days);}
return this;};Date._validate=function(value,min,max,name){if(typeof value!="number"){throw new TypeError(value+" is not a Number.");}else if(value<min||value>max){throw new RangeError(value+" is not a valid value for "+name+".");}
return true;};Date.validateMillisecond=function(n){return Date._validate(n,0,999,"milliseconds");};Date.validateSecond=function(n){return Date._validate(n,0,59,"seconds");};Date.validateMinute=function(n){return Date._validate(n,0,59,"minutes");};Date.validateHour=function(n){return Date._validate(n,0,23,"hours");};Date.validateDay=function(n,year,month){return Date._validate(n,1,Date.getDaysInMonth(year,month),"days");};Date.validateMonth=function(n){return Date._validate(n,0,11,"months");};Date.validateYear=function(n){return Date._validate(n,1,9999,"seconds");};Date.prototype.set=function(config){var x=config;if(!x.millisecond&&x.millisecond!==0){x.millisecond=-1;}
if(!x.second&&x.second!==0){x.second=-1;}
if(!x.minute&&x.minute!==0){x.minute=-1;}
if(!x.hour&&x.hour!==0){x.hour=-1;}
if(!x.day&&x.day!==0){x.day=-1;}
if(!x.month&&x.month!==0){x.month=-1;}
if(!x.year&&x.year!==0){x.year=-1;}
if(x.millisecond!=-1&&Date.validateMillisecond(x.millisecond)){this.addMilliseconds(x.millisecond-this.getMilliseconds());}
if(x.second!=-1&&Date.validateSecond(x.second)){this.addSeconds(x.second-this.getSeconds());}
if(x.minute!=-1&&Date.validateMinute(x.minute)){this.addMinutes(x.minute-this.getMinutes());}
if(x.hour!=-1&&Date.validateHour(x.hour)){this.addHours(x.hour-this.getHours());}
if(x.month!==-1&&Date.validateMonth(x.month)){this.addMonths(x.month-this.getMonth());}
if(x.year!=-1&&Date.validateYear(x.year)){this.addYears(x.year-this.getFullYear());}
if(x.day!=-1&&Date.validateDay(x.day,this.getFullYear(),this.getMonth())){this.addDays(x.day-this.getDate());}
if(x.timezone){this.setTimezone(x.timezone);}
if(x.timezoneOffset){this.setTimezoneOffset(x.timezoneOffset);}
return this;};Date.prototype.clearTime=function(){this.setHours(0);this.setMinutes(0);this.setSeconds(0);this.setMilliseconds(0);return this;};Date.prototype.isLeapYear=function(){var y=this.getFullYear();return(((y%4===0)&&(y%100!==0))||(y%400===0));};Date.prototype.isWeekday=function(){return!(this.is().sat()||this.is().sun());};Date.prototype.getDaysInMonth=function(){return Date.getDaysInMonth(this.getFullYear(),this.getMonth());};Date.prototype.moveToFirstDayOfMonth=function(){return this.set({day:1});};Date.prototype.moveToLastDayOfMonth=function(){return this.set({day:this.getDaysInMonth()});};Date.prototype.moveToDayOfWeek=function(day,orient){var diff=(day-this.getDay()+7*(orient||+1))%7;return this.addDays((diff===0)?diff+=7*(orient||+1):diff);};Date.prototype.moveToMonth=function(month,orient){var diff=(month-this.getMonth()+12*(orient||+1))%12;return this.addMonths((diff===0)?diff+=12*(orient||+1):diff);};Date.prototype.getDayOfYear=function(){return Math.floor((this-new Date(this.getFullYear(),0,1))/86400000);};Date.prototype.getWeekOfYear=function(firstDayOfWeek){var y=this.getFullYear(),m=this.getMonth(),d=this.getDate();var dow=firstDayOfWeek||Date.CultureInfo.firstDayOfWeek;var offset=7+1-new Date(y,0,1).getDay();if(offset==8){offset=1;}
var daynum=((Date.UTC(y,m,d,0,0,0)-Date.UTC(y,0,1,0,0,0))/86400000)+1;var w=Math.floor((daynum-offset+7)/7);if(w===dow){y--;var prevOffset=7+1-new Date(y,0,1).getDay();if(prevOffset==2||prevOffset==8){w=53;}else{w=52;}}
return w;};Date.prototype.isDST=function(){console.log('isDST');return this.toString().match(/(E|C|M|P)(S|D)T/)[2]=="D";};Date.prototype.getTimezone=function(){return Date.getTimezoneAbbreviation(this.getUTCOffset,this.isDST());};Date.prototype.setTimezoneOffset=function(s){var here=this.getTimezoneOffset(),there=Number(s)*-6/10;this.addMinutes(there-here);return this;};Date.prototype.setTimezone=function(s){return this.setTimezoneOffset(Date.getTimezoneOffset(s));};Date.prototype.getUTCOffset=function(){var n=this.getTimezoneOffset()*-10/6,r;if(n<0){r=(n-10000).toString();return r[0]+r.substr(2);}else{r=(n+10000).toString();return"+"+r.substr(1);}};Date.prototype.getDayName=function(abbrev){return abbrev?Date.CultureInfo.abbreviatedDayNames[this.getDay()]:Date.CultureInfo.dayNames[this.getDay()];};Date.prototype.getMonthName=function(abbrev){return abbrev?Date.CultureInfo.abbreviatedMonthNames[this.getMonth()]:Date.CultureInfo.monthNames[this.getMonth()];};Date.prototype._toString=Date.prototype.toString;Date.prototype.toString=function(format){var self=this;var p=function p(s){return(s.toString().length==1)?"0"+s:s;};return format?format.replace(/dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?/g,function(format){switch(format){case"hh":return p(self.getHours()<13?self.getHours():(self.getHours()-12));case"h":return self.getHours()<13?self.getHours():(self.getHours()-12);case"HH":return p(self.getHours());case"H":return self.getHours();case"mm":return p(self.getMinutes());case"m":return self.getMinutes();case"ss":return p(self.getSeconds());case"s":return self.getSeconds();case"yyyy":return self.getFullYear();case"yy":return self.getFullYear().toString().substring(2,4);case"dddd":return self.getDayName();case"ddd":return self.getDayName(true);case"dd":return p(self.getDate());case"d":return self.getDate().toString();case"MMMM":return self.getMonthName();case"MMM":return self.getMonthName(true);case"MM":return p((self.getMonth()+1));case"M":return self.getMonth()+1;case"t":return self.getHours()<12?Date.CultureInfo.amDesignator.substring(0,1):Date.CultureInfo.pmDesignator.substring(0,1);case"tt":return self.getHours()<12?Date.CultureInfo.amDesignator:Date.CultureInfo.pmDesignator;case"zzz":case"zz":case"z":return"";}}):this._toString();};
Date.now=function(){return new Date();};Date.today=function(){return Date.now().clearTime();};Date.prototype._orient=+1;Date.prototype.next=function(){this._orient=+1;return this;};Date.prototype.last=Date.prototype.prev=Date.prototype.previous=function(){this._orient=-1;return this;};Date.prototype._is=false;Date.prototype.is=function(){this._is=true;return this;};Number.prototype._dateElement="day";Number.prototype.fromNow=function(){var c={};c[this._dateElement]=this;return Date.now().add(c);};Number.prototype.ago=function(){var c={};c[this._dateElement]=this*-1;return Date.now().add(c);};(function(){var $D=Date.prototype,$N=Number.prototype;var dx=("sunday monday tuesday wednesday thursday friday saturday").split(/\s/),mx=("january february march april may june july august september october november december").split(/\s/),px=("Millisecond Second Minute Hour Day Week Month Year").split(/\s/),de;var df=function(n){return function(){if(this._is){this._is=false;return this.getDay()==n;}
return this.moveToDayOfWeek(n,this._orient);};};for(var i=0;i<dx.length;i++){$D[dx[i]]=$D[dx[i].substring(0,3)]=df(i);}
var mf=function(n){return function(){if(this._is){this._is=false;return this.getMonth()===n;}
return this.moveToMonth(n,this._orient);};};for(var j=0;j<mx.length;j++){$D[mx[j]]=$D[mx[j].substring(0,3)]=mf(j);}
var ef=function(j){return function(){if(j.substring(j.length-1)!="s"){j+="s";}
return this["add"+j](this._orient);};};var nf=function(n){return function(){this._dateElement=n;return this;};};for(var k=0;k<px.length;k++){de=px[k].toLowerCase();$D[de]=$D[de+"s"]=ef(px[k]);$N[de]=$N[de+"s"]=nf(de);}}());Date.prototype.toJSONString=function(){return this.toString("yyyy-MM-ddThh:mm:ssZ");};Date.prototype.toShortDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortDatePattern);};Date.prototype.toLongDateString=function(){return this.toString(Date.CultureInfo.formatPatterns.longDatePattern);};Date.prototype.toShortTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.shortTimePattern);};Date.prototype.toLongTimeString=function(){return this.toString(Date.CultureInfo.formatPatterns.longTimePattern);};Date.prototype.getOrdinal=function(){switch(this.getDate()){case 1:case 21:case 31:return"st";case 2:case 22:return"nd";case 3:case 23:return"rd";default:return"th";}};
(function(){Date.Parsing={Exception:function(s){this.message="Parse error at '"+s.substring(0,10)+" ...'";}};var $P=Date.Parsing;var _=$P.Operators={rtoken:function(r){return function(s){var mx=s.match(r);if(mx){return([mx[0],s.substring(mx[0].length)]);}else{throw new $P.Exception(s);}};},token:function(s){return function(s){return _.rtoken(new RegExp("^\s*"+s+"\s*"))(s);};},stoken:function(s){return _.rtoken(new RegExp("^"+s));},until:function(p){return function(s){var qx=[],rx=null;while(s.length){try{rx=p.call(this,s);}catch(e){qx.push(rx[0]);s=rx[1];continue;}
break;}
return[qx,s];};},many:function(p){return function(s){var rx=[],r=null;while(s.length){try{r=p.call(this,s);}catch(e){return[rx,s];}
rx.push(r[0]);s=r[1];}
return[rx,s];};},optional:function(p){return function(s){var r=null;try{r=p.call(this,s);}catch(e){return[null,s];}
return[r[0],r[1]];};},not:function(p){return function(s){try{p.call(this,s);}catch(e){return[null,s];}
throw new $P.Exception(s);};},ignore:function(p){return p?function(s){var r=null;r=p.call(this,s);return[null,r[1]];}:null;},product:function(){var px=arguments[0],qx=Array.prototype.slice.call(arguments,1),rx=[];for(var i=0;i<px.length;i++){rx.push(_.each(px[i],qx));}
return rx;},cache:function(rule){var cache={},r=null;return function(s){try{r=cache[s]=(cache[s]||rule.call(this,s));}catch(e){r=cache[s]=e;}
if(r instanceof $P.Exception){throw r;}else{return r;}};},any:function(){var px=arguments;return function(s){var r=null;for(var i=0;i<px.length;i++){if(px[i]==null){continue;}
try{r=(px[i].call(this,s));}catch(e){r=null;}
if(r){return r;}}
throw new $P.Exception(s);};},each:function(){var px=arguments;return function(s){var rx=[],r=null;for(var i=0;i<px.length;i++){if(px[i]==null){continue;}
try{r=(px[i].call(this,s));}catch(e){throw new $P.Exception(s);}
rx.push(r[0]);s=r[1];}
return[rx,s];};},all:function(){var px=arguments,_=_;return _.each(_.optional(px));},sequence:function(px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;if(px.length==1){return px[0];}
return function(s){var r=null,q=null;var rx=[];for(var i=0;i<px.length;i++){try{r=px[i].call(this,s);}catch(e){break;}
rx.push(r[0]);try{q=d.call(this,r[1]);}catch(ex){q=null;break;}
s=q[1];}
if(!r){throw new $P.Exception(s);}
if(q){throw new $P.Exception(q[1]);}
if(c){try{r=c.call(this,r[1]);}catch(ey){throw new $P.Exception(r[1]);}}
return[rx,(r?r[1]:s)];};},between:function(d1,p,d2){d2=d2||d1;var _fn=_.each(_.ignore(d1),p,_.ignore(d2));return function(s){var rx=_fn.call(this,s);return[[rx[0][0],r[0][2]],rx[1]];};},list:function(p,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return(p instanceof Array?_.each(_.product(p.slice(0,-1),_.ignore(d)),p.slice(-1),_.ignore(c)):_.each(_.many(_.each(p,_.ignore(d))),px,_.ignore(c)));},set:function(px,d,c){d=d||_.rtoken(/^\s*/);c=c||null;return function(s){var r=null,p=null,q=null,rx=null,best=[[],s],last=false;for(var i=0;i<px.length;i++){q=null;p=null;r=null;last=(px.length==1);try{r=px[i].call(this,s);}catch(e){continue;}
rx=[[r[0]],r[1]];if(r[1].length>0&&!last){try{q=d.call(this,r[1]);}catch(ex){last=true;}}else{last=true;}
if(!last&&q[1].length===0){last=true;}
if(!last){var qx=[];for(var j=0;j<px.length;j++){if(i!=j){qx.push(px[j]);}}
p=_.set(qx,d).call(this,q[1]);if(p[0].length>0){rx[0]=rx[0].concat(p[0]);rx[1]=p[1];}}
if(rx[1].length<best[1].length){best=rx;}
if(best[1].length===0){break;}}
if(best[0].length===0){return best;}
if(c){try{q=c.call(this,best[1]);}catch(ey){throw new $P.Exception(best[1]);}
best[1]=q[1];}
return best;};},forward:function(gr,fname){return function(s){return gr[fname].call(this,s);};},replace:function(rule,repl){return function(s){var r=rule.call(this,s);return[repl,r[1]];};},process:function(rule,fn){return function(s){var r=rule.call(this,s);return[fn.call(this,r[0]),r[1]];};},min:function(min,rule){return function(s){var rx=rule.call(this,s);if(rx[0].length<min){throw new $P.Exception(s);}
return rx;};}};var _generator=function(op){return function(){var args=null,rx=[];if(arguments.length>1){args=Array.prototype.slice.call(arguments);}else if(arguments[0]instanceof Array){args=arguments[0];}
if(args){for(var i=0,px=args.shift();i<px.length;i++){args.unshift(px[i]);rx.push(op.apply(null,args));args.shift();return rx;}}else{return op.apply(null,arguments);}};};var gx="optional not ignore cache".split(/\s/);for(var i=0;i<gx.length;i++){_[gx[i]]=_generator(_[gx[i]]);}
var _vector=function(op){return function(){if(arguments[0]instanceof Array){return op.apply(null,arguments[0]);}else{return op.apply(null,arguments);}};};var vx="each any all".split(/\s/);for(var j=0;j<vx.length;j++){_[vx[j]]=_vector(_[vx[j]]);}}());(function(){var flattenAndCompact=function(ax){var rx=[];for(var i=0;i<ax.length;i++){if(ax[i]instanceof Array){rx=rx.concat(flattenAndCompact(ax[i]));}else{if(ax[i]){rx.push(ax[i]);}}}
return rx;};Date.Grammar={};Date.Translator={hour:function(s){return function(){this.hour=Number(s);};},minute:function(s){return function(){this.minute=Number(s);};},second:function(s){return function(){this.second=Number(s);};},meridian:function(s){return function(){this.meridian=s.slice(0,1).toLowerCase();};},timezone:function(s){return function(){var n=s.replace(/[^\d\+\-]/g,"");if(n.length){this.timezoneOffset=Number(n);}else{this.timezone=s.toLowerCase();}};},day:function(x){var s=x[0];return function(){this.day=Number(s.match(/\d+/)[0]);};},month:function(s){return function(){this.month=((s.length==3)?Date.getMonthNumberFromName(s):(Number(s)-1));};},year:function(s){return function(){var n=Number(s);this.year=((s.length>2)?n:(n+(((n+2000)<Date.CultureInfo.twoDigitYearMax)?2000:1900)));};},rday:function(s){return function(){switch(s){case"yesterday":this.days=-1;break;case"tomorrow":this.days=1;break;case"today":this.days=0;break;case"now":this.days=0;this.now=true;break;}};},finishExact:function(x){x=(x instanceof Array)?x:[x];var now=new Date();this.year=now.getFullYear();this.month=now.getMonth();this.day=1;this.hour=0;this.minute=0;this.second=0;for(var i=0;i<x.length;i++){if(x[i]){x[i].call(this);}}
this.hour=(this.meridian=="p"&&this.hour<13)?this.hour+12:this.hour;if(this.day>Date.getDaysInMonth(this.year,this.month)){throw new RangeError(this.day+" is not a valid value for days.");}
var r=new Date(this.year,this.month,this.day,this.hour,this.minute,this.second);if(this.timezone){r.set({timezone:this.timezone});}else if(this.timezoneOffset){r.set({timezoneOffset:this.timezoneOffset});}
return r;},finish:function(x){x=(x instanceof Array)?flattenAndCompact(x):[x];if(x.length===0){return null;}
for(var i=0;i<x.length;i++){if(typeof x[i]=="function"){x[i].call(this);}}
if(this.now){return new Date();}
var today=Date.today();var method=null;var expression=!!(this.days!=null||this.orient||this.operator);if(expression){var gap,mod,orient;orient=((this.orient=="past"||this.operator=="subtract")?-1:1);if(this.weekday){this.unit="day";gap=(Date.getDayNumberFromName(this.weekday)-today.getDay());mod=7;this.days=gap?((gap+(orient*mod))%mod):(orient*mod);}
if(this.month){this.unit="month";gap=(this.month-today.getMonth());mod=12;this.months=gap?((gap+(orient*mod))%mod):(orient*mod);this.month=null;}
if(!this.unit){this.unit="day";}
if(this[this.unit+"s"]==null||this.operator!=null){if(!this.value){this.value=1;}
if(this.unit=="week"){this.unit="day";this.value=this.value*7;}
this[this.unit+"s"]=this.value*orient;}
return today.add(this);}else{if(this.meridian&&this.hour){this.hour=(this.hour<13&&this.meridian=="p")?this.hour+12:this.hour;}
if(this.weekday&&!this.day){this.day=(today.addDays((Date.getDayNumberFromName(this.weekday)-today.getDay()))).getDate();}
if(this.month&&!this.day){this.day=1;}
return today.set(this);}}};var _=Date.Parsing.Operators,g=Date.Grammar,t=Date.Translator,_fn;g.datePartDelimiter=_.rtoken(/^([\s\-\.\,\/\x27]+)/);g.timePartDelimiter=_.stoken(":");g.whiteSpace=_.rtoken(/^\s*/);g.generalDelimiter=_.rtoken(/^(([\s\,]|at|on)+)/);var _C={};g.ctoken=function(keys){var fn=_C[keys];if(!fn){var c=Date.CultureInfo.regexPatterns;var kx=keys.split(/\s+/),px=[];for(var i=0;i<kx.length;i++){px.push(_.replace(_.rtoken(c[kx[i]]),kx[i]));}
fn=_C[keys]=_.any.apply(null,px);}
return fn;};g.ctoken2=function(key){return _.rtoken(Date.CultureInfo.regexPatterns[key]);};g.h=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2]|[1-9])/),t.hour));g.hh=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2])/),t.hour));g.H=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3]|[0-9])/),t.hour));g.HH=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3])/),t.hour));g.m=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.minute));g.mm=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.minute));g.s=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.second));g.ss=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.second));g.hms=_.cache(_.sequence([g.H,g.mm,g.ss],g.timePartDelimiter));g.t=_.cache(_.process(g.ctoken2("shortMeridian"),t.meridian));g.tt=_.cache(_.process(g.ctoken2("longMeridian"),t.meridian));g.z=_.cache(_.process(_.rtoken(/^(\+|\-)?\s*\d\d\d\d?/),t.timezone));g.zz=_.cache(_.process(_.rtoken(/^(\+|\-)\s*\d\d\d\d/),t.timezone));g.zzz=_.cache(_.process(g.ctoken2("timezone"),t.timezone));g.timeSuffix=_.each(_.ignore(g.whiteSpace),_.set([g.tt,g.zzz]));g.time=_.each(_.optional(_.ignore(_.stoken("T"))),g.hms,g.timeSuffix);g.d=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1]|\d)/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));g.dd=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1])/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));g.ddd=g.dddd=_.cache(_.process(g.ctoken("sun mon tue wed thu fri sat"),function(s){return function(){this.weekday=s;};}));g.M=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d|\d)/),t.month));g.MM=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d)/),t.month));g.MMM=g.MMMM=_.cache(_.process(g.ctoken("jan feb mar apr may jun jul aug sep oct nov dec"),t.month));g.y=_.cache(_.process(_.rtoken(/^(\d\d?)/),t.year));g.yy=_.cache(_.process(_.rtoken(/^(\d\d)/),t.year));g.yyy=_.cache(_.process(_.rtoken(/^(\d\d?\d?\d?)/),t.year));g.yyyy=_.cache(_.process(_.rtoken(/^(\d\d\d\d)/),t.year));_fn=function(){return _.each(_.any.apply(null,arguments),_.not(g.ctoken2("timeContext")));};g.day=_fn(g.d,g.dd);g.month=_fn(g.M,g.MMM);g.year=_fn(g.yyyy,g.yy);g.orientation=_.process(g.ctoken("past future"),function(s){return function(){this.orient=s;};});g.operator=_.process(g.ctoken("add subtract"),function(s){return function(){this.operator=s;};});g.rday=_.process(g.ctoken("yesterday tomorrow today now"),t.rday);g.unit=_.process(g.ctoken("minute hour day week month year"),function(s){return function(){this.unit=s;};});g.value=_.process(_.rtoken(/^\d\d?(st|nd|rd|th)?/),function(s){return function(){this.value=s.replace(/\D/g,"");};});g.expression=_.set([g.rday,g.operator,g.value,g.unit,g.orientation,g.ddd,g.MMM]);_fn=function(){return _.set(arguments,g.datePartDelimiter);};g.mdy=_fn(g.ddd,g.month,g.day,g.year);g.ymd=_fn(g.ddd,g.year,g.month,g.day);g.dmy=_fn(g.ddd,g.day,g.month,g.year);g.date=function(s){return((g[Date.CultureInfo.dateElementOrder]||g.mdy).call(this,s));};g.format=_.process(_.many(_.any(_.process(_.rtoken(/^(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/),function(fmt){if(g[fmt]){return g[fmt];}else{throw Date.Parsing.Exception(fmt);}}),_.process(_.rtoken(/^[^dMyhHmstz]+/),function(s){return _.ignore(_.stoken(s));}))),function(rules){return _.process(_.each.apply(null,rules),t.finishExact);});var _F={};var _get=function(f){return _F[f]=(_F[f]||g.format(f)[0]);};g.formats=function(fx){if(fx instanceof Array){var rx=[];for(var i=0;i<fx.length;i++){rx.push(_get(fx[i]));}
return _.any.apply(null,rx);}else{return _get(fx);}};g._formats=g.formats(["yyyy-MM-ddTHH:mm:ss","ddd, MMM dd, yyyy H:mm:ss tt","ddd MMM d yyyy HH:mm:ss zzz","d"]);g._start=_.process(_.set([g.date,g.time,g.expression],g.generalDelimiter,g.whiteSpace),t.finish);g.start=function(s){try{var r=g._formats.call({},s);if(r[1].length===0){return r;}}catch(e){}
return g._start.call({},s);};}());Date._parse=Date.parse;Date.parse=function(s){var r=null;if(!s){return null;}
try{r=Date.Grammar.start.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};Date.getParseFunction=function(fx){var fn=Date.Grammar.formats(fx);return function(s){var r=null;try{r=fn.call({},s);}catch(e){return null;}
return((r[1].length===0)?r[0]:null);};};Date.parseExact=function(s,fx){return Date.getParseFunction(fx)(s);};



================================================
FILE: src/Clients/Web/js/default.js
================================================
﻿// For an introduction to the Grid template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkID=232446
(function () {
    "use strict";

    var activation = null;
    var app = WinJS.Application;
    var nav = WinJS.Navigation;
    var sched = WinJS.Utilities.Scheduler;
    var ui = WinJS.UI;

    app.addEventListener("activated", function (args) {
        try {
            activation = Windows.ApplicationModel.Activation;
            if (args.detail.kind === activation.ActivationKind.launch) {
                if (args.detail.previousExecutionState !== activation.ApplicationExecutionState.terminated) {
                    // TODO: This application has been newly launched. Initialize
                    // your application here.
                } else {
                    // TODO: This application has been reactivated from suspension.
                    // Restore application state here.
                }
            }
        }
        catch (e) { }
        showProgress("Starting...");
        nav.history = app.sessionState.history || {};
        nav.history.current.initialPlaceholder = true;

        // Optimize the load of the application and while the splash screen is shown, execute high priority scheduled work.
        ui.disableAnimations();
        var p = ui.processAll().then(function () {
            Controls.EditTools.cacheControlTemplate();
            var navigationCommands = document.querySelectorAll('.navigationButton');
            for (var n = 0; n < navigationCommands.length; n++) {
                var navigationCommand = navigationCommands[n];
                navigationCommand.addEventListener('click', app.navbarInvoked);
            }
            hideProgress();
            return nav.navigate(nav.location || Application.navigator.home, nav.state);
        }).then(function () {
            return sched.requestDrain(sched.Priority.aboveNormal + 1);
        }).then(function () {
            ui.enableAnimations();
        });

        args.setPromise(p);
    });

    app.navbarInvoked = function (ev) {
        var navbarCommand = ev.currentTarget.winControl;
        if (navbarCommand.page == "main") {
            nav.back(nav.history.backStack.length);
        }
        else {
            var location = "pages/" + navbarCommand.page + "/" + navbarCommand.page + ".html";
            nav.navigate(location);
        }
        var trigger = document.querySelector(".nav-trigger");
        trigger.checked = false;
    }

    app.oncheckpoint = function (args) {
        // TODO: This application is about to be suspended. Save any state
        // that needs to persist across suspensions here. If you need to 
        // complete an asynchronous operation before your application is 
        // suspended, call args.setPromise().
        app.sessionState.history = nav.history;
    };

    app.start();
})();

logmessage = function (msg) {
    console.log(msg);
}

var _progressNeeded = false;

function showProgress(message) {
    _progressNeeded = true;
    WinJS.Promise.timeout(500).then(function () {
        if (!_progressNeeded) {
            return;
        }
        var progress = document.querySelector("#progressContainer");
        if (progress) {
            progress.style.display = "flex";
            var underlay = document.querySelector(".progressUnderlay");
            if (underlay) {
                underlay.style.display = "";
                WinJS.Promise.timeout(200).then(function () {
                    underlay.style.opacity = "0.45";
                });
            }

            var messageDiv = document.querySelector("#progressMessage");
            if (messageDiv) {
                messageDiv.textContent = message;
            }
        }
    });
}

function hideProgress() {
    _progressNeeded = false;
    var progress = document.querySelector("#progressContainer");
    if (progress) {
        progress.style.display = "none";
        var underlay = document.querySelector(".progressUnderlay");
        if (underlay) {
            underlay.style.display = "none";
            WinJS.Promise.timeout(200).then(function () {
                underlay.style.opacity = "0.0";
            });
        }
    }
}

function confirm(title, message, primary, secondary) {
    var contentDialogElement = document.querySelector("#confirmdialog");
    var contentDialog = contentDialogElement.firstElementChild.winControl;
    var messageElement = contentDialogElement.querySelector(".win-contentdialog-content");
    messageElement.textContent = message;
    messageElement.style.marginTop = "10px";
    contentDialog.title = title;
    contentDialog.primaryCommandText = primary;
    contentDialog.secondaryCommandText = secondary;

    WinJS.Promise.timeout(500).then(function () {
        contentDialogElement.querySelector(".win-contentdialog-secondarycommand").focus();
    });

    return contentDialog.show();
}

function reporterror(title, message, err) {
    var contentDialogElement = document.querySelector("#confirmdialog");
    var contentDialog = contentDialogElement.firstElementChild.winControl;
    var messageElement = contentDialogElement.querySelector(".win-contentdialog-content");
    messageElement.textContent = message;
    messageElement.style.marginTop = "10px";
    contentDialog.title = title;
    contentDialog.primaryCommandText = "OK";
    contentDialog.secondaryCommandText = undefined;

    WinJS.Promise.timeout(500).then(function () {
        contentDialogElement.querySelector(".win-contentdialog-secondarycommand").focus();
    });

    return contentDialog.show();
}

WinJS.Namespace.define("Binding.Mode", {
    twoway: WinJS.Binding.initializer(function (source, sourceProps, dest, destProps) {
        var destPath, event, sourcePath;
        WinJS.Binding.defaultBind(source, sourceProps, dest, destProps);
        switch (dest.nodeName) {
            case "INPUT":
                event = dest.type === "checkbox" ? "onclick" : "oninput";
                break;
            case "SELECT":
                event = "onchange";
        }
        if (event) {
            destPath = destProps.join(".");
            sourcePath = sourceProps.join(".");
            return dest[event] = function (event) {
                var d, property, s, sourceParent;
                d = WinJS.Utilities.getMember(destPath, dest);
                s = WinJS.Utilities.getMember(sourcePath, source);
                if (s !== d) {
                    if (sourceProps.length === 1) {
                        return source[sourcePath] = d;
                    } else {
                        property = sourceProps[sourceProps.length - 1];
                        sourceParent = sourceProps.slice(0, -1).join('.');
                        return WinJS.Utilities.getMember(sourceParent, source)[property] = d;
                    }
                }
            };
        }
    })
});


function popup(id, title, page, state) {
    var contentDialogElement = document.querySelector("#" + id);
    var contentDialog = contentDialogElement.firstElementChild.winControl;
    var messageElement = contentDialogElement.querySelector(".win-contentdialog-content");
    var popupContentPageControl = null;

    contentDialog.title = title;

    function cleanup(result) {
        if (popupContentPageControl && popupContentPageControl.unload) {
            popupContentPageControl.unload();
        }

        if (messageElement.childElementCount > 0) {
            var oldElement = messageElement.firstElementChild;
            // Cleanup and remove previous element 
            if (oldElement.winControl) {
                if (oldElement.winControl.unload) {
                    oldElement.winControl.unload();
                }
                oldElement.winControl.dispose();
            }
            oldElement.parentNode.removeChild(oldElement);
            oldElement.innerText = "";
        }

        return result;
    }

    return this._lastNavigationPromise = WinJS.Promise.as().then(function () {
        return WinJS.UI.Pages.render(page, messageElement, { popup: contentDialog, state: state });
    }).then(function (rendered) {
        popupContentPageControl = rendered;
        return contentDialog.show();
    }).then(cleanup, cleanup);

}

function addTextChangeEventHandler(element, handler) {
    /*
    onchange occurs only when you blur the textbox
    onkeyup & onkeypress doesn't always occur on text change
    onkeydown occurs on text change (but cannot track cut & paste with mouse click)
    onpaste & oncut occurs with keypress and even with the mouse right click.
    */

    element.onchange = handler;
    element.onkeyup = handler;
    element.onkeydown = handler;
    element.onpast = handler;
    element.oncut = handler;
}

function addAddressHandler(input, setDataItem) {
    try {
        var options = {
        };

        var autocomplete = new google.maps.places.Autocomplete(input, options);

        google.maps.event.addListener(autocomplete, 'place_changed', function () {
            var place = autocomplete.getPlace();
            if (place.geometry) {
                setDataItem(place);
            }
        });
    }
    catch (e) { }
}

function getPostCodeFromPlace(place) {
    var postcode = "";
    for (var i = 0; i < place.address_components.length; i++) {
        for (var j = 0; j < place.address_components[i].types.length; j++) {
            if (place.address_components[i].types[j] == "postal_code") {
                postcode = place.address_components[i].long_name;
                break;
            }
        }
    }
    return postcode;
}

function clone(obj) {
    return JSON.parse(JSON.stringify(obj));
};


================================================
FILE: src/Clients/Web/js/navigator.js
================================================
﻿(function () {
    "use strict";

    var nav = WinJS.Navigation;

    WinJS.Namespace.define("Application", {
        PageControlNavigator: WinJS.Class.define(
            // Define the constructor function for the PageControlNavigator.
            function PageControlNavigator(element, options) {
                this._element = element || document.createElement("div");
                this._element.appendChild(this._createPageElement());

                this.home = options.home;

                this._eventHandlerRemover = [];

                var that = this;
                function addRemovableEventListener(e, eventName, handler, capture) {
                    e.addEventListener(eventName, handler, capture);
                    that._eventHandlerRemover.push(function () {
                        e.removeEventListener(eventName, handler);
                    });
                };

                addRemovableEventListener(nav, 'navigating', this._navigating.bind(this), false);
                addRemovableEventListener(nav, 'navigated', this._navigated.bind(this), false);

                window.onresize = this._resized.bind(this);

                Application.navigator = this;
            }, {
                home: "",
                /// <field domElement="true" />
                _element: null,
                _lastNavigationPromise: WinJS.Promise.as(),
                _lastViewstate: 0,

                // This is the currently loaded Page object.
                pageControl: {
                    get: function () { return this.pageElement && this.pageElement.winControl; }
                },

                // This is the root element of the current page.
                pageElement: {
                    get: function () { return this._element.firstElementChild; }
                },

                // This function disposes the page navigator and its contents.
                dispose: function () {
                    if (this._disposed) {
                        return;
                    }

                    this._disposed = true;
                    WinJS.Utilities.disposeSubTree(this._element);
                    for (var i = 0; i < this._eventHandlerRemover.length; i++) {
                        this._eventHandlerRemover[i]();
                    }
                    this._eventHandlerRemover = null;
                },

                // Creates a container for a new page to be loaded into.
                _createPageElement: function () {
                    var element = document.createElement("div");
                    element.setAttribute("dir", window.getComputedStyle(this._element, null).direction);
                    element.style.position = "absolute";
                    element.style.visibility = "hidden";
                    element.style.width = "100%";
                    element.style.height = "100%";
                    return element;
                },

                // Retrieves a list of animation elements for the current page.
                // If the page does not define a list, animate the entire page.
                _getAnimationElements: function () {
                    if (this.pageControl && this.pageControl.getAnimationElements) {
                        return this.pageControl.getAnimationElements();
                    }
                    return this.pageElement;
                },

                _navigated: function () {
                    var homeButton = this.pageElement.querySelector(".page-header-home");
                    homeButton.addEventListener("click", function () {
                        nav.back(nav.history.backStack.length);
                    });
                    this.pageElement.style.visibility = "";
                    WinJS.UI.Animation.enterPage(this._getAnimationElements(), [{ top: "0px", left: "40px", rtlflip: true }]).done();
                },

                // Responds to navigation by adding new pages to the DOM. 
                _navigating: function (args) {
                    var newElement = this._createPageElement();
                    this._element.appendChild(newElement);

                    this._lastNavigationPromise.cancel();

                    var that = this;

                    function cleanup() {
                        if (that._element.childElementCount > 1) {
                            var oldElement = that._element.firstElementChild;
                            // Cleanup and remove previous element 
                            if (oldElement.winControl) {
                                if (oldElement.winControl.unload) {
                                    oldElement.winControl.unload();
                                }
                                oldElement.winControl.dispose();
                            }
                            oldElement.parentNode.removeChild(oldElement);
                            oldElement.innerText = "";
                        }
                    }

                    this._lastNavigationPromise = WinJS.Promise.as().then(function () {
                        return WinJS.UI.Pages.render(args.detail.location, newElement, args.detail.state);
                    }).then(cleanup, cleanup);

                    args.detail.setPromise(this._lastNavigationPromise);
                },

                // Responds to resize events and call the updateLayout function
                // on the currently loaded page.
                _resized: function (args) {
                    if (this.pageControl && this.pageControl.updateLayout) {
                        this.pageControl.updateLayout.call(this.pageControl, this.pageElement);
                    }
                },
            }
        )
    });
})();



================================================
FILE: src/Clients/Web/js/serverconfig.js
================================================
﻿// Release configuration
// Do not use the original (deleted that line), use the following one (OguzP)
var baseAddress = 'http://' + window.location.hostname + ':8080'


================================================
FILE: src/Clients/Web/pages/catalog/catalog.css
================================================
﻿.catalogDetail {
}



================================================
FILE: src/Clients/Web/pages/catalog/catalog.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>catalog</title>

    <link href="catalog.css" rel="stylesheet" />
    <script src="catalog.js"></script>
</head>
<body>
    <div class="catalog fragment">
        <header class="page-header" aria-label="Header content" role="banner">
            <button class="page-header-home">
                <img src="../../images/FabrikamIcon.png" />
            </button>
            <h2 class="titlearea win-type-ellipsis">
                <span class="pagetitle">Catalog</span>
            </h2>
        </header>
        <section class="page-section" aria-label="Main content" role="main">
            <!-- Simple template for the ListView instantiation  -->
            <div class="catalogItemTemplate" data-win-control="WinJS.Binding.Template" style="display: none">
                <div class="listItem catalogItem">
                    <div class="catalogItem-Detail">
                        <h3 data-win-bind="textContent: skuNumber"></h3>
                        <div class="list-item-entry-small" data-win-bind="textContent: description"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: unit"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: unitPrice"></div>
                    </div>
                </div>
            </div>

            <div class="edittools" data-win-control="Controls.EditTools" data-win-options="{  }"></div>

            <div id="listView"
                 class="itemListView catalogListView"
                 data-win-control="WinJS.UI.ListView"
                 data-win-options="{
                    itemDataSource: Data.catalog.dataSource,
                    itemTemplate: select('.catalogItemTemplate'),
                    selectionMode: 'single',
                    tapBehavior: 'directSelect',
                    swipeBehavior: 'select',
                    layout: { type: WinJS.UI.ListLayout }
                 }">
            </div>

            <div class="editDetail catalogDetail">
                <label class="inputlabel">Name:</label>
                <input id="skuNumber" class="textinput" type="text" data-win-bind="value: skuNumber Binding.Mode.twoway" />
                <br />
                <label class="inputlabel">Description:</label>
                <input id="description" class="textinput" type="text" data-win-bind="value: description Binding.Mode.twoway" />
                <br />
                <label class="inputlabel">Unit:</label>
                <input id="unit" class="textinput" type="text" data-win-bind="value: unit Binding.Mode.twoway" />
                <br />
                <label class="inputlabel">Price:</label>
                <input id="unitPrice" class="textinput" type="text" data-win-bind="value: unitPrice Binding.Mode.twoway" />
            </div>
        </section>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/pages/catalog/catalog.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";
    var nav = WinJS.Navigation;

    WinJS.UI.Pages.define("pages/catalog/catalog.html", {
        listViewControl: null,
        editTools: null,
        editButtons: null,
        currentItem: null,
        catalogDetailElement: null,
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {
            var subpage = element.querySelector(".page-section");
            var that = this;

            return WinJS.UI.processAll(element).then(function () {

                that.listViewControl = element.querySelector(".catalogListView").winControl;
                that.catalogDetailElement = element.querySelector(".catalogDetail");
                subpage.style.display = "none";
                showProgress("Loading...");
                return Data.catalogGet().then(function (catalog) {
                    if (!catalog) {
                        hideProgress();
                        nav.back(nav.history.backStack.length);
                        return;
                    }
                    that.editTools = subpage.querySelector(".edittools").winControl;
                    that.editButtons = that.editTools.getButtons();
                    that.editTools.addEventListener("click", that._buttonHandler.bind(that));
                    that.listViewControl.forceLayout();

                    that.editButtons['add'].disabled = false;
                    that.editButtons['edit'].style.display = "none";

                    that.listViewControl.onselectionchanged = function (arg) {
                        that.listViewControl.selection.getItems().then(function (items) {
                            if (items.length > 0) {
                                that.currentItem = items[0].data;
                                WinJS.Binding.processAll(that.catalogDetailElement, items[0].data);
                                //that.editButtons['delete'].disabled = false;
                                //that.editButtons['edit'].disabled = false;
                                //that.editButtons['save'].disabled = false;
                            }
                            else {
                                that.currentItem = null;
                                //that.editButtons['delete'].disabled = true;
                                //that.editButtons['edit'].disabled = true;
                                //that.editButtons['save'].disabled = true;
                            }
                        });
                    }
                    that.listViewControl.selection.add(0);
                    hideProgress();
                    subpage.style.display = "";

                    WinJS.UI.Animation.enterContent(subpage);
                });
            });
        },

        _buttonHandler: function (args) {
            if (!args.label || (this.currentItem == null && args.label != 'add')) {
                return;
            }
            var that = this;

            switch (args.label) {
                case 'save': {
                    Data.catalogSave(this.currentItem).then(function (saved) {
                        if (saved) {
                            var index = Data.catalog.indexOf(saved);
                            that.listViewControl.selection.clear();
                            that.listViewControl.selection.add(index);
                            that.listViewControl.ensureVisible(index);
                        }
                    });
                    break;
                }
                case 'delete': {
                    confirm("Delete Product", "Are you sure that you'd like to delete " + this.currentItem.skuNumber + "?", "Yes", "No").then(function (result) {
                        if (result.reason == "primary") {
                            var idx = Data.catalog.indexOf(that.currentItem) - 1;
                            if (idx < 0) {
                                idx = 0;
                            }
                            Data.catalogDelete(that.currentItem).then(function (deleted) {
                                that.listViewControl.selection.clear();
                                if (Data.catalog.length > 0) {
                                    that.listViewControl.selection.add(idx);
                                    that.listViewControl.ensureVisible(idx);
                                }
                            });
                        }
                    });
                    break;
                }
                case 'add': {
                    this.listViewControl.selection.clear();
                    this.currentItem = Data.catalogCreate();
                    WinJS.Binding.processAll(this.catalogDetailElement, this.currentItem);
                    that.catalogDetailElement.querySelector("#skuNumber").focus();

                    break;
                }
                default: {

                }
            }
        },

        unload: function () {
            // TODO: Respond to navigations away from this page.
        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();



================================================
FILE: src/Clients/Web/pages/dealers/dealers.css
================================================
﻿.dealerDetail {
}



================================================
FILE: src/Clients/Web/pages/dealers/dealers.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>dealers</title>

    <link href="dealers.css" rel="stylesheet" />
    <script src="dealers.js"></script>
</head>
<body>
    <div class="dealers fragment">
        <header class="page-header" aria-label="Header content" role="banner">
            <button class="page-header-home">
                <img src="../../images/FabrikamIcon.png" />
            </button>
            <h2 class="titlearea win-type-ellipsis">
                <span class="pagetitle">Dealers</span>
            </h2>
        </header>
        <section class="page-section" aria-label="Main content" role="main">
            <!-- Simple template for the ListView instantiation  -->
            <div class="dealerItemTemplate" data-win-control="WinJS.Binding.Template" style="display: none">
                <div class="listItem dealerItem">
                    <div class="dealerItem-Detail">
                        <h3 data-win-bind="textContent: name"></h3>
                        <div class="list-item-entry-small" data-win-bind="textContent: contact"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: address"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: email"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: phone"></div>
                    </div>
                </div>
            </div>

            <div class="edittools" data-win-control="Controls.EditTools" data-win-options="{  }"></div>

            <div id="listView"
                 class="itemListView dealerListView"
                 data-win-control="WinJS.UI.ListView"
                 data-win-options="{
                    itemDataSource: Data.dealers.dataSource,
                    itemTemplate: select('.dealerItemTemplate'),
                    selectionMode: 'single',
                    tapBehavior: 'directSelect',
                    swipeBehavior: 'select',
                    layout: { type: WinJS.UI.ListLayout }
                 }">
            </div>

            <div class="editDetail dealerDetail">
                <label class="inputlabel">Name:</label>
                <input id="name" class="textinput" type="text" data-win-bind="value: name Binding.Mode.twoway" />
                <label class="inputlabel">Contact:</label>
                <input id="contact" class="textinput" type="text" data-win-bind="value: contact Binding.Mode.twoway" />
                <label class="inputlabel">Address:</label>
                <input id="address" class="textinput" type="text" data-win-bind="value: address Binding.Mode.twoway" />
                <label class="inputlabel">Email:</label>
                <input id="email" class="textinput" type="text" data-win-bind="value: email Binding.Mode.twoway" />
                <label class="inputlabel">Phone:</label>
                <input id="phone" class="textinput" type="text" data-win-bind="value: phone Binding.Mode.twoway" />
            </div>
        </section>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/pages/dealers/dealers.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";
    var nav = WinJS.Navigation;

    WinJS.UI.Pages.define("pages/dealers/dealers.html", {
        listViewControl: null,
        editTools: null,
        editButtons: null,
        currentItem: null,
        dealerDetailElement: null,
        autocomplete: null,
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {
            var subpage = element.querySelector(".page-section");
            var that = this;


            that.listViewControl = element.querySelector(".dealerListView").winControl;
            that.dealerDetailElement = element.querySelector(".dealerDetail");
            subpage.style.display = "none";
            showProgress("Loading...");
            return Data.dealersGet().then(function (dealers) {
                if (!dealers) {
                    hideProgress();
                    nav.back(nav.history.backStack.length);
                    return;
                }
                that.editTools = subpage.querySelector(".edittools").winControl;
                that.editButtons = that.editTools.getButtons();
                that.editTools.addEventListener("click", that._buttonHandler.bind(that));
                that.listViewControl.forceLayout();

                that.editButtons['add'].disabled = false;
                that.editButtons['edit'].style.display = "none";

                addAddressHandler(that.dealerDetailElement.querySelector("#address"), function (place) {
                    that.currentItem.address = place.formatted_address;
                });

                that.listViewControl.onselectionchanged = function (arg) {
                    that.listViewControl.selection.getItems().then(function (items) {
                        if (items.length > 0) {
                            that.currentItem = items[0].data;
                            WinJS.Binding.processAll(that.dealerDetailElement, items[0].data);
                            //that.editButtons['delete'].disabled = false;
                            //that.editButtons['edit'].disabled = false;
                            //that.editButtons['save'].disabled = false;
                        }
                        else {
                            that.currentItem = null;
                            //that.editButtons['delete'].disabled = true;
                            //that.editButtons['edit'].disabled = true;
                            //that.editButtons['save'].disabled = true;
                        }
                    });
                }
                that.listViewControl.selection.add(0);
                hideProgress();
                subpage.style.display = "";

                WinJS.UI.Animation.enterContent(subpage);

            });
        },

        _buttonHandler: function (args) {
            if (!args.label || (this.currentItem == null && args.label != 'add')) {
                return;
            }
            var that = this;

            switch (args.label) {
                case 'save': {
                    Data.dealerSave(this.currentItem).then(function (saved) {
                        if (saved) {
                            var index = Data.dealers.indexOf(saved);
                            that.listViewControl.selection.clear();
                            that.listViewControl.selection.add(index);
                            that.listViewControl.ensureVisible(index);
                        }
                    });
                    break;
                }
                case 'delete': {
                    confirm("Delete Dealer", "Are you sure that you'd like to delete " + this.currentItem.name + "?", "Yes", "No").then(function (result) {
                        if (result.reason == "primary") {
                            var idx = Data.dealers.indexOf(that.currentItem) - 1;
                            if (idx < 0) {
                                idx = 0;
                            }
                            Data.dealerDelete(that.currentItem).then(function (deleted) {
                                that.listViewControl.selection.clear();
                                if (Data.dealers.length > 0) {
                                    that.listViewControl.selection.add(idx);
                                    that.listViewControl.ensureVisible(idx);
                                }
                            });
                        }
                    });
                    break;
                }
                case 'add': {
                    this.listViewControl.selection.clear();
                    this.currentItem = Data.dealerCreate();
                    WinJS.Binding.processAll(this.dealerDetailElement, this.currentItem);
                    that.dealerDetailElement.querySelector("#name").focus();

                    break;
                }
                default: {

                }
            }
        },

        unload: function () {
            // TODO: Respond to navigations away from this page.
        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();



================================================
FILE: src/Clients/Web/pages/deliveries/deliveries.css
================================================
﻿.fullDeliveryDetail {
    float: left;
    margin-top: 10px;
    margin-left: 20px;
    width: 50%;
    max-height: calc(100% - 120px);
    overflow-y: auto;
    padding-right: 10px;
}

    .fullDeliveryDetail .editDetail {
        float: left;
        margin-top: 0px;
        margin-left: 0px;
        width: 100%;
        background: #F0F0F0;
        padding-left: 10px;
        padding-top: 10px;
        padding-bottom: 10px;
        padding-right: 0px;
    }

.deliveryDetail {
    margin-bottom: 10px;
}

    .deliveryDetail .eventsSection {
        display: flex;
        width: 100%;
        align-items: center;
    }

.deliveryDetail .horizontalDetail .horizontalDetailCol {
    display: inline-block;
    width: 48%;
}



================================================
FILE: src/Clients/Web/pages/deliveries/deliveries.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Deliveries</title>

    <link href="deliveries.css" rel="stylesheet" />
    <link href="../quotes/quotes.css" rel="stylesheet" />
    <link href="../orders/orders.css" rel="stylesheet" />
    <script src="deliveries.js"></script>
</head>
<body>
    <div class="deliveries fragment">
        <header class="page-header" aria-label="Header content" role="banner">
            <button class="page-header-home">
                <img src="../../images/FabrikamIcon.png" />
            </button>
            <h2 class="titlearea win-type-ellipsis">
                <span class="pagetitle">Deliveries</span>
            </h2>
        </header>
        <section class="page-section" aria-label="Main content" role="main">
            <!-- Simple template for the ListView instantiation  -->
            <div class="deliveryItemTemplate" data-win-control="WinJS.Binding.Template" style="display: none">
                <div class="listItem deliveryItem">
                    <div class="deliveryItem-Detail">
                        <h3 data-win-bind="textContent: __quote.dealerName"></h3>
                        <div class="list-item-entry-small" data-win-bind="textContent: __quote.customerName"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: deliveryDate">asdasdasd</div>
                        <div class="list-item-entry-small" data-win-bind="textContent: __order.status"></div>
                        <div class="list-item-entry-small"><span data-win-bind="textContent: __quote.width"></span>W x <span data-win-bind="textContent: __quote.height"></span>H x <span data-win-bind="textContent: __quote.depth"></span>D <span data-win-bind="textContent: __quote.purpose"></span></div>
                    </div>
                </div>
            </div>

            <div class="edittools" data-win-control="Controls.EditTools" data-win-options="{  }"></div>

            <div id="deliveryExtrasPopup" class="pagePopup">
                <div data-win-control="WinJS.UI.ContentDialog" data-win-options="{
                     title: 'Main instruction',
                     primaryCommandText: 'Done'
                 }">
                </div>
            </div>

            <div id="listView"
                 class="itemListView deliveryListView"
                 data-win-control="WinJS.UI.ListView"
                 data-win-options="{
                    itemDataSource: Data.deliveries.dataSource,
                    itemTemplate: select('.deliveryItemTemplate'),
                    selectionMode: 'single',
                    tapBehavior: 'directSelect',
                    swipeBehavior: 'select',
                    layout: { type: WinJS.UI.ListLayout }
                 }">
            </div>
            <div class="fullDeliveryDetail">
                <div class="editDetail deliveryDetail">
                    <label class="inputlabel">Delivery Date:</label>
                    <input id="orderDate" class="textinput" type="text" data-win-bind="value: deliveryDate Binding.Mode.twoway" />
                    <label class="inputlabel">Address:</label>
                    <input id="deliveryAddress" class="textinput" type="text" data-win-bind="value: deliveryAddress.city Binding.Mode.twoway" />
                    <label class="inputlabel">Post Code:</label>
                    <input id="deliveryPostcode" class="textinput" type="text" data-win-bind="value: deliveryAddress.postalCode Binding.Mode.twoway" />
                    <div class="horizontalDetail">
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Phone 1:</label>
                            <input id="width" class="textinput" type="text" data-win-bind="value: primaryContactPhone.phoneNumber Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Phone 2:</label>
                            <input id="height" class="textinput" type="text" data-win-bind="value: alternateContactPhone.phoneNumber Binding.Mode.twoway" />
                        </div>
                    </div>
                    <div class="eventsSection">
                        <label class="buttonlabel">Manage Events:</label>
                        <button id="manageDeliveryEvents" class="edit-tools-button" type="button"></button>
                    </div>
                </div>
                <div class="editDetail orderDetail">
                    <label class="inputlabel">Order Date:</label>
                    <input id="orderDate" class="textinput" type="text" data-win-bind="value: __order.orderDate Binding.Mode.twoway" />
                    <select id="status" class="selectinput" data-win-bind="value: __order.status Binding.Mode.twoway">
                        <option value="Created">Created</option>
                        <option value="Confirmed">Confirmed</option>
                        <option value="Started">Started</option>
                        <option value="Built">Built</option>
                        <option value="DeliveryConfirmed">Delivery Confirmed</option>
                        <option value="Shipped">Shipped</option>
                        <option value="Delivered">Delivered</option>
                        <option value="Installed">Installed</option>
                    </select>
                    <div class="eventsSection">
                        <label class="buttonlabel">Manage Events:</label>
                        <button id="manageOrderEvents" class="edit-tools-button" type="button"></button>
                    </div>
                </div>
                <div class="editDetail quoteDetail">
                    <label class="inputlabel">Dealer:</label>
                    <input id="quoteDealerName" class="textinput" type="text" data-win-bind="value: __quote.dealerName Binding.Mode.twoway" />
                    <label class="inputlabel">Valid Until:</label>
                    <input id="quoteValidUntil" class="textinput" type="text" data-win-bind="value: __quote.validUntil Binding.Mode.twoway" />
                    <label class="inputlabel">Customer:</label>
                    <input id="quoteCustomerName" class="textinput" type="text" data-win-bind="value: __quote.customerName Binding.Mode.twoway" />
                    <label class="inputlabel">Address:</label>
                    <input id="quoteAddress" class="textinput" type="text" data-win-bind="value: __quote.city Binding.Mode.twoway" />
                    <label class="inputlabel">Post Code:</label>
                    <input id="quotePostcode" class="textinput" type="text" data-win-bind="value: __quote.postalCode Binding.Mode.twoway" />
                    <label class="inputlabel">Comments:</label>
                    <input id="quoteComments" class="textinput" type="text" data-win-bind="value: __quote.comments Binding.Mode.twoway" />
                    <label class="inputlabel">Purpose:</label>
                    <select id="quotePurpose" class="selectinput" data-win-bind="value: __quote.purpose Binding.Mode.twoway">
                        <option value="Refrigerator">Fridge</option>
                        <option value="Freezer">Freezer</option>
                    </select>
                    <label class="inputlabel">Description:</label>
                    <input id="quoteUnitDescription" class="textinput" type="text" data-win-bind="value: __quote.unitDescription Binding.Mode.twoway" />
                    <div class="extrasSection">
                        <label class="buttonlabel">Manage Extras:</label>
                        <button id="manageExtras" class="edit-tools-button" type="button"></button>
                    </div>
                    <div class="horizontalDetail">
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Width:</label>
                            <input id="width" class="textinput" type="text" data-win-bind="value: __quote.width Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Height:</label>
                            <input id="height" class="textinput" type="text" data-win-bind="value: __quote.height Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Depth:</label>
                            <input id="depth" class="textinput" type="text" data-win-bind="value: __quote.depth Binding.Mode.twoway" />
                        </div>
                    </div>
                    <div class="horizontalDetail">
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Ambient:</label>
                            <input id="width" class="textinput" type="text" data-win-bind="value: __quote.ambientAverage Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Peak:</label>
                            <input id="height" class="textinput" type="text" data-win-bind="value: __quote.ambientPeak Binding.Mode.twoway" />
                        </div>
                    </div>
                    <div class="horizontalDetail">
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Terms:</label>
                            <input id="width" class="textinput" type="text" data-win-bind="value: __quote.terms Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Total:</label>
                            <input id="height" class="textinput" type="text" data-win-bind="value: __quote.totalCost Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Discount:</label>
                            <input id="height" class="textinput" type="text" data-win-bind="value: __quote.discount Binding.Mode.twoway" />
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/pages/deliveries/deliveries.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";
    var nav = WinJS.Navigation;

    WinJS.UI.Pages.define("pages/deliveries/deliveries.html", {
        listViewControl: null,
        editTools: null,
        editButtons: null,
        currentItem: null,
        originalItem: null,
        deliveryDetailElement: null,
        itemTemplateHTML: null,
        bound: false,
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {
            var subpage = element.querySelector(".page-section");
            var that = this;
            var fromOrder = WinJS.Promise.as();

            if (options && options.order) {
                showProgress("Creating Delivery...");
                fromOrder = Data.deliveryCreateFromOrder(options.order);
            }
            else {
                showProgress("Loading...");
            }

            return WinJS.UI.processAll(element).then(function () {
                element.querySelector("#manageExtras").addEventListener("click", that._extrasHandler.bind(that));
                element.querySelector("#manageOrderEvents").addEventListener("click", that._orderEventsHandler.bind(that));
                element.querySelector("#manageDeliveryEvents").addEventListener("click", that._deliveryEventsHandler.bind(that));

                that.listViewControl = element.querySelector(".deliveryListView").winControl;
                that.listViewControl.itemTemplate = that._itemRenderer.bind(that);
                that.itemTemplateHTML = element.querySelector(".deliveryItemTemplate").innerHTML;
                that.deliveryDetailElement = element.querySelector(".fullDeliveryDetail");

                subpage.style.display = "none";
                return fromOrder.then(function (newdelivery) {
                    return Data.deliveriesGet().then(function (deliveries) {
                        if (newdelivery && Data.deliveryFindById(newdelivery.orderId) < 0) {
                            deliveries.push(newdelivery);
                        }
                        if (!deliveries) {
                            hideProgress();
                            nav.back(nav.history.backStack.length);
                            return;
                        }
                        var toolsElement = subpage.querySelector(".edittools");
                        if (!toolsElement) {
                            return;
                        }
                        that.editTools = toolsElement.winControl;
                        that.editButtons = that.editTools.getButtons();
                        that.editTools.addEventListener("click", that._buttonHandler.bind(that));
                        that.listViewControl.forceLayout();
                        that.editButtons['add'].style.display = "none";
                        that.editButtons['edit'].style.display = "none";

                        addAddressHandler(that.deliveryDetailElement.querySelector("#deliveryAddress"), function (place) {
                            that.currentItem.deliveryAddress.city = place.formatted_address;
                            that.currentItem.deliveryAddress.postalCode = getPostCodeFromPlace(place)
                        });

                        addAddressHandler(that.deliveryDetailElement.querySelector("#deliveryPostcode"), function (place) {
                            that.currentItem.deliveryAddress.city = place.formatted_address;
                            that.currentItem.deliveryAddress.postalCode = getPostCodeFromPlace(place)
                            that.quoteDetailElement.querySelector("#deliveryPostcode").value = that.currentItem.deliveryAddress.postalCode;
                        });

                        addAddressHandler(that.deliveryDetailElement.querySelector("#quoteAddress"), function (place) {
                            that.currentItem.__quote.city = place.formatted_address;
                            that.currentItem.__quote.postalCode = getPostCodeFromPlace(place)
                        });

                        addAddressHandler(that.deliveryDetailElement.querySelector("#quotePostcode"), function (place) {
                            that.currentItem.__quote.city = place.formatted_address;
                            that.currentItem.__quote.postalCode = getPostCodeFromPlace(place)
                            that.quoteDetailElement.querySelector("#quotePostcode").value = that.currentItem.__quote.postalCode;
                        });

                        that.listViewControl.onselectionchanged = function (arg) {
                            that.listViewControl.selection.getItems().then(function (items) {
                                if (items.length > 0) {
                                    that.currentItem = items[0].data;
                                    that.originalItem = clone(items[0].data.backingData);
                                    that.originalItem.__order = clone(items[0].data.__order.backingData);
                                    that.originalItem.__quote = clone(items[0].data.__quote.backingData);
                                    WinJS.Binding.processAll(that.deliveryDetailElement, items[0].data);
                                    //that.editButtons['delete'].disabled = false;
                                    //that.editButtons['edit'].disabled = false;
                                    //that.editButtons['save'].disabled = false;
                                }
                                else {
                                    that.currentItem = null;
                                    that.originalItem = null;
                                    //that.editButtons['delete'].disabled = true;
                                    //that.editButtons['edit'].disabled = true;
                                    //that.editButtons['save'].disabled = true;
                                }
                            });
                        }

                        that.listViewControl.onloadingstatechanged = function (args) {
                            if (that.listViewControl.loadingState === "viewPortLoaded") {
                                WinJS.Promise.timeout().then(function () {
                                    var selectindex = 0;
                                    if (newdelivery) {
                                        selectindex = Data.deliveryFindById(newdelivery.orderId);
                                    }

                                    that.listViewControl.selection.add(selectindex);
                                    that.listViewControl.onloadingstatechanged = undefined;
                                });
                            }
                        }
                        hideProgress();
                        subpage.style.display = "";
                        WinJS.UI.Animation.enterContent(subpage);
                    });
                });
            });
        },

        _itemRenderer: function (itemPromise, recycled) {
            var that = this;
            return itemPromise.then(function (currentItem) {
                if (!that) {
                    return document.createElement("div");
                }

                var data = currentItem.data;
                return Data.orderGetById(data.orderId).then(function (order) {
                    data.__order = order;
                    data.__quote = order.__quote;

                    var boundTemplate = document.createElement("div");
                    boundTemplate.className = "win-template";
                    boundTemplate.innerHTML = that.itemTemplateHTML;

                    return WinJS.Binding.processAll(boundTemplate, data).then(function () {
                        return boundTemplate;
                    });
                });
            });
        },

        _extrasHandler: function (args) {
            popup("deliveryExtrasPopup", "Manage Extras", "pages/extras/extras.html", this.currentItem.__quote);
        },
        _deliveryEventsHandler: function (args) {
            popup("deliveryExtrasPopup", "Manage Delivery Events", "pages/orderevents/orderevents.html", this.currentItem);
        },
        _orderEventsHandler: function (args) {
            popup("deliveryExtrasPopup", "Manage Order Events", "pages/orderevents/orderevents.html", this.currentItem.__order);
        },
        _buttonHandler: function (args) {
            if (!args.label || (this.currentItem == null && args.label != 'add')) {
                return;
            }
            var that = this;

            switch (args.label) {
                case 'save': {
                    Data.deliverySave(this.currentItem, this.originalItem).then(function (saved) {
                        if (saved) {
                            var index = Data.deliveries.indexOf(saved);
                            that.listViewControl.selection.clear();
                            that.listViewControl.selection.add(index);
                            that.listViewControl.ensureVisible(index);
                        }
                    });
                    break;
                }
                case 'delete': {
                    confirm("Delete Order", "Are you sure that you'd like to delete this delivery?", "Yes", "No").then(function (result) {
                        if (result.reason == "primary") {
                            var idx = Data.deliveries.indexOf(that.currentItem) - 1;
                            if (idx < 0) {
                                idx = 0;
                            }
                            Data.deliveryDelete(that.currentItem).then(function (deleted) {
                                that.listViewControl.selection.clear();
                                if (Data.deliveries.length > 0) {
                                    that.listViewControl.selection.add(idx);
                                    that.listViewControl.ensureVisible(idx);
                                }
                            });
                        }
                    });
                    break;
                }
                default: {

                }
            }
        },

        unload: function () {

        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();



================================================
FILE: src/Clients/Web/pages/extras/extras.css
================================================
﻿.extrasDetail {
}

.extras {
}



================================================
FILE: src/Clients/Web/pages/extras/extras.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>extras</title>

    <link href="extras.css" rel="stylesheet" />
    <script src="extras.js"></script>
</head>
<body>
    <div class="extras fragment">
        <section class="page-section" aria-label="Main content" role="main">
            <!-- Simple template for the ListView instantiation  -->
            <div class="extrasItemTemplate" data-win-control="WinJS.Binding.Template" style="display: none">
                <div class="listItem extrasItem">
                    <div class="extrasItem-Detail">
                        <h3 data-win-bind="textContent: skuNumber"></h3>
                        <div class="list-item-entry-small" data-win-bind="textContent: description"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: unit"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: unitPrice"></div>
                    </div>
                </div>
            </div>

            <div class="edittools" data-win-control="Controls.EditTools" data-win-options="{  }"></div>

            <div id="listView"
                 class="itemListView extrasListView"
                 data-win-control="WinJS.UI.ListView"
                 data-win-options="{
                    itemTemplate: select('.extrasItemTemplate'),
                    selectionMode: 'single',
                    tapBehavior: 'directSelect',
                    swipeBehavior: 'select',
                    layout: { type: WinJS.UI.ListLayout }
                 }">
            </div>

            <div class="editDetail extrasDetail">
                <label class="inputlabel">Name:</label>
                <input id="extras-skuNumber" class="textinput" type="text" data-win-bind="value: skuNumber Binding.Mode.twoway" />
                <br />
                <label class="inputlabel">Description:</label>
                <input id="extras-description" class="textinput" type="text" data-win-bind="value: description Binding.Mode.twoway" />
                <br />
                <label class="inputlabel">Unit:</label>
                <input id="extras-unit" class="textinput" type="text" data-win-bind="value: unit Binding.Mode.twoway" />
                <br />
                <label class="inputlabel">Price:</label>
                <input id="extras-unitPrice" class="textinput" type="text" data-win-bind="value: unitPrice Binding.Mode.twoway" />
            </div>
        </section>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/pages/extras/extras.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";

    WinJS.UI.Pages.define("pages/extras/extras.html", {
        listViewControl: null,
        editTools: null,
        editButtons: null,
        currentItem: null,
        extrasDetailElement: null,
        extrasData: null,
        additionalItems: null,
        addingItem: false,
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {
            var subpage = element.querySelector(".page-section");
            var that = this;
            that.additionalItems = options.state.additionalItems;

            return WinJS.UI.processAll(element).then(function () {

                that.listViewControl = element.querySelector(".extrasListView").winControl;
                that.extrasDetailElement = element.querySelector(".extrasDetail");
                subpage.style.display = "none";
                showProgress("Loading...");
                return Data.catalogGet().then(function (catalog) {
                    var skuField = that.extrasDetailElement.querySelector("#extras-skuNumber");
                    that.extrasData = that._getCatalogEntriesForExtras(that.additionalItems);

                    WinJS.UI.setOptions(that.listViewControl, {
                        itemDataSource: that.extrasData.dataSource
                    });

                    that.editTools = subpage.querySelector(".edittools").winControl;
                    that.editButtons = that.editTools.getButtons();
                    that.editTools.addEventListener("click", that._buttonHandler.bind(that));
                    that.listViewControl.forceLayout();

                    that.editButtons['add'].disabled = false;
                    that.editButtons['edit'].style.display = "none";

                    addTextChangeEventHandler(skuField, function (args) {
                        that._populateExtraDetails(skuField.value);
                    }.bind(that));

                    that.listViewControl.onselectionchanged = function (arg) {
                        that.listViewControl.selection.getItems().then(function (items) {
                            if (items.length > 0) {
                                that.currentItem = items[0].data;
                                WinJS.Binding.processAll(that.extrasDetailElement, items[0].data);
                                //that.editButtons['delete'].disabled = false;
                                //that.editButtons['edit'].disabled = false;
                                //that.editButtons['save'].disabled = false;
                            }
                            else {
                                that.currentItem = null;
                                //that.editButtons['delete'].disabled = true;
                                //that.editButtons['edit'].disabled = true;
                                //that.editButtons['save'].disabled = true;
                            }
                        });
                    }
                    that.listViewControl.selection.add(0);
                    hideProgress();
                    subpage.style.display = "";

                    WinJS.UI.Animation.enterContent(subpage);
                });
            });
        },
        _populateExtraDetails: function (skuNumber) {
            var that = this;
            var extra = Data.catalogFindSku(skuNumber);
            if (extra) {
                if (extra.backingData) {
                    extra = extra.backingData;
                }
                Object.keys(extra).forEach(function (extraKey) {
                    if (extraKey != "skuNumber") {
                        that.currentItem[extraKey] = extra[extraKey];
                    }
                });
            }
        },
        _getCatalogEntriesForExtras: function (additionalItems) {
            var extras = new WinJS.Binding.List().createSorted(function (l, r) {
                return l.skuNumber < r.skuNumber ? -1 : l.skuNumber === r.skuNumber ? 0 : 1;
            });

            for (var n = 0; n < additionalItems.length; n++) {
                var catalogEntry = Data.catalogFindSku(additionalItems[n].skuNumber);
                if (catalogEntry != null) {
                    extras.push(catalogEntry);
                }
            }

            return extras;
        },
        _buttonHandler: function (args) {
            if (!args.label || (this.currentItem == null && args.label != 'add')) {
                return;
            }
            var that = this;

            switch (args.label) {
                case 'save': {
                    this.addingItem = false;
                    return Data.catalogSave(this.currentItem).then(function (saved) {
                        if (saved) {
                            if (that.currentItem.__new) {
                                that.extrasData.push(saved);
                            }
                            var index = that.extrasData.indexOf(saved);
                            that.listViewControl.selection.clear();
                            that.listViewControl.selection.add(index);
                            that.listViewControl.ensureVisible(index);
                        }
                    });
                    break;
                }
                case 'delete': {
                    this.addingItem = false;
                    return confirm("Delete Extra", "Are you sure that you'd like to delete " + this.currentItem.skuNumber + "?", "Yes", "No").then(function (result) {
                        if (result.reason == "primary") {
                            var idx = that.extrasData.indexOf(that.currentItem);
                            if (idx >= 0) {
                                that.extrasData.splice(idx, 1);
                                idx -= 1;
                            }

                            if (idx < 0) {
                                idx = 0;
                            }

                            that.listViewControl.selection.clear();
                            if (that.extrasData.length > 0) {
                                that.listViewControl.selection.add(idx);
                                that.listViewControl.ensureVisible(idx);
                            }

                            //Data.catalogDelete(that.currentItem).then(function (deleted) {
                            //    that.listViewControl.selection.clear();
                            //    if (that.dataSource.length > 0) {
                            //        that.listViewControl.selection.add(idx);
                            //        that.listViewControl.ensureVisible(idx);
                            //    }
                            //});
                        }
                    });
                    break;
                }
                case 'add': {
                    this.addingItem = true;
                    this.listViewControl.selection.clear();
                    this.currentItem = Data.catalogCreate();
                    WinJS.Binding.processAll(this.extrasDetailElement, this.currentItem);
                    that.extrasDetailElement.querySelector("#extras-skuNumber").focus();

                    break;
                }
                default: {

                }
            }
            return WinJS.Promise.as(true);
        },

        unload: function () {
            var that = this;

            function cleanupUnload() {
                // TODO: Respond to navigations away from this page.
                that.additionalItems.splice(0, that.additionalItems.length);
                that.extrasData.forEach(function (extra) {
                    var theExtraEntry = {};
                    theExtraEntry.skuNumber = extra.skuNumber;
                    theExtraEntry.shouldPreInstall = true;
                    theExtraEntry.amount = 1;
                    that.additionalItems.push(theExtraEntry);
                });
            }

            if (this.addingItem == true) {
                this._buttonHandler({ label: 'save' }).then(cleanupUnload);
            }
            else {
                cleanupUnload();
            }
        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();



================================================
FILE: src/Clients/Web/pages/main/main.css
================================================
﻿.main section {
    margin: auto 120px;
}



================================================
FILE: src/Clients/Web/pages/main/main.html
================================================
﻿<!DOCTYPE html>
<!-- saved from url=(0058)file:///D:/Source/MRP/src/Clients/Web/pages/main/main.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <title>main</title>

    <link href="./main.css" rel="stylesheet">
    <script src="./main_files/main.js"></script>
</head>
<body>
    <div class="main fragment">
        <header class="page-header" aria-label="Header content" role="banner">
            <button class="page-header-home">
                <img src="./main_files/FabrikamIcon.png">
            </button>
            <h2 class="titlearea win-type-ellipsis">
                <span class="pagetitle">Welcome to Parts Unlimited MRP system</span>
            </h2>
			<h3> A Fabrikam Subsidiary </h3>
        </header>
        <section class="page-section" aria-label="Main content" role="main">
            <div id="launchpad">
                <img id="companylogo" src="./main_files/unlimited_logo.png">
                <div id="launchtiles">
                    <button class="launchtile" data-page="dealers">
                        <div class="launchtileinner">
                            <img class="launchtilelogo" src="./main_files/DealersIcon.png">
                            <div class="launchtiletitle">Dealers</div>
                        </div>
                    </button>
                    <button class="launchtile" data-page="quotes">
                        <div class="launchtileinner">
                            <img class="launchtilelogo" src="./main_files/QuoteIcon.png">
                            <div class="launchtiletitle">Quotes</div>
                        </div>
                    </button>
                    <button class="launchtile" data-page="orders">
                        <div class="launchtileinner">
                            <img class="launchtilelogo" src="./main_files/OrderIcon.png">
                            <div class="launchtiletitle">Orders</div>
                        </div>
                    </button>
                    <button class="launchtile" data-page="deliveries">
                        <div class="launchtileinner">
                            <img class="launchtilelogo" src="./main_files/DeliveryIcon.png">
                            <div class="launchtiletitle">Deliveries</div>
                        </div>
                    </button>
                    <button class="launchtile" data-page="catalog">
                        <div class="launchtileinner">
                            <img class="launchtilelogo" src="./main_files/CatalogIcon.png">
                            <div class="launchtiletitle">Catalog</div>
                        </div>
                    </button>
                </div>
            </div>
        </section>
    </div>


</body></html>


================================================
FILE: src/Clients/Web/pages/main/main.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";

    var app = WinJS.Application;
    var nav = WinJS.Navigation;
    var sched = WinJS.Utilities.Scheduler;
    var ui = WinJS.UI;

    WinJS.UI.Pages.define("pages/main/main.html", {
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {

            var launchtiles = document.querySelectorAll('.launchtile');
            for (var n = 0; n < launchtiles.length; n++) {
                var launchtile = launchtiles[n];
                launchtile.addEventListener('click', this.launchtileInvoked.bind(this));
            }
        },

        toggleNavBarVisibility: function (ev) {
            document.getElementById('createNavBar').winControl.show();
        },

        launchtileInvoked: function (ev) {
            var tile = ev.currentTarget;
            var location = "pages/" + tile.dataset.page + "/" + tile.dataset.page + ".html";
            nav.navigate(location);
            var trigger = document.querySelector(".nav-trigger");
            trigger.checked = false;
        },

        unload: function () {
            // TODO: Respond to navigations away from this page.
        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();



================================================
FILE: src/Clients/Web/pages/main/main_files/main.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";

    var app = WinJS.Application;
    var nav = WinJS.Navigation;
    var sched = WinJS.Utilities.Scheduler;
    var ui = WinJS.UI;

    WinJS.UI.Pages.define("pages/main/main.html", {
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {

            var launchtiles = document.querySelectorAll('.launchtile');
            for (var n = 0; n < launchtiles.length; n++) {
                var launchtile = launchtiles[n];
                launchtile.addEventListener('click', this.launchtileInvoked.bind(this));
            }
        },

        toggleNavBarVisibility: function (ev) {
            document.getElementById('createNavBar').winControl.show();
        },

        launchtileInvoked: function (ev) {
            var tile = ev.currentTarget;
            var location = "pages/" + tile.dataset.page + "/" + tile.dataset.page + ".html";
            nav.navigate(location);
            var trigger = document.querySelector(".nav-trigger");
            trigger.checked = false;
        },

        unload: function () {
            // TODO: Respond to navigations away from this page.
        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();



================================================
FILE: src/Clients/Web/pages/orderevents/orderevents.css
================================================
﻿


================================================
FILE: src/Clients/Web/pages/orderevents/orderevents.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>orderevents</title>

    <link href="orderevents.css" rel="stylesheet" />
    <script src="orderevents.js"></script>
</head>
<body>
    <div class="orderevents fragment">
        <section class="page-section" aria-label="Main content" role="main">
            <!-- Simple template for the ListView instantiation  -->
            <div class="ordereventsItemTemplate" data-win-control="WinJS.Binding.Template" style="display: none">
                <div class="listItem ordereventsItem">
                    <div class="ordereventsItem-Detail">
                        <h3 data-win-bind="textContent: date"></h3>
                        <div class="list-item-entry-small" data-win-bind="textContent: comments"></div>
                    </div>
                </div>
            </div>

            <div class="edittools" data-win-control="Controls.EditTools" data-win-options="{  }"></div>

            <div id="listView"
                 class="itemListView ordereventsListView"
                 data-win-control="WinJS.UI.ListView"
                 data-win-options="{
                    itemTemplate: select('.ordereventsItemTemplate'),
                    selectionMode: 'single',
                    tapBehavior: 'directSelect',
                    swipeBehavior: 'select',
                    layout: { type: WinJS.UI.ListLayout }
                 }">
            </div>

            <div class="editDetail ordereventsDetail">
                <label class="inputlabel">Date:</label>
                <input id="orderevents-date" class="textinput" type="text" data-win-bind="value: date Binding.Mode.twoway" />
                <br />
                <label class="inputlabel">Comments:</label>
                <input id="orderevents-comments" class="textinput-multiline" type="text" data-win-bind="value: comments Binding.Mode.twoway" />
            </div>
        </section>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/pages/orderevents/orderevents.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";

    WinJS.UI.Pages.define("pages/orderevents/orderevents.html", {
        listViewControl: null,
        editTools: null,
        editButtons: null,
        currentItem: null,
        originalItem: null,
        ordereventsDetailElement: null,
        ordereventsData: null,
        events: null,
        addingItem: false,
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {
            var subpage = element.querySelector(".page-section");
            var that = this;
            that.events = options.state.events;

            return WinJS.UI.processAll(element).then(function () {

                that.listViewControl = element.querySelector(".ordereventsListView").winControl;
                that.ordereventsDetailElement = element.querySelector(".ordereventsDetail");
                subpage.style.display = "none";
                showProgress("Loading...");
                return Data.catalogGet().then(function (catalog) {
                    that.ordereventsData = that._getOrderEventsDataSource(that.events);

                    WinJS.UI.setOptions(that.listViewControl, {
                        itemDataSource: that.ordereventsData.dataSource
                    });

                    that.editTools = subpage.querySelector(".edittools").winControl;
                    that.editButtons = that.editTools.getButtons();
                    that.editTools.addEventListener("click", that._buttonHandler.bind(that));
                    that.listViewControl.forceLayout();

                    that.editButtons['add'].disabled = false;
                    that.editButtons['edit'].style.display = "none";

                    that.listViewControl.onselectionchanged = function (arg) {
                        that.listViewControl.selection.getItems().then(function (items) {
                            if (items.length > 0) {
                                that.currentItem = items[0].data;
                                that.originalItem = clone(items[0].data);
                                WinJS.Binding.processAll(that.ordereventsDetailElement, items[0].data);
                                //that.editButtons['delete'].disabled = false;
                                //that.editButtons['edit'].disabled = false;
                                //that.editButtons['save'].disabled = false;
                            }
                            else {
                                that.currentItem = null;
                                that.originalItem = null;
                                //that.editButtons['delete'].disabled = true;
                                //that.editButtons['edit'].disabled = true;
                                //that.editButtons['save'].disabled = true;
                            }
                        });
                    }
                    that.listViewControl.selection.add(0);
                    hideProgress();
                    subpage.style.display = "";

                    WinJS.UI.Animation.enterContent(subpage);
                });
            });
        },
        _getOrderEventsDataSource: function (events) {
            var orderevents = new WinJS.Binding.List().createSorted(function (l, r) {
                try {
                    var ldate = new Date(l.date);
                    var rdate = new Date(r.date);
                    if (ldate.getFullYear() < 1970) {
                        ldate.setFullYear(ldate.getFullYear() + 100);
                    }

                    if (rdate.getFullYear() < 1970) {
                        rdate.setFullYear(rdate.getFullYear() + 100);
                    }

                    return ldate > rdate ? -1 : ldate === rdate ? 0 : 1;
                }
                catch (e) {
                    return l.date > r.date ? -1 : l.date === r.date ? 0 : 1;
                }

            });

            for (var n = 0; n < events.length; n++) {
                orderevents.push(WinJS.Binding.as(events[n]));
            }

            return orderevents;
        },
        _buttonHandler: function (args) {
            if (!args.label || (this.currentItem == null && args.label != 'add')) {
                return;
            }
            var that = this;

            switch (args.label) {
                case 'save': {
                    this.addingItem = false;
                    if (that.currentItem.__new) {
                        that.ordereventsData.push(that.currentItem);
                    }
                    var index = that.ordereventsData.indexOf(that.currentItem);
                    that.listViewControl.selection.clear();
                    that.listViewControl.selection.add(index);
                    that.listViewControl.ensureVisible(index);
                    break;
                }
                case 'delete': {
                    this.addingItem = false;
                    return confirm("Delete OrderEvent", "Are you sure that you'd like to delete this event?", "Yes", "No").then(function (result) {
                        if (result.reason == "primary") {
                            var idx = that.ordereventsData.indexOf(that.currentItem);
                            if (idx >= 0) {
                                that.ordereventsData.splice(idx, 1);
                                idx -= 1;
                            }

                            if (idx < 0) {
                                idx = 0;
                            }

                            that.listViewControl.selection.clear();
                            if (that.ordereventsData.length > 0) {
                                that.listViewControl.selection.add(idx);
                                that.listViewControl.ensureVisible(idx);
                            }
                        }
                    });
                    break;
                }
                case 'add': {
                    this.addingItem = true;
                    this.listViewControl.selection.clear();
                    this.currentItem = WinJS.Binding.as({ "date": Date.now().toString("M/d/yyyy hh:mm:ss tt"), "comments": "" });
                    this.currentItem.__new = true;
                    WinJS.Binding.processAll(this.ordereventsDetailElement, this.currentItem);
                    that.ordereventsDetailElement.querySelector("#orderevents-comments").focus();

                    break;
                }
                default: {

                }
            }
            return WinJS.Promise.as(true);
        },

        unload: function () {
            var that = this;

            function cleanupUnload() {
                // TODO: Respond to navigations away from this page.
                that.events.splice(0, that.events.length);
                that.ordereventsData.forEach(function (orderevent) {
                    that.events.push(orderevent.backingData);
                });
            }

            if (this.addingItem == true) {
                this._buttonHandler({ label: 'save' }).then(cleanupUnload);
            }
            else {
                cleanupUnload();
            }
        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();



================================================
FILE: src/Clients/Web/pages/orders/orders.css
================================================
﻿.fullOrderDetail {
    float: left;
    margin-top: 10px;
    margin-left: 20px;
    width: 50%;
    max-height: calc(100% - 120px);
    overflow-y: auto;
    padding-right: 10px;
}

    .fullOrderDetail .editDetail {
        float: left;
        margin-top: 0px;
        margin-left: 0px;
        width: 100%;
        background: #F0F0F0;
        padding-left: 10px;
        padding-top: 10px;
        padding-bottom: 10px;
        padding-right: 0px;
    }

.orderDetail {
    margin-bottom: 10px;
}

    .orderDetail .eventsSection {
        display: flex;
        width: 100%;
        align-items: center;
    }



================================================
FILE: src/Clients/Web/pages/orders/orders.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>orders</title>

    <link href="orders.css" rel="stylesheet" />
    <link href="../quotes/quotes.css" rel="stylesheet" />
    <script src="orders.js"></script>
</head>
<body>
    <div class="orders fragment">
        <header class="page-header" aria-label="Header content" role="banner">
            <button class="page-header-home">
                <img src="../../images/FabrikamIcon.png" />
            </button>
            <h2 class="titlearea win-type-ellipsis">
                <span class="pagetitle">Orders</span>
            </h2>
        </header>
        <section class="page-section" aria-label="Main content" role="main">
            <!-- Simple template for the ListView instantiation  -->
            <div class="orderItemTemplate" data-win-control="WinJS.Binding.Template" style="display: none">
                <div class="listItem orderItem">
                    <div class="orderItem-Detail">
                        <h3 data-win-bind="textContent: __quote.dealerName"></h3>
                        <div class="list-item-entry-small" data-win-bind="textContent: __quote.customerName"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: orderDate"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: status"></div>
                        <div class="list-item-entry-small"><span data-win-bind="textContent: __quote.width"></span>W x <span data-win-bind="textContent: __quote.height"></span>H x <span data-win-bind="textContent: __quote.depth"></span>D <span data-win-bind="textContent: __quote.purpose"></span></div>
                    </div>
                </div>
            </div>

            <div class="edittools" data-win-control="Controls.EditTools" data-win-options="{  }"></div>

            <div id="orderExtrasPopup" class="pagePopup">
                <div data-win-control="WinJS.UI.ContentDialog" data-win-options="{
                     title: 'Main instruction',
                     primaryCommandText: 'Done'
                 }">
                </div>
            </div>

            <div id="listView"
                 class="itemListView orderListView"
                 data-win-control="WinJS.UI.ListView"
                 data-win-options="{
                    itemDataSource: Data.orders.dataSource,
                    itemTemplate: select('.orderItemTemplate'),
                    selectionMode: 'single',
                    tapBehavior: 'directSelect',
                    swipeBehavior: 'select',
                    layout: { type: WinJS.UI.ListLayout }
                 }">
            </div>
            <div class="fullOrderDetail">
                <div class="editDetail orderDetail">
                    <label class="inputlabel">Order Date:</label>
                    <input id="orderDate" class="textinput" type="text" data-win-bind="value: orderDate Binding.Mode.twoway" />
                    <select id="status" class="selectinput" data-win-bind="value: status Binding.Mode.twoway">
                        <option value="Created">Created</option>
                        <option value="Confirmed">Confirmed</option>
                        <option value="Started">Started</option>
                        <option value="Built">Built</option>
                        <option value="DeliveryConfirmed">Delivery Confirmed</option>
                        <option value="Shipped">Shipped</option>
                        <option value="Delivered">Delivered</option>
                        <option value="Installed">Installed</option>
                    </select>
                    <div class="eventsSection">
                        <label class="buttonlabel">Manage Events:</label>
                        <button id="manageEvents" class="edit-tools-button" type="button"></button>
                    </div>
                </div>
                <div class="editDetail quoteDetail">
                    <label class="inputlabel">Dealer:</label>
                    <input id="dealerName" class="textinput" type="text" data-win-bind="value: __quote.dealerName Binding.Mode.twoway" />
                    <label class="inputlabel">Valid Until:</label>
                    <input id="validUntil" class="textinput" type="text" data-win-bind="value: __quote.validUntil Binding.Mode.twoway" />
                    <label class="inputlabel">Customer:</label>
                    <input id="customerName" class="textinput" type="text" data-win-bind="value: __quote.customerName Binding.Mode.twoway" />
                    <label class="inputlabel">Address:</label>
                    <input id="address" class="textinput" type="text" data-win-bind="value: __quote.city Binding.Mode.twoway" />
                    <label class="inputlabel">Post Code:</label>
                    <input id="postcode" class="textinput" type="text" data-win-bind="value: __quote.postalCode Binding.Mode.twoway" />
                    <label class="inputlabel">Comments:</label>
                    <input id="comments" class="textinput" type="text" data-win-bind="value: __quote.comments Binding.Mode.twoway" />
                    <label class="inputlabel">Purpose:</label>
                    <select id="purpose" class="selectinput" data-win-bind="value: __quote.purpose Binding.Mode.twoway">
                        <option value="Refrigerator">Fridge</option>
                        <option value="Freezer">Freezer</option>
                    </select>
                    <label class="inputlabel">Description:</label>
                    <input id="purpose" class="textinput" type="text" data-win-bind="value: __quote.unitDescription Binding.Mode.twoway" />
                    <div class="extrasSection">
                        <label class="buttonlabel">Manage Extras:</label>
                        <button id="manageExtras" class="edit-tools-button" type="button"></button>
                    </div>
                    <div class="horizontalDetail">
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Width:</label>
                            <input id="width" class="textinput" type="text" data-win-bind="value: __quote.width Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Height:</label>
                            <input id="height" class="textinput" type="text" data-win-bind="value: __quote.height Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Depth:</label>
                            <input id="depth" class="textinput" type="text" data-win-bind="value: __quote.depth Binding.Mode.twoway" />
                        </div>
                    </div>
                    <div class="horizontalDetail">
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Ambient:</label>
                            <input id="width" class="textinput" type="text" data-win-bind="value: __quote.ambientAverage Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Peak:</label>
                            <input id="height" class="textinput" type="text" data-win-bind="value: __quote.ambientPeak Binding.Mode.twoway" />
                        </div>
                    </div>
                    <div class="horizontalDetail">
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Terms:</label>
                            <input id="width" class="textinput" type="text" data-win-bind="value: __quote.terms Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Total:</label>
                            <input id="height" class="textinput" type="text" data-win-bind="value: __quote.totalCost Binding.Mode.twoway" />
                        </div>
                        <div class="horizontalDetailCol">
                            <label class="inputlabel">Discount:</label>
                            <input id="height" class="textinput" type="text" data-win-bind="value: __quote.discount Binding.Mode.twoway" />
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/pages/orders/orders.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";
    var nav = WinJS.Navigation;

    WinJS.UI.Pages.define("pages/orders/orders.html", {
        listViewControl: null,
        editTools: null,
        editButtons: null,
        currentItem: null,
        originalItem: null,
        orderDetailElement: null,
        itemTemplateHTML: null,
        bound: false,
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {
            var subpage = element.querySelector(".page-section");
            var that = this;
            var fromQuote = WinJS.Promise.as();

            if (options && options.quote) {
                showProgress("Creating Order...");
                fromQuote = Data.orderCreateFromQuote(options.quote);
            }
            else {
                showProgress("Loading...");
            }

            return WinJS.UI.processAll(element).then(function () {
                element.querySelector("#manageExtras").addEventListener("click", that._extrasHandler.bind(that));
                element.querySelector("#manageEvents").addEventListener("click", that._eventsHandler.bind(that));

                that.listViewControl = element.querySelector(".orderListView").winControl;
                that.listViewControl.itemTemplate = that._itemRenderer.bind(that);
                that.itemTemplateHTML = element.querySelector(".orderItemTemplate").innerHTML;
                that.orderDetailElement = element.querySelector(".fullOrderDetail");

                subpage.style.display = "none";
                return fromQuote.then(function (neworder) {
                    return Data.ordersGet("").then(function (orders) {
                        if (!orders) {
                            hideProgress();
                            nav.back(nav.history.backStack.length);
                            return;
                        }
                        var toolsElement = subpage.querySelector(".edittools");
                        if (!toolsElement) {
                            return;
                        }
                        that.editTools = toolsElement.winControl;
                        that.editButtons = that.editTools.getButtons();
                        that.editTools.addEventListener("click", that._buttonHandler.bind(that));
                        that.listViewControl.forceLayout();
                        that.editButtons['add'].style.display = "none";
                        //that.editButtons['edit'].firstElementChild.textContent = "⛟";
                        that.editButtons['edit'].firstElementChild.textContent = WinJS.UI.AppBarIcon["newwindow"];
                        that.editButtons['edit'].title = "Deliver";
                        addAddressHandler(that.orderDetailElement.querySelector("#address"), function (place) {
                            that.currentItem.city = place.formatted_address;
                            that.currentItem.postalCode = getPostCodeFromPlace(place)
                        });
                        addAddressHandler(that.orderDetailElement.querySelector("#postcode"), function (place) {
                            that.currentItem.city = place.formatted_address;
                            that.currentItem.postalCode = getPostCodeFromPlace(place);
                            that.quoteDetailElement.querySelector("#postcode").value = that.currentItem.postalCode;
                        });

                        that.listViewControl.onselectionchanged = function (arg) {
                            that.listViewControl.selection.getItems().then(function (items) {
                                if (items.length > 0) {
                                    that.currentItem = items[0].data;
                                    that.originalItem = clone(items[0].data.backingData);
                                    WinJS.Binding.processAll(that.orderDetailElement, items[0].data);
                                    //that.editButtons['delete'].disabled = false;
                                    //that.editButtons['edit'].disabled = false;
                                    //that.editButtons['save'].disabled = false;
                                }
                                else {
                                    that.currentItem = null;
                                    that.originalItem = null;
                                    //that.editButtons['delete'].disabled = true;
                                    //that.editButtons['edit'].disabled = true;
                                    //that.editButtons['save'].disabled = true;
                                }
                            });
                        }

                        that.listViewControl.onloadingstatechanged = function (args) {
                            if (that.listViewControl.loadingState === "viewPortLoaded") {
                                WinJS.Promise.timeout().then(function () {
                                    var selectindex = 0;
                                    if (neworder) {
                                        selectindex = Data.orderFindById(neworder.orderId);
                                    }
                                    
                                    that.listViewControl.selection.add(selectindex);
                                    that.listViewControl.onloadingstatechanged = undefined;
                                });
                            }
                        }
                        hideProgress();
                        subpage.style.display = "";
                        WinJS.UI.Animation.enterContent(subpage);
                    });
                });
            });
        },

        _itemRenderer: function (itemPromise, recycled) {
            var that = this;
            return itemPromise.then(function (currentItem) {
                if (!that) {
                    return document.createElement("div");
                }
                var data = currentItem.data;
                return Data.quoteGetById(data.quoteId).then(function (quote) {
                    data.__quote = quote;

                    var boundTemplate = document.createElement("div");
                    boundTemplate.className = "win-template";
                    boundTemplate.innerHTML = that.itemTemplateHTML;

                    return WinJS.Binding.processAll(boundTemplate, data).then(function () {
                        return boundTemplate;
                    });
                });
            });
        },

        _extrasHandler: function (args) {
            popup("orderExtrasPopup", "Manage Extras", "pages/extras/extras.html", this.currentItem.__quote);
        },
        _eventsHandler: function (args) {
            popup("orderExtrasPopup", "Manage Events", "pages/orderevents/orderevents.html", this.currentItem);
        },
        _buttonHandler: function (args) {
            if (!args.label || (this.currentItem == null && args.label != 'add')) {
                return;
            }
            var that = this;

            switch (args.label) {
                case 'save': {
                    Data.orderSave(this.currentItem, this.originalItem).then(function (saved) {
                        if (saved) {
                            var index = Data.orders.indexOf(saved);
                            that.listViewControl.selection.clear();
                            that.listViewControl.selection.add(index);
                            that.listViewControl.ensureVisible(index);
                        }
                    });
                    break;
                }
                case 'edit': {
                    nav.navigate("pages/deliveries/deliveries.html", { order: that.currentItem });
                    break;
                }
                case 'delete': {
                    confirm("Delete Order", "Are you sure that you'd like to delete this order?", "Yes", "No").then(function (result) {
                        if (result.reason == "primary") {
                            var idx = Data.orders.indexOf(that.currentItem) - 1;
                            if (idx < 0) {
                                idx = 0;
                            }
                            Data.orderDelete(that.currentItem).then(function (deleted) {
                                that.listViewControl.selection.clear();
                                if (Data.orders.length > 0) {
                                    that.listViewControl.selection.add(idx);
                                    that.listViewControl.ensureVisible(idx);
                                }
                            });
                        }
                    });
                    break;
                }
                case 'add': {
                    this.listViewControl.selection.clear();
                    this.currentItem = Data.orderCreate();
                    this.originalItem = null;
                    WinJS.Binding.processAll(this.orderDetailElement, this.currentItem);
                    that.orderDetailElement.querySelector("#dealerName").focus();

                    break;
                }
                default: {

                }
            }
        },

        unload: function () {

        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();



================================================
FILE: src/Clients/Web/pages/quotes/quotes.css
================================================
﻿.quoteDetail {
}

    .quoteDetail .extrasSection {
        display: flex;
        width: 100%;
        align-items: center;
    }



================================================
FILE: src/Clients/Web/pages/quotes/quotes.html
================================================
﻿<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>quotes</title>

    <link href="quotes.css" rel="stylesheet" />
    <script src="quotes.js"></script>
</head>
<body>
    <div class="quotes fragment">
        <header class="page-header" aria-label="Header content" role="banner">
            <button class="page-header-home">
                <img src="../../images/FabrikamIcon.png" />
            </button>
            <h2 class="titlearea win-type-ellipsis">
                <span class="pagetitle">Quotes</span>
            </h2>
        </header>
        <section class="page-section" aria-label="Main content" role="main">
            <!-- Simple template for the ListView instantiation  -->
            <div class="quoteItemTemplate" data-win-control="WinJS.Binding.Template" style="display: none">
                <div class="listItem quoteItem">
                    <div class="quoteItem-Detail">
                        <h3 data-win-bind="textContent: dealerName"></h3>
                        <div class="list-item-entry-small" data-win-bind="textContent: validUntil"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: customerName"></div>
                        <div class="list-item-entry-small" data-win-bind="textContent: purpose"></div>
                        <div class="list-item-entry-small"><span data-win-bind="textContent: width"></span>W x <span data-win-bind="textContent: height"></span>H x <span data-win-bind="textContent: depth"></span>D <span data-win-bind="textContent: purpose"></span></div>
                    </div>
                </div>
            </div>

            <div class="edittools" data-win-control="Controls.EditTools" data-win-options="{  }"></div>

            <div id="quoteExtrasPopup" class="pagePopup">
                <div data-win-control="WinJS.UI.ContentDialog" data-win-options="{
                     title: 'Main instruction',
                     primaryCommandText: 'Done'
                 }">
                </div>
            </div>

            <div id="listView"
                 class="itemListView quoteListView"
                 data-win-control="WinJS.UI.ListView"
                 data-win-options="{
                    itemDataSource: Data.quotes.dataSource,
                    itemTemplate: select('.quoteItemTemplate'),
                    selectionMode: 'single',
                    tapBehavior: 'directSelect',
                    swipeBehavior: 'select',
                    layout: { type: WinJS.UI.ListLayout }
                 }">
            </div>

            <div class="editDetail quoteDetail">
                <label class="inputlabel">Dealer:</label>
                <input id="dealerName" class="textinput" type="text" data-win-bind="value: dealerName Binding.Mode.twoway" />
                <label class="inputlabel">Valid Until:</label>
                <input id="validUntil" class="textinput" type="text" data-win-bind="value: validUntil Binding.Mode.twoway" />
                <label class="inputlabel">Customer:</label>
                <input id="customerName" class="textinput" type="text" data-win-bind="value: customerName Binding.Mode.twoway" />
                <label class="inputlabel">Address:</label>
                <input id="address" class="textinput" type="text" data-win-bind="value: city Binding.Mode.twoway" />
                <label class="inputlabel">Post Code:</label>
                <input id="postcode" class="textinput" type="text" data-win-bind="value: postalCode Binding.Mode.twoway" />
                <label class="inputlabel">Comments:</label>
                <input id="comments" class="textinput" type="text" data-win-bind="value: comments Binding.Mode.twoway" />
                <label class="inputlabel">Purpose:</label>
                <select id="purpose" class="selectinput" data-win-bind="value: purpose Binding.Mode.twoway">
                    <option value="Refrigerator">Fridge</option>
                    <option value="Freezer">Freezer</option>
                </select>
                <label class="inputlabel">Description:</label>
                <input id="purpose" class="textinput" type="text" data-win-bind="value: unitDescription Binding.Mode.twoway" />
                <div class="extrasSection">
                    <label class="buttonlabel">Manage Extras:</label>
                    <button id="manageExtras" class="edit-tools-button" type="button"></button>
                </div>
                <div class="horizontalDetail">
                    <div class="horizontalDetailCol">
                        <label class="inputlabel">Width:</label>
                        <input id="width" class="textinput" type="text" data-win-bind="value: width Binding.Mode.twoway" />
                    </div>
                    <div class="horizontalDetailCol">
                        <label class="inputlabel">Height:</label>
                        <input id="height" class="textinput" type="text" data-win-bind="value: height Binding.Mode.twoway" />
                    </div>
                    <div class="horizontalDetailCol">
                        <label class="inputlabel">Depth:</label>
                        <input id="depth" class="textinput" type="text" data-win-bind="value: depth Binding.Mode.twoway" />
                    </div>
                </div>
                <div class="horizontalDetail">
                    <div class="horizontalDetailCol">
                        <label class="inputlabel">Ambient:</label>
                        <input id="width" class="textinput" type="text" data-win-bind="value: ambientAverage Binding.Mode.twoway" />
                    </div>
                    <div class="horizontalDetailCol">
                        <label class="inputlabel">Peak:</label>
                        <input id="height" class="textinput" type="text" data-win-bind="value: ambientPeak Binding.Mode.twoway" />
                    </div>
                </div>
                <div class="horizontalDetail">
                    <div class="horizontalDetailCol">
                        <label class="inputlabel">Terms:</label>
                        <input id="width" class="textinput" type="text" data-win-bind="value: terms Binding.Mode.twoway" />
                    </div>
                    <div class="horizontalDetailCol">
                        <label class="inputlabel">Total:</label>
                        <input id="height" class="textinput" type="text" data-win-bind="value: totalCost Binding.Mode.twoway" />
                    </div>
                    <div class="horizontalDetailCol">
                        <label class="inputlabel">Discount:</label>
                        <input id="height" class="textinput" type="text" data-win-bind="value: discount Binding.Mode.twoway" />
                    </div>
                </div>
            </div>
        </section>
    </div>
</body>
</html>



================================================
FILE: src/Clients/Web/pages/quotes/quotes.js
================================================
﻿// For an introduction to the Page Control template, see the following documentation:
// http://go.microsoft.com/fwlink/?LinkId=232511
(function () {
    "use strict";
    var nav = WinJS.Navigation;

    WinJS.UI.Pages.define("pages/quotes/quotes.html", {
        listViewControl: null,
        editTools: null,
        editButtons: null,
        currentItem: null,
        quoteDetailElement: null,
        // This function is called whenever a user navigates to this page. It
        // populates the page elements with the app's data.
        ready: function (element, options) {
            var subpage = element.querySelector(".page-section");
            var that = this;

            return WinJS.UI.processAll(element).then(function () {
                element.querySelector("#manageExtras").addEventListener("click", that._extrasHandler.bind(that));

                that.listViewControl = element.querySelector(".quoteListView").winControl;
                that.quoteDetailElement = element.querySelector(".quoteDetail");
                subpage.style.display = "none";
                showProgress("Loading...");
                return Data.quotesGet("").then(function (quotes) {
                    if (!quotes) {
                        hideProgress();
                        nav.back(nav.history.backStack.length);
                        return;
                    }
                    var toolsElement = subpage.querySelector(".edittools");
                    if (!toolsElement) {
                        return;
                    }
                    that.editTools = toolsElement.winControl;
                    that.editButtons = that.editTools.getButtons();
                    that.editTools.addEventListener("click", that._buttonHandler.bind(that));
                    that.listViewControl.forceLayout();

                    that.editButtons['add'].disabled = false;
                    that.editButtons['edit'].style.display = "";
                    that.editButtons['edit'].firstElementChild.textContent = WinJS.UI.AppBarIcon["newwindow"];

                    addAddressHandler(that.quoteDetailElement.querySelector("#address"), function (place) {
                        that.currentItem.city = place.formatted_address;
                        that.currentItem.postalCode = getPostCodeFromPlace(place)
                    });
                    addAddressHandler(that.quoteDetailElement.querySelector("#postcode"), function (place) {
                        that.currentItem.city = place.formatted_address;
                        that.currentItem.postalCode = getPostCodeFromPlace(place);
                        that.quoteDetailElement.querySelector("#postcode").value = that.currentItem.postalCode;
                    });
                    that.listViewControl.onselectionchanged = function (arg) {
                        that.listViewControl.selection.getItems().then(function (items) {
                            if (items.length > 0) {
                                that.currentItem = items[0].data;
                                WinJS.Binding.processAll(that.quoteDetailElement, items[0].data);
                                //that.editButtons['delete'].disabled = false;
                                //that.editButtons['edit'].disabled = false;
                                //that.editButtons['save'].disabled = false;
                            }
                            else {
                                that.currentItem = null;
                                //that.editButtons['delete'].disabled = true;
                                //that.editButtons['edit'].disabled = true;
                                //that.editButtons['save'].disabled = true;
                            }
                        });
                    }
                    that.listViewControl.selection.add(0);
                    hideProgress();
                    subpage.style.display = "";

                    WinJS.UI.Animation.enterContent(subpage);
                });
            });
        },
        _extrasHandler: function (args) {
            popup("quoteExtrasPopup", "Manage Extras", "pages/extras/extras.html", this.currentItem);
        },
        _buttonHandler: function (args) {
            if (!args.label || (this.currentItem == null && args.label != 'add')) {
                return;
            }
            var that = this;

            switch (args.label) {
                case 'save': {
                    Data.quoteSave(this.currentItem).then(function (saved) {
                        if (saved) {
                            var index = Data.quotes.indexOf(saved);
                            that.listViewControl.selection.clear();
                            that.listViewControl.selection.add(index);
                            that.listViewControl.ensureVisible(index);
                        }
                    });
                    break;
                }
                case 'edit': {
                    nav.navigate("pages/orders/orders.html", { quote: that.currentItem });
                    break;
                }
                case 'delete': {
                    confirm("Delete Dealer", "Are you sure that you'd like to delete this quote?", "Yes", "No").then(function (result) {
                        if (result.reason == "primary") {
                            var idx = Data.quotes.indexOf(that.currentItem) - 1;
                            if (idx < 0) {
                                idx = 0;
                            }
                            Data.quoteDelete(that.currentItem).then(function (deleted) {
                                that.listViewControl.selection.clear();
                                if (Data.quotes.length > 0) {
                                    that.listViewControl.selection.add(idx);
                                    that.listViewControl.ensureVisible(idx);
                                }
                            });
                        }
                    });
                    break;
                }
                case 'add': {
                    this.listViewControl.selection.clear();
                    this.currentItem = Data.quoteCreate();
                    WinJS.Binding.processAll(this.quoteDetailElement, this.currentItem);
                    that.quoteDetailElement.querySelector("#dealerName").focus();

                    break;
                }
                default: {

                }
            }
        },

        unload: function () {

        },

        updateLayout: function (element) {
            /// <param name="element" domElement="true" />

            // TODO: Respond to changes in layout.
        }
    });
})();


